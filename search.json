[{"title":"MySQL语法第一弹","url":"/2021/11/01/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%B8%80%E5%BC%B9/","content":"\n根据老杜MySQL教学视频整理\n\n1、sql、DB、DBMS分别是什么，他们之间的关系？  DB:      DataBase（数据库，数据库实际上在硬盘上以文件的形式存在）\n  DBMS:    DataBase Management System（数据库管理系统，常见的有：MySQL Oracle DB2 Sybase SqlServer…）\n  SQL:    结构化查询语言，是一门标准通用的语言。标准的sql适合于所有的数据库产品。    SQL属于高级语言。只要能看懂英语单词的，写出来的sql语句，可以读懂什么意思。    SQL语句在执行的时候，实际上内部也会先进行编译，然后再执行sql。（sql语句的编译由DBMS完成。）\n  DBMS负责执行sql语句，通过执行sql语句来操作DB当中的数据。  DBMS -(执行)-&gt; SQL -(操作)-&gt; DB\n2、什么是表？\n表：table\n表：table是数据库的基本组成单元，所有的数据都以表格的形式组织，目的是可读性强。\n一个表包括行和列： 行：被称为数据/记录(data) 列：被称为字段(column)\n学号(int)\t姓名(varchar)\t年龄(int)110\t\t\t张三\t\t\t\t20120\t\t\t李四\t\t\t\t21\n\n每一个字段应该包括哪些属性？字段名、数据类型、相关的约束。\n3、学习MySQL主要还是学习通用的SQL语句，那么SQL语句包括增删改查，SQL语句怎么分类呢？ DQL（数据查询语言）: 查询语句，凡是select语句都是DQL。 DML（数据操作语言）：insert delete update，对表当中的数据进行增删改。 DDL（数据定义语言）：create drop alter，对表结构的增删改。 TCL（事务控制语言）：commit提交事务，rollback回滚事务。(TCL中的T是Transaction) DCL（数据控制语言）: grant授权、revoke撤销权限等。\n4、导入数据（后期大家练习的时候使用这个演示的数据）    第一步：登录mysql数据库管理系统        dos命令窗口：            mysql -uroot -p333    第二步：查看有哪些数据库\nshow databases; (这个不是SQL语句，属于MySQL的命令。)\t\t+--------------------+\t\t| Database           |\t\t+--------------------+\t\t| information_schema |\t\t| mysql              |\t\t| performance_schema |\t\t| test               |\t\t+--------------------+\n\n​    第三步：创建属于我们自己的数据库create database bjpowernode; (这个不是SQL语句，属于MySQL的命令。)​    第四步：使用bjpowernode数据​        use bjpowernode; (这个不是SQL语句，属于MySQL的命令。)​    第五步：查看当前使用的数据库中有哪些表？​        show tables; (这个不是SQL语句，属于MySQL的命令。)​    第六步：初始化数据​        mysql&gt; source D:\\course\\05-MySQL\\resources\\bjpowernode.sql​    \n  注意：数据初始化完成之后，有三张表：  +-----------------------+| Tables_in_bjpowernode |+-----------------------+| dept                  || emp                   || salgrade              |+-----------------------+\n5、bjpowernode.sql，这个文件以sql结尾，这样的文件被称为“sql脚本”。什么是sql脚本呢？    当一个文件的扩展名是.sql，并且该文件中编写了大量的sql语句，我们称这样的文件为sql脚本。    注意：直接使用source命令可以执行sql脚本。    sql脚本中的数据量太大的时候，无法打开，请使用source命令完成初始化。\n6、删除数据库：drop database bjpowernode;\n7、查看表结构：\n\t+-----------------------+​\t| Tables_in_bjpowernode |​\t+-----------------------+​\t| dept                  |   (部门表)​\t| emp                   |   (员工表)​\t| salgrade              |   (工资等级表)​\t+-----------------------+\n\nmysql&gt; desc dept;\n+--------+-------------+------+-----+---------+-------+\n| Field  | Type        | Null | Key | Default | Extra |\n+--------+-------------+------+-----+---------+-------+\n| DEPTNO | int(2)      | NO   | PRI | NULL    |       |        部门编号\n| DNAME  | varchar(14) | YES  |     | NULL    |       |        部门名称\n| LOC    | varchar(13) | YES  |     | NULL    |       |        部门位置\n+--------+-------------+------+-----+---------+-------+\n\nmysql&gt; desc emp;\n+----------+-------------+------+-----+---------+-------+\n| Field    | Type        | Null | Key | Default | Extra |\n+----------+-------------+------+-----+---------+-------+\n| EMPNO    | int(4)      | NO   | PRI | NULL    |       |    员工编号\n| ENAME    | varchar(10) | YES  |     | NULL    |       |    员工姓名\n| JOB      | varchar(9)  | YES  |     | NULL    |       |    工作岗位\n| MGR      | int(4)      | YES  |     | NULL    |       |    上级领导编号\n| HIREDATE | date        | YES  |     | NULL    |       |    入职日期\n| SAL      | double(7,2) | YES  |     | NULL    |       |    月薪\n| COMM     | double(7,2) | YES  |     | NULL    |       |    补助/津贴\n| DEPTNO   | int(2)      | YES  |     | NULL    |       |    部门编号\n+----------+-------------+------+-----+---------+-------+\n\n`mysql&gt; desc salgrade;`\n+-------+---------+------+-----+---------+-------+\n| Field | Type    | Null | Key | Default | Extra |\n+-------+---------+------+-----+---------+-------+\n| GRADE | int(11) | YES  |     | NULL    |       |        等级\n| LOSAL | int(11) | YES  |     | NULL    |       |        最低薪资\n| HISAL | int(11) | YES  |     | NULL    |       |        最高薪资\n+-------+---------+------+-----+---------+-------+\n\n8、表中的数据？\nmysql&gt; select * from emp;+-------+--------+-----------+------+------------+---------+---------+--------+| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |+-------+--------+-----------+------+------------+---------+---------+--------+|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 ||  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 ||  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 ||  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 ||  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 ||  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 ||  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 ||  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 ||  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 ||  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 ||  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 ||  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 ||  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 ||  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |+-------+--------+-----------+------+------------+---------+---------+--------+mysql&gt; select * from dept;+--------+------------+----------+| DEPTNO | DNAME      | LOC      |+--------+------------+----------+|     10 | ACCOUNTING | NEW YORK ||     20 | RESEARCH   | DALLAS   ||     30 | SALES      | CHICAGO  ||     40 | OPERATIONS | BOSTON   |+--------+------------+----------+mysql&gt; select * from salgrade;+-------+-------+-------+| GRADE | LOSAL | HISAL |+-------+-------+-------+|     1 |   700 |  1200 ||     2 |  1201 |  1400 ||     3 |  1401 |  2000 ||     4 |  2001 |  3000 ||     5 |  3001 |  9999 |+-------+-------+-------+9、常用命令？mysql&gt; select database(); 查看当前使用的是哪个数据库+-------------+| database()  |+-------------+| bjpowernode |+-------------+mysql&gt; select version(); 查看mysql的版本号。+-----------+| version() |+-----------+| 5.5.36    |+-----------+\\c   命令，结束一条语句。exit 命令，退出mysql。\n\n10、查看创建表的语句：    show create table emp;\n11、简单的查询语句（DQL）\n语法格式：    select 字段名1,字段名2,字段名3,.... from 表名;\n提示：    1、任何一条sql语句以“;”结尾。    2、sql语句不区分大小写。\n查询员工的年薪？（字段可以参与数学运算。）\nselect ename,sal * 12 from emp;\t+--------+----------+\t| ename  | sal * 12 |\t+--------+----------+\t| SMITH  |  9600.00 |\t| ALLEN  | 19200.00 |\t| WARD   | 15000.00 |\t| JONES  | 35700.00 |\t| MARTIN | 15000.00 |\t| BLAKE  | 34200.00 |\t| CLARK  | 29400.00 |\t| SCOTT  | 36000.00 |\t| KING   | 60000.00 |\t| TURNER | 18000.00 |\t| ADAMS  | 13200.00 |\t| JAMES  | 11400.00 |\t| FORD   | 36000.00 |\t| MILLER | 15600.00 |\t+--------+----------+\n\n给查询结果的列重命名？    select ename,sal * 12 as yearsal from emp;\n别名中有中文？\nselect ename,sal * 12 as 年薪 from emp; // 错误\tselect ename,sal * 12 as &#x27;年薪&#x27; from emp;\t+--------+----------+\t| ename  | 年薪        |\t+--------+----------+\t| SMITH  |  9600.00 |\t| ALLEN  | 19200.00 |\t| WARD   | 15000.00 |\t| JONES  | 35700.00 |\t| MARTIN | 15000.00 |\t| BLAKE  | 34200.00 |\t| CLARK  | 29400.00 |\t| SCOTT  | 36000.00 |\t| KING   | 60000.00 |\t| TURNER | 18000.00 |\t| ADAMS  | 13200.00 |\t| JAMES  | 11400.00 |\t| FORD   | 36000.00 |\t| MILLER | 15600.00 |\t+--------+----------+\n\n\n注意：标准sql语句中要求字符串使用单引号括起来。虽然mysql支持双引号，尽量别用。\n\nas关键字可以省略？\nmysql&gt; select empno,ename,sal * 12 yearsal from emp;\t+-------+--------+----------+\t| empno | ename  | yearsal  |\t+-------+--------+----------+\t|  7369 | SMITH  |  9600.00 |\t|  7499 | ALLEN  | 19200.00 |\t|  7521 | WARD   | 15000.00 |\t|  7566 | JONES  | 35700.00 |\t|  7654 | MARTIN | 15000.00 |\t|  7698 | BLAKE  | 34200.00 |\t|  7782 | CLARK  | 29400.00 |\t|  7788 | SCOTT  | 36000.00 |\t|  7839 | KING   | 60000.00 |\t|  7844 | TURNER | 18000.00 |\t|  7876 | ADAMS  | 13200.00 |\t|  7900 | JAMES  | 11400.00 |\t|  7902 | FORD   | 36000.00 |\t|  7934 | MILLER | 15600.00 |\t+-------+--------+----------+\n\n查询所有字段？    select * from emp; // 实际开发中不建议使用*，效率较低。\n12、条件查询。\n语法格式：\t\tselect \t\t\t字段,字段...\t\tfrom\t\t\t表名\t\twhere\t\t\t条件;\n\n执行顺序：先from，然后where，最后select\n查询工资等于5000的员工姓名？    select ename from emp where sal = 5000;    +——-+    | ename |    +——-+    | KING  |    +——-+查询SMITH的工资？    select sal from emp where ename = ‘SMITH’; // 字符串使用单引号括起来。    +——–+    | sal    |    +——–+    | 800.00 |    +——–+找出工资高于3000的员工？    select ename,sal from emp where sal &gt; 3000;\n​    select ename,sal from emp where sal &gt;= 3000;\n​    select ename,sal from emp where sal &lt; 3000;\n​    select ename,sal from emp where sal &lt;= 3000;\n找出工资不等于3000的？    select ename,sal from emp where sal &lt;&gt; 3000;    select ename,sal from emp where sal != 3000;\n找出工资在1100和3000之间的员工，包括1100和3000？    select ename,sal from emp where sal &gt;= 1100 and sal &lt;= 3000;\n​    select ename,sal from emp where sal between 1100 and 3000; // between…and…是闭区间 [1100 ~ 3000]\n​    select ename,sal from emp where sal between 3000 and 1100; // 查询不到任何数据\n​    between and在使用的时候必须左小右大。\n​    between and除了可以使用在数字方面之外，还可以使用在字符串方面。​    select ename from emp where ename between ‘A’ and ‘C’;​    +——-+​    | ename |​    +——-+​    | ALLEN |​    | BLAKE |​    | ADAMS |​    +——-+​    select ename from emp where ename between ‘A’ and ‘D’; // 左闭右开。\n​    找出哪些人津贴为NULL？​        在数据库当中NULL不是一个值，代表什么也没有，为空。​        空不是一个值，不能用等号衡量。​        必须使用 is null或者is not null​        select ename,sal,comm from emp where comm is null;​        +——–+———+——+​        | ename  | sal     | comm |​        +——–+———+——+​        | SMITH  |  800.00 | NULL |​        | JONES  | 2975.00 | NULL |​        | BLAKE  | 2850.00 | NULL |​        | CLARK  | 2450.00 | NULL |​        | SCOTT  | 3000.00 | NULL |​        | KING   | 5000.00 | NULL |​        | ADAMS  | 1100.00 | NULL |​        | JAMES  |  950.00 | NULL |​        | FORD   | 3000.00 | NULL |​        | MILLER | 1300.00 | NULL |​        +——–+———+——+​        select ename,sal,comm from emp where comm = null;​        Empty set (0.00 sec)\n​    找出哪些人津贴不为NULL？​        select ename,sal,comm from emp where comm is not null;​        +——–+———+———+​        | ename  | sal     | comm    |​        +——–+———+———+​        | ALLEN  | 1600.00 |  300.00 |​        | WARD   | 1250.00 |  500.00 |​        | MARTIN | 1250.00 | 1400.00 |​        | TURNER | 1500.00 |    0.00 |​        +——–+———+———+​​    找出哪些人没有津贴？​        select ename,sal,comm from emp where comm is null or comm = 0;​        +——–+———+——+​        | ename  | sal     | comm |​        +——–+———+——+​        | SMITH  |  800.00 | NULL |​        | JONES  | 2975.00 | NULL |​        | BLAKE  | 2850.00 | NULL |​        | CLARK  | 2450.00 | NULL |​        | SCOTT  | 3000.00 | NULL |​        | KING   | 5000.00 | NULL |​        | TURNER | 1500.00 | 0.00 |​        | ADAMS  | 1100.00 | NULL |​        | JAMES  |  950.00 | NULL |​        | FORD   | 3000.00 | NULL |​        | MILLER | 1300.00 | NULL |​        +——–+———+——+​​    找出工作岗位是MANAGER和SALESMAN的员工？​        select ename,job from emp where job = ‘MANAGER’ or job = ‘SALESMAN’;​        +——–+———-+​        | ename  | job      |​        +——–+———-+​        | ALLEN  | SALESMAN |​        | WARD   | SALESMAN |​        | JONES  | MANAGER  |​        | MARTIN | SALESMAN |​        | BLAKE  | MANAGER  |​        | CLARK  | MANAGER  |​        | TURNER | SALESMAN |​        +——–+———-+​​    and和or联合起来用：找出薪资大于1000的并且部门编号是20或30部门的员工。​        select ename,sal,deptno from emp where sal &gt; 1000 and deptno = 20 or deptno = 30; // 错误的​        select ename,sal,deptno from emp where sal &gt; 1000 and (deptno = 20 or deptno = 30); // 正确的。​        注意：当运算符的优先级不确定的时候加小括号。​​    in等同于or：找出工作岗位是MANAGER和SALESMAN的员工？​        select ename,job from emp where job = ‘SALESMAN’ or job = ‘MANAGER’;​        select ename,job from emp where job in(‘SALESMAN’, ‘MANAGER’);\n​        select ename,job from emp where sal in(800, 5000); // in后面的值不是区间，是具体的值。​        +——-+———–+​        | ename | job       |​        +——-+———–+​        | SMITH | CLERK     |​        | KING  | PRESIDENT |​        +——-+———–+​​    not in: 不在这几个值当中。​        select ename,job from emp where sal not in(800, 5000);​​    模糊查询like ?​        找出名字当中含有O的？​            （在模糊查询当中，必须掌握两个特殊的符号，一个是%，一个是_）​            %代表任意多个字符，_代表任意1个字符。​            select ename from emp where ename like ‘%O%’;​            +——-+​            | ename |​            +——-+​            | JONES |​            | SCOTT |​            | FORD  |​            +——-+​        找出名字中第二个字母是A的？​            select ename from emp where ename like ‘A%’;​            +——–+​            | ename  |​            +——–+​            | WARD   |​            | MARTIN |​            | JAMES  |​            +——–+​        找出名字中有下划线的？​            mysql&gt; select * from t_user;​            +——+———-+​            | id   | name     |​            +——+———-+​            |    1 | zhangsan |​            |    2 | lisi     |​            |    3 | WANG_WU  |​            +——+———-+​            select name from t_user where name like ‘%%’;​            +———-+​            | name     |​            +———-+​            | zhangsan |​            | lisi     |​            | WANG_WU  |​            +———-+​            select name from t_user where name like ‘%_%’;​            +———+​            | name    |​            +———+​            | WANG_WU |​            +———+\n​        找出名字中最后一个字母是T的？​            select ename from emp where ename like ‘%T’;​            +——-+​            | ename |​            +——-+​            | SCOTT |​            +——-+\n13、排序（升序、降序）\n按照工资升序，找出员工名和薪资？    select        ename,sal    from        emp    order by        sal;+——–+———+| ename  | sal     |+——–+———+| SMITH  |  800.00 || JAMES  |  950.00 || ADAMS  | 1100.00 || WARD   | 1250.00 || MARTIN | 1250.00 || MILLER | 1300.00 || TURNER | 1500.00 || ALLEN  | 1600.00 || CLARK  | 2450.00 || BLAKE  | 2850.00 || JONES  | 2975.00 || FORD   | 3000.00 || SCOTT  | 3000.00 || KING   | 5000.00 |+——–+———+\n注意：默认是升序。怎么指定升序或者降序呢？asc表示升序，desc表示降序。    select ename , sal from emp order by sal; // 升序    select ename , sal from emp order by sal asc; // 升序    select ename , sal from emp order by sal desc; // 降序。\n按照工资的降序排列，当工资相同的时候再按照名字的升序排列。    select ename,sal from emp order by sal desc;    select ename,sal from emp order by sal desc , ename asc;    注意：越靠前的字段越能起到主导作用。只有当前面的字段无法完成排序的时候，才会启用后面的字段。\n找出工作岗位是SALESMAN的员工，并且要求按照薪资的降序排列。    select        ename,job,sal    from        emp    where        job = ‘SALESMAN’    order by        sal desc;+——–+———-+———+| ename  | job      | sal     |+——–+———-+———+| ALLEN  | SALESMAN | 1600.00 || TURNER | SALESMAN | 1500.00 || WARD   | SALESMAN | 1250.00 || MARTIN | SALESMAN | 1250.00 |+——–+———-+———+\nselect    字段                        3from    表名                        1where    条件                        2order by    ….                        4\norder by是最后执行的。\n14、分组函数？    count 计数    sum 求和    avg 平均值    max 最大值    min 最小值\n记住：所有的分组函数都是对“某一组”数据进行操作的。\n找出工资总和？    select sum(sal) from emp;找出最高工资？    select max(sal) from emp;找出最低工资？    select min(sal) from emp;找出平均工资？    select avg(sal) from emp;找出总人数？    select count(*) from emp;    select count(ename) from emp;\n分组函数一共5个。分组函数还有另一个名字：多行处理函数。多行处理函数的特点：输入多行，最终输出的结果是1行。\n分组函数自动忽略NULL。    select count(comm) from emp;    +————-+    | count(comm) |    +————-+    |           4 |    +————-+\n​    select sum(comm) from emp;​    +———–+​    | sum(comm) |​    +———–+​    |   2200.00 |​    +———–+\n​    select sum(comm) from emp where comm is not null; // 不需要额外添加这个过滤条件。sum函数自动忽略NULL。\n​    找出工资高于平均工资的员工？​        select avg(sal) from emp; // 平均工资​        +————-+​        | avg(sal)    |​        +————-+​        | 2073.214286 |​        +————-+\n​        select ename,sal from emp where sal &gt; avg(sal); //ERROR 1111 (HY000): Invalid use of group function​        思考以上的错误信息：无效的使用了分组函数？​            原因：SQL语句当中有一个语法规则，分组函数不可直接使用在where子句当中。why????​            怎么解释？​                因为group by是在where执行之后才会执行的。​​            select        5​                ..​            from            1​                ..​            where            2​                ..​            group by        3​                ..​            having        4​                ..​            order by        6​                ..\ncount()和count(具体的某个字段)，他们有什么区别？    count():不是统计某个字段中数据的个数，而是统计总记录条数。（和某个字段无关）    count(comm): 表示统计comm字段中不为NULL的数据总数量。\n分组函数也能组合起来用：    select count(*),sum(sal),avg(sal),max(sal),min(sal) from emp;\n​    +———-+———-+————-+———-+———-+​    | count(*) | sum(sal) | avg(sal)    | max(sal) | min(sal) |​    +———-+———-+————-+———-+———-+​    |       14 | 29025.00 | 2073.214286 |  5000.00 |   800.00 |​    +———-+———-+————-+———-+———-+\n找出工资高于平均工资的员工？    第一步：找出平均工资        select avg(sal) from emp;        +————-+        | avg(sal)    |        +————-+        | 2073.214286 |        +————-+    第二步：找出高于平均工资的员工        select ename,sal from emp where sal &gt; 2073.214286;        +——-+———+        | ename | sal     |        +——-+———+        | JONES | 2975.00 |        | BLAKE | 2850.00 |        | CLARK | 2450.00 |        | SCOTT | 3000.00 |        | KING  | 5000.00 |        | FORD  | 3000.00 |        +——-+———+\n​        select ename,sal from emp where sal &gt; (select avg(sal) from emp);\n15、单行处理函数    什么是单行处理函数？        输入一行，输出一行。\n计算每个员工的年薪？\n    select ename,(sal+comm)*12 as yearsal from emp;\n    重点：所有数据库都是这样规定的，只要有NULL参与的运算结果一定是NULL。\n    使用ifnull函数：\n    select ename,(sal+ifnull(comm,0))*12 as yearsal from emp;\n\nifnull() 空处理函数？\n    ifnull(可能为NULL的数据,被当做什么处理) ： 属于单行处理函数。\n    select ename,ifnull(comm,0) as comm from emp;\n    +--------+---------+\n    | ename  | comm    |\n    +--------+---------+\n    | SMITH  |    0.00 |\n    | ALLEN  |  300.00 |\n    | WARD   |  500.00 |\n    | JONES  |    0.00 |\n    | MARTIN | 1400.00 |\n    | BLAKE  |    0.00 |\n    | CLARK  |    0.00 |\n    | SCOTT  |    0.00 |\n    | KING   |    0.00 |\n    | TURNER |    0.00 |\n    | ADAMS  |    0.00 |\n    | JAMES  |    0.00 |\n    | FORD   |    0.00 |\n    | MILLER |    0.00 |\n    +--------+---------+\n\n16、group by 和 having\ngroup by ： 按照某个字段或者某些字段进行分组。having : having是对分组之后的数据进行再次过滤。\n案例：找出每个工作岗位的最高薪资。select max(sal),job from emp group by job;\n+———-+———–+| max(sal) | job       |+———-+———–+|  3000.00 | ANALYST   ||  1300.00 | CLERK     ||  2975.00 | MANAGER   ||  5000.00 | PRESIDENT ||  1600.00 | SALESMAN  |+———-+———–+\n​    \n注意：分组函数一般都会和group by联合使用，这也是为什么它被称为分组函数的原因。并且任何一个分组函数（count sum avg max min）都是在group by语句执行结束之后才会执行的。当一条sql语句没有group by的话，整张表的数据会自成一组。\nselect ename,max(sal),job from emp group by job;以上在mysql当中，查询结果是有的，但是结果没有意义，在Oracle数据库当中会报错。语法错误。Oracle的语法规则比MySQL语法规则严谨。记住一个规则：当一条语句中有group by的话，select后面只能跟分组函数和参与分组的字段。\n每个工作岗位的平均薪资？    select job,avg(sal) from emp group by job;    +———–+————-+    | job       | avg(sal)    |    +———–+————-+    | ANALYST   | 3000.000000 |    | CLERK     | 1037.500000 |    | MANAGER   | 2758.333333 |    | PRESIDENT | 5000.000000 |    | SALESMAN  | 1400.000000 |    +———–+————-+\n多个字段能不能联合起来一块分组？案例：找出每个部门不同工作岗位的最高薪资。    select        deptno,job,max(sal)    from        emp    group by        deptno,job;\n找出每个部门的最高薪资，要求显示薪资大于2900的数据。\n​    第一步：找出每个部门的最高薪资​    select max(sal),deptno from emp group by deptno;​    +———-+——–+​    | max(sal) | deptno |​    +———-+——–+​    |  5000.00 |     10 |​    |  3000.00 |     20 |​    |  2850.00 |     30 |​    +———-+——–+\n​    第二步：找出薪资大于2900​    select max(sal),deptno from emp group by deptno having max(sal) &gt; 2900; // 这种方式效率低。​    +———-+——–+​    | max(sal) | deptno |​    +———-+——–+​    |  5000.00 |     10 |​    |  3000.00 |     20 |​    +———-+——–+\n​    select max(sal),deptno from emp where sal &gt; 2900 group by deptno;  // 效率较高，建议能够使用where过滤的尽量使用where。​    +———-+——–+​    | max(sal) | deptno |​    +———-+——–+​    |  5000.00 |     10 |​    |  3000.00 |     20 |​    +———-+——–+\n找出每个部门的平均薪资，要求显示薪资大于2000的数据。\n第一步：找出每个部门的平均薪资select deptno,avg(sal) from emp group by deptno;+——–+————-+| deptno | avg(sal)    |+——–+————-+|     10 | 2916.666667 ||     20 | 2175.000000 ||     30 | 1566.666667 |+——–+————-+\n第二步：要求显示薪资大于2000的数据select deptno,avg(sal) from emp group by deptno having avg(sal) &gt; 2000;+——–+————-+| deptno | avg(sal)    |+——–+————-+|     10 | 2916.666667 ||     20 | 2175.000000 |+——–+————-+\nwhere后面不能使用分组函数：    select deptno,avg(sal) from emp where avg(sal) &gt; 2000 group by deptno;    // 错误了。    这种情况只能使用having过滤。\n17、总结一个完整的DQL语句怎么写？\nselect        5    ..from            1    ..where            2    ..group by        3    ..having        4    ..order by        6    ..\n  从某张表中查询数据语句的执行顺序：  1.先经过where条件筛选出有价值的数据；  2.group对这些数据进行分组  3.分组之后可以继续使用having再一次筛选  4.挑选出想要的数据  5.对最终的筛选结果进行排序。\n","categories":["技术","笔记"],"tags":["MySQL","数据库","SQL"]},{"title":"MySQL语法第三弹","url":"/2021/11/05/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%B8%89%E5%BC%B9/","content":"待更…..\n","categories":["技术","笔记"],"tags":["MySQL","数据库","SQL"]},{"title":"Markdown语法","url":"/2021/11/01/Markdown%E8%AF%AD%E6%B3%95/","content":"前言Markdown是一种「轻标记型」纯文本语言，优点有：\n\n纯文本内容，键盘写作简单纯粹\n\n专注创作，不纠葛于排版格式\n\n多平台支持，多格式导出\n\n语法简单，效率很高\n\n\n熟悉它的命令之后，能让你在写作中不必关心内容的格式，尺寸等问题专心地从事内容创造，再搭配上一款优秀的Markdown编辑器能让你键指如飞，畅快写作~\n本文主要介绍Markdown的常用语法以及typora的常用操作\n\n本网站的Markdown渲染采用的是Gihub 的GFM,语法和渲染规则和标准的Markdown稍有出入。\ntypora是一众Markdown编辑器中的飒色美人，界面简洁优雅，功能齐全强大，支持即时渲染技术，所写即所见，还内嵌了mermaid，得益于此，她能帮你画流程图，UML时序图，甘特图，类图……除此之外，还有以下功能：\n\n支持图床配置和贴心的图片路径设计\n搜索，批量替换内容，大纲整理，不在话下\n搭配Onedrive，阿里云盘等网盘轻松实现多端联动\n\n爱她，只需片刻。\n\n内容结构1.Markdown的常用语法2.typora常用操作附录\n\n\n\nMarkdown常用语法斜体，高亮和粗体  代码：\n*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~==高亮==\n\n显示效果：\n\n斜体或_斜体_粗体加粗斜体删除线==高亮==\n\n\nps：本小站高亮渲染出幺蛾子了，客官将就下~\n\n分级标题  第一种写法：\n这是一个一级标题============================这是一个二级标题--------------------------------------------------\n\n第二种写法：\n# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题\n\n编辑器中观察，很简单，一级标题字号最大，依级递减。\n超链接  Markdown 支持两种形式的链接语法： 行内式 和 参考式 两种形式，行内式一般使用较多。\n行内式语法说明：[]里写链接文字，()里写链接地址, ()中的”“中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。[链接文字](链接地址 “链接标题”)’这样的形式。链接地址与链接标题前有一个空格。代码：\n兄弟们！[上任鹅城！](https://www.bilibili.com/video/BV1yt4y1Q7SS?from=search&amp;seid=6918277224816122173&amp;spm_id_from=333.337.0.0)I am [IronMan](https://www.bilibili.com/video/BV12341117rG?from=search&amp;seid=51519159685723851&amp;spm_id_from=333.337.0.0 &quot;野生钢铁侠&quot;)\n\n显示效果：\n兄弟们！上任鹅城！I am IronMan\n参考式\n参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。\n语法说明： \n\n参考式链接分为两部分，文中的写法 [链接文字][链接标记]，\n在文本的任意位置添加[链接标记]:链接地址 “链接标题”\n如果链接文字本身可以做为链接标记，你也可以写成 [链接文字][] \n\n代码：\n我经常去的几个网站[Google][1]、[processon][2]以及[微信读书][3][processon][2]是一个不错的[网站][]。[1]:http://www.google.com &quot;Google&quot;[2]:https://www.processon.com/ &quot;processon&quot;[3]:https://weread.qq.com &quot;微信读书&quot;[网站]:https://www.processon.com/\n\n显示效果：\n\n我经常去的几个网站Google、processon以及微信读书processon是一个不错的网站。\n\n自动链接语法说明：Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱,只要是用&lt;&gt;包起来, Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：\n代码：\n&lt;https://www.zxzj.me&gt;&lt;https://xmsoushu.com/#/&gt;\n\n\n显示效果：\n\nhttps://www.zxzj.mehttps://xmsoushu.com/#/\n\n锚点网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。\n注意： \n\nMarkdown Extra 只支持在标题后插入锚点，其它地方无效。 \nLeanote 编辑器右侧显示效果区域暂时不支持锚点跳转，所以点来点去发现没有跳转不必惊慌，但是你发布成笔记或博文后是支持跳转的。\n\n语法描述: 在你准备跳转到的指定标题后插入锚点标记&#123;#标记&#125;，然后在文档的其它地方写上连接到锚点的链接。\n代码：\n跳转到[目录]&#123;#index&#125;跳转到[目录](#index)\n\n\n&#123;#属于hexo保留的关键字，生成时有bug，这里不做展示\n\n显示效果：\n跳转到目录\n列表无序列表  使用 *，+，- 表示无序列表。\n代码：\n- 无序列表项 一- 无序列表项 二- 无序列表项 三\n\n\n显示效果：\n\n无序列表项 一无序列表项 二无序列表项 三\n\n有序列表有序列表则使用数字接着一个英文句点。\n代码：\n1. 有序列表项 一2. 有序列表项 二3. 有序列表项 三\n\n显示效果：\n\n\n有序列表项 一\n有序列表项 二\n有序列表项 三\n\n\n定义型列表语法说明：定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进(Tab)\n代码：\nMarkdown:    轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）代码块 2:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）        代码块（左侧有八个不可见的空格）\n\n\n\n列表缩进语法说明：\n列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。\n要让列表看起来更漂亮，你可以把内容用固定的缩进整理好（显示效果与代码一致）：\n\n轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！\n那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。\n\n但是如果你懒，那也行：代码：\n*   轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。    那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。     软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ *   那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。     寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。     但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！     悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。\n\n显示效果：\n\n\n轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。  那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。  软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ \n那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。  寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。  但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！  悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。\n\n\n包含段落的列表语法说明：\n列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符（显示效果与代码一致）：\n\n轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！\n那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！\n悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。\n\n如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：\n代码：\n*   轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。    那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。     软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！     那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。     寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。     但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ *   悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。\n\n显示效果：\n\n\n轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。  那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。  软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！   那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。  寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。  但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ \n  悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。\n\n\n包含引用的列表语法说明：\n如果要在列表项目内放进引用，那 &gt; 就需要缩进：\n代码：\n*   阅读的方法:    &gt; 打开书本。    &gt; 打开电灯。\n\n显示效果：\n\n\n阅读的方法:\n\n\n打开书本。打开电灯。\n\n\n引用语法说明：引用需要在被引用的文本前加上&gt;符号。\n代码：\n&gt;这是一个有两段文字的引用,&gt;无意义的占行文字&gt;无意义的占行文字&gt;&gt;无意义的占行文字&gt;无意义的占行文字\n\n显示效果：\n\n这是一个有两段文字的引用,无意义的占行文字无意义的占行文字\n无意义的占行文字无意义的占行文字\n\nMarkdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：\n代码：\n&gt;这是一个有两段文字的引用,无意义的占行文字无意义的占行文字无意义的占行文字无意义的占行文字\n\n显示效果：\n\n这是一个有两段文字的引用,无意义的占行文字无意义的占行文字无意义的占行文字无意义的占行文字\n\n引用的多层嵌套区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：\n代码：\n&gt;&gt;&gt; 请问 Markdwon 怎么用？ - 小白 &gt;&gt; 自己看教程！ - 愤青&gt; 教程在哪？ - 小白\n\n显示效果：\n\n\n\n请问 Markdwon 怎么用？ - 小白\n\n\n\n\n\n自己看教程！ - 愤青\n\n\n\n教程在哪？ - 小白\n\n引用其它要素引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码行/区块等：\n代码：\n&gt; 1.   这是第一行列表项。&gt; 2.   这是第二行列表项。&gt;&gt; 给出一些例子代码：&gt;&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);\n显示效果：\n\n\n  这是第一行列表项。\n  这是第二行列表项。\n\n给出一些例子代码：\nreturn shell_exec(&quot;echo $input | $markdown_script&quot;);\n\n\n包含代码区块的引用语法说明：如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：\n一列表项包含一个列表区块：\n&lt;代码写在这&gt;\n\n一个特殊情况在特殊情况下，项目列表很可能会不小心产生，像是下面这样的写法：\n1986. What a great season.\n\n会显示成：\n\nWhat a great season.\n\n换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠：\n1986\\. What a great season.\n\n会显示成：\n\n1986. What a great season.\n\n插入图像图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。\n语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。\n行内式语法说明：![图片Alt](图片地址 “图片Title”)\n代码：\n洗澡好酥服啊： ![洗澡好酥服啊](https://tva1.sinaimg.cn/large/008i3skNgy1gw0lb9b9ptj30v70u0gnf.jpg &quot;洗澡好酥服啊&quot;)\n\n显示效果：\n洗澡好酥服啊：\n参考式语法说明：\n在文档要插入图片的地方写![图片Alt][标记]\n在文档的最后写上[标记]:图片地址 “Title”\n代码：\n![强颜微笑.jpg][蚩梦][蚩梦]:https://tva1.sinaimg.cn/large/008i3skNgy1gw0lbaftvxj30wu0u0jtp.jpg  &quot;强颜微笑.jpg&quot;\n\n\n\n显示效果：\n\n\n站长同学太菜啦，网站还展示不了以下的「注脚」，「LaTex公式」「各类图」原生效果，有待添加\n\n内容目录  在段落中填写 [TOC] 以显示全文内容的目录结构。\n注脚  语法说明：\n在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。\n注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。\n代码：\n使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote[^Le] 编辑器进行书写。[^1]:Markdown是一种纯文本标记语言[^2]:HyperText Markup Language 超文本标记语言[^Le]:开源笔记平台，支持Markdown和笔记直接发为博文\n\n效果\n\nLaTeX 公式$ 表示行内公式：代码：\n质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。\n\n显示效果：\n$$表示整行公式：\n代码：\n$$\\sum_&#123;i=1&#125;^n a_i=0$$$$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$$$\\sum^&#123;j-1&#125;_&#123;k=0&#125;&#123;\\widehat&#123;\\gamma&#125;_&#123;kj&#125; z_k&#125;$$\n\n显示效果：\n各类图表代码流程图竖向（TD 表示从上到下）\ngraph TD;    A--&gt;B;    A--&gt;C;    B--&gt;D;    D--&gt;E;    D--&gt;F;\n\n横向（LR 表示从左到右）\ngraph LR;\t\tA[方形]--&gt;B(圆角)\t\tB--&gt;C&#123;条件a&#125;\t\tC--&gt;|a=1|D[结果1]\t\tC--&gt;|a=2|E[结果2]\n\n实际场景：\nsequenceDiagram 客户-&gt;&gt;银行柜台: 我要存钱  银行柜台-&gt;&gt;后台: 改一下这个账户数字哦  后台-&gt;&gt;银行柜台: 账户的数字改完了，明天起息  银行柜台-&gt;&gt;客户: 好了，给你回单 ，下一位\n\nUML时序图sequenceDiagram对象A-&gt;&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;&gt;对象A: 我很好(响应)对象A-&gt;&gt;对象B: 你真的好吗？\n\n\n\n还有甘特图（如下），饼图，类图，状态图等等，不一而足。\ntypora内置mermaid 库，能漂亮画出👆🏻这一坨图\n巨图镇场：\n\n学习用typora画各类图表，点击这个教程视频      \n更多语法参考：流程图语法参考\n表格语法说明：\n不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。代码：\n简单方式写表格：\n学号|姓名|分数-|-|-小明|男|75小红|女|79小陆|男|92\n\n原生方式写表格：\n|学号|姓名|分数||-|-|-||小明|男|75||小红|女|79||小陆|男|92|\n\n为表格第二列指定方向：\n产品|价格-|-:Leanote 高级账号|60元/年Leanote 超级账号|120元/年\n\n显示效果：\n简单方式写表格：\n\n\n\n学号\n姓名\n分数\n\n\n\n小明\n男\n75\n\n\n小红\n女\n79\n\n\n小陆\n男\n92\n\n\n原生方式写表格：\n\n\n\n学号\n姓名\n分数\n\n\n\n小明\n男\n75\n\n\n小红\n女\n79\n\n\n小陆\n男\n92\n\n\n为表格第二列指定方向：\n\n\n\n产品\n价格\n\n\n\nLeanote 高级账号\n60元/年\n\n\nLeanote 超级账号\n120元/年\n\n\n分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n代码：\n* * *********- - ----------------------------------------\n\n显示效果都一样：\n\n\n\n\n\n代码对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(Tab), 另一种是利用”`”符号（一般在ESC键下方）包裹代码。\n\n语法说明：\n插入行内代码，即插入一个单词或者一句代码的情况，使用下面这样的形式插入：\n`code`\n\n插入多行代码，可以使用缩进或者三个单撇号,具体看示例。注意： 缩进式插入前方必须有空行\n行内式代码：\nC语言里的函数 `scanf()` 怎么使用？\n\n显示效果：\n\nC语言里的函数 scanf() 怎么使用？\n\n缩进式多行代码缩进 4 个空格或是 1 个制表符\n一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。\n代码：\n    #include &lt;stdio.h&gt;\n    int main(void)\n    &#123;\n        printf(&quot;Hello world\\n&quot;);\n    &#125;\n\n显示效果：\n\n#include &lt;stdio.h&gt;int main(void)&#123;    printf(&quot;Hello world\\n&quot;);&#125;\n\n\n用六个`包裹多行代码代码：\n```#include &lt;stdio.h&gt;int main(void)&#123;    printf(&quot;Hello world\\n&quot;);&#125;```\n显示效果：\n\n#include &lt;stdio.h&gt;int main(void)&#123;    printf(&quot;Hello world\\n&quot;);&#125;\n\nHTML 原始码在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理，例如：\n代码和效果：\n第一个例子：\n&lt;div class=&quot;footer&quot;&gt;   © 2004 Foo Corporation&lt;/div&gt;\n\n\n\n   © 2004 Foo Corporation\n\n\n第二个例子：\n&lt;table&gt;    &lt;tr&gt;        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;        &lt;th&gt;星期一&lt;/th&gt;        &lt;th&gt;星期二&lt;/th&gt;        &lt;th&gt;星期三&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;李强&lt;/td&gt;        &lt;td&gt;张明&lt;/td&gt;        &lt;td&gt;王平&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;\n\n效果：\n\n    \n        值班人员\n        星期一\n        星期二\n        星期三\n    \n    \n        李强\n        张明\n        王平\n    \n\n\n\n\n\n\n\ntypora常用操作常用快捷键文件\n\n\n操作\n键值\n\n\n\n新建\nCtrl+N\n\n\n新建窗口\nCtrl+Shift+N\n\n\n打开\nCtrl+O\n\n\n快速打开\nCtrl+P\n\n\n重新打开关闭的文件\nCtrl+Shift+T\n\n\n保存\nCtrl+S\n\n\n另存为/复制\nCtrl+Shift+S\n\n\n关闭\nCtrl+W\n\n\n编辑\n==新段落输入输入==换行Shift+Enter剪切Ctrl+X复制Ctrl+C粘贴Ctrl+V复制为标记Ctrl+Shift+C粘贴为纯文本Ctrl+Shift+V全选Ctrl+A==选择行/句子==选择行（在表中）Ctrl+L删除行（表中）Ctrl+Shift+Backspace==选择样式范围==选择单元格（在表中）Ctrl+E选择单词 Ctrl+D删除单词 Ctrl+Shift+D跳转到顶部 Ctrl+Home跳转到所选内容Ctrl+J跳到按钮 Ctrl+End 查找 Ctrl+F查找下一个 F3/输入查找上一个 Shift+F3/Shift+Enter 替换 Ctrl+H\n\n功能\n标题1到6 Ctrl+1/2/3/4/5/6段落 Ctrl+0增加标题级别 Ctrl+=降低标题级别 Ctrl+-表格 Ctrl+T代码块 Ctrl+Shift+K数学块 Ctrl+Shift+M引用 Ctrl+Shift+Q 【可自定义样式】有序列表 Ctrl+Shift+[无序列表 Ctrl+Shift+]缩进 Ctrl+[/Tab升级 Ctrl+]/Shift+Tab加粗 Ctrl+B斜体 Ctrl+I下划线 Ctrl+U代码 Ctrl+Shift+删除线 Alt+Shift+5超链接 Ctrl+K图像 Ctrl+Shift+I清除格式 Ctrl+\\\n\n视图\n切换侧栏 Ctrl+Shift+L大纲 Ctrl+Shift+1文章 Ctrl+Shift+2文件树 Ctrl+Shift+3源代码模式 Ctrl+/对焦模式 F8打字机模式 F9切换器全屏 F11实际大小 Ctrl+Shift+0放大 Ctrl+Shift+=缩小 Ctrl+Shift+-在打开的文档之间切换 Ctrl+Tab切换开发工具 Ctrl+Shift+I\n\nWin和Mac系统键位对照\n\n\n\n未尽之处，有待更新…\n本文参考：\n文章一      \n文章二\n文章三\n友情链接：\n下载学习typora(Win&amp;Mac)，请自行前往：typora官网](https://typora.io/)\n想了解更多关于GFM的知识，请参考：GitHub Flavored Markdown Docs\n","categories":["技术","笔记"],"tags":["Markdown","typora","Note-taking"]},{"title":"MySQL语法第二弹","url":"/2021/11/05/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%BA%8C%E5%BC%B9/","content":"\n根据老杜MySQL教学视频整理\n\n1、关于查询结果集的去重?mysql&gt; select distinct job from emp; // distinct关键字去除重复记录。+-----------+| job       |+-----------+| CLERK     || SALESMAN  || MANAGER   || ANALYST   || PRESIDENT |+-----------+\n\nmysql&gt; select ename,distinct job from emp; \n以上的sql语句是错误的。 记住:\ndistinct只能出现在所有字段的最前面。\nmysql&gt; select distinct deptno,job from emp;+--------+-----------+| deptno | job       |+--------+-----------+|     20 | CLERK     ||     30 | SALESMAN  ||     20 | MANAGER   ||     30 | MANAGER   ||     10 | MANAGER   ||     20 | ANALYST   ||     10 | PRESIDENT ||     30 | CLERK     ||     10 | CLERK     |+--------+-----------+\n   案例:统计岗位的数量?\nselect count(distinct job) from emp;\n  +---------------------+| count(distinct job) |+---------------------+ |5                    |+---------------------+\n2、连接查询2.1、什么是连接查询?在实际开发中，大部分的情况下都不是从单表中查询数据，一般都是多张表联合查询取出最终的结果。在实际开发中，一般一个业务都会对应多张表，比如:学生和班级，起码两张表。学生和班级信息存储到一张表中，结果就像上面一样，数据会存在大量的重复，导致数据的冗余。\n2.2、连接查询的分类?根据语法出现的年代来划分的话，包括:\n\nSQL92(一些老的DBA可能还在使用这种语法。DBA:DataBase Administrator，数据库管理员)\n\nSQL99(比较新的语法)\n\n\n 根据表的连接方式来划分，包括:\n\n内连接:\n\n等值连接\n非等值连接\n自连接\n\n\n外连接:\n\n左外连接(左连接)\n\n右外连接(右连接)\n\n\n\n\n3 .全连接(这个不讲，很少用!)\n2.3、笛卡尔积现象(笛卡尔乘积现象)笛卡尔积现象:当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询结果条数是两张表记录条数的乘积。\n关于表的别名:select e.ename,d.dname from emp e,dept d;\n表的别名有什么好处?\n\n第一:执行效率高。\n第二:可读性好。\n\n2.4、怎么避免笛卡尔积现象?当然是加条件进行过滤。\n 思考:避免了笛卡尔积现象，会减少记录的匹配次数吗?\n不会，次数还是56次。只不过显示的是有效记录。\n案例:找出每一个员工的部⻔名称，要求显示员工名和部⻔名。\nselect                 e.ename,d.dnamefrom where                  emp e , dept d\n\ne.deptno = d.deptno; //SQL92，以后不用。\n+--------+------------+| ename  | dname      |+--------+------------+| CLARK  | ACCOUNTING || KING   | ACCOUNTING || MILLER | ACCOUNTING || SMITH  | RESEARCH   || JONES  | RESEARCH   || SCOTT  | RESEARCH   || ADAMS  | RESEARCH   || FORD   | RESEARCH   || ALLEN  | SALES      || WARD   | SALES      || MARTIN | SALES      || BLAKE  | SALES      || TURNER | SALES      || JAMES  | SALES      |+--------+------------+\n\n2.5、内连接之等值连接最大特点是:条件是等量关系。\n案例:查询每个员工的部⻔名称，要求显示员工名和部⻔名。\nSQL92:(太老，不用了) \nselect \te.ename,d.dnamefrom\temp e, dept dwhere\te.deptno = d.deptno;\n\nSQL99:(常用的) \nselect \te.ename,d.dnamefrom\temp ejoin\tdept don\te.deptno = d.deptno;\n\n// inner可以省略的，带着inner目的是可读性好一些。select \te.ename,d.dnamefrom\temp einner join\tdept don\te.deptno = d.deptno;\n\n语法：\n...\tAjoin\tBon\t连接条件where\t...\n\n\n\nSQL99语法结构更清晰一些:表的连接条件和后来的where条件分离了。\n+--------+------------+| ename  | dname      |+--------+------------+| CLARK  | ACCOUNTING || KING   | ACCOUNTING || MILLER | ACCOUNTING || SMITH  | RESEARCH   || JONES  | RESEARCH   || SCOTT  | RESEARCH   || ADAMS  | RESEARCH   || FORD   | RESEARCH   || ALLEN  | SALES      || WARD   | SALES      || MARTIN | SALES      || BLAKE  | SALES      || TURNER | SALES      || JAMES  | SALES      |+--------+------------+\n\n2.6、内连接之非等值连接最大的特点是:连接条件中的关系是非等量关系。\n案例:找出每个员工的工资等级，要求显示员工名、工资、工资等级。\nmysql&gt; select ename,sal from emp; e\n+--------+---------+|ename |sal        | +--------+---------+| SMITH  |  800.00 || ALLEN  | 1600.00 || WARD   | 1250.00 || JONES  | 2975.00 || MARTIN | 1250.00 || BLAKE  | 2850.00 || CLARK  | 2450.00 || SCOTT  | 3000.00 || KING   | 5000.00 || TURNER | 1500.00 || ADAMS  | 1100.00 || JAMES  |  950.00 || FORD   | 3000.00 || MILLER | 1300.00 |+--------+---------+\n\nmysql&gt; select * from salgrade; s\n+-------+-------+-------+| GRADE | LOSAL | HISAL |+-------+-------+-------+| 1     |    700|   1200|| 2     |   1201|   1400|| 3     |   1401|   2000|| 4     |   2001|   3000|| 5     |   3001|   9999|+-------+-------+-------+\n\nselect \te.ename,e.sal,s.gradefrom\temp ejoin\tsalgrade son\te.sal between s.losal and s.hisal;\n\n// inner可以省略select \te.ename,e.sal,s.gradefrom\temp einner join\tsalgrade son\te.sal between s.losal and s.hisal;\n\n+--------+---------+-------+| ename  | sal     | grade |+--------+---------+-------+| SMITH  |  800.00 |     1 || ALLEN  | 1600.00 |     3 || WARD   | 1250.00 |     2 || JONES  | 2975.00 |     4 || MARTIN | 1250.00 |     2 || BLAKE  | 2850.00 |     4 || CLARK  | 2450.00 |     4 || SCOTT  | 3000.00 |     4 || KING   | 5000.00 |     5 || TURNER | 1500.00 |     3 || ADAMS  | 1100.00 |     1 || JAMES  |  950.00 |     1 || FORD   | 3000.00 |     4 || MILLER | 1300.00 |     2 |+--------+---------+-------+\n\n\n\n2.7、自连接最大的特点是:一张表看做两张表。自己连接自己。\n案例:找出每个员工的上级领导，要求显示员工名和对应的领导名。\n\nmysql&gt; select empno,ename,mgr from emp; \nemp a 员工表\n+-------+--------+------+| empno | ename  | mgr  |+-------+--------+------+|  7369 | SMITH  | 7902 ||  7499 | ALLEN  | 7698 ||  7521 | WARD   | 7698 ||  7566 | JONES  | 7839 ||  7654 | MARTIN | 7698 ||  7698 | BLAKE  | 7839 ||  7782 | CLARK  | 7839 ||  7788 | SCOTT  | 7566 ||  7839 | KING   | NULL ||  7844 | TURNER | 7698 ||  7876 | ADAMS  | 7788 ||  7900 | JAMES  | 7698 ||  7902 | FORD   | 7566 ||  7934 | MILLER | 7782 |+-------+--------+------+\n\nemp b 领导表 \n+-------+--------+| empno | ename  |+-------+--------+|  7566 | JONES  ||  7698 | BLAKE  ||  7782 | CLARK  ||  7788 | SCOTT  ||  7839 | KING   ||  7902 | FORD   |+-------+--------+\n\n员工的领导编号 = 领导的员工编号 select\nselect \ta.ename as &#x27;员工名&#x27;,b.ename as &#x27;领导名&#x27;from\temp ainner join\temp bon\ta.mgr = b.empno;\n\n+--------+--------+| 员工名  | 领导名  |+--------+--------+| SMITH  | FORD   || ALLEN  | BLAKE  || WARD   | BLAKE  || JONES  | KING   || MARTIN | BLAKE  || BLAKE  | KING   || CLARK  | KING   || SCOTT  | JONES  || TURNER | BLAKE  || ADAMS  | SCOTT  || JAMES  | BLAKE  || FORD   | JONES  || MILLER | CLARK  |+--------+--------+\n\n2.8、外连接什么是外连接，和内连接有什么区别?\n\n内连接:\n\n假设A和B表进行连接，使用内连接的话，凡是A表和B表能够匹配上的 记录查询出来，这就是内连接。\nAB两张表没有主副之分，两张表是平等的。 \n\n外连接:\n\n假设A和B表进行连接，使用外连接的话，AB两张表中有一张表是主 表，一张表是副表，主要查询主表中\n的数据，捎带着查询副表，当副表中的数据没有和主表中的数据匹配 上，副表自动模拟出NULL与之匹配。\n外连接的分类?\n\n左外连接(左连接):表示左边的这张表是主表。\n(右连接):表示右边的这张表是主表。\n左连接有右连接的写法，右连接也会有对应的左连接的写法。\n\n案例:找出每个员工的上级领导?(所有员工必须全部查询出来)\nemp a 员工表 \n+-------+--------+------+| empno | ename  | mgr  |+-------+--------+------+|  7369 | SMITH  | 7902 ||  7499 | ALLEN  | 7698 ||  7521 | WARD   | 7698 ||  7566 | JONES  | 7839 ||  7654 | MARTIN | 7698 ||  7698 | BLAKE  | 7839 ||  7782 | CLARK  | 7839 ||  7788 | SCOTT  | 7566 ||  7839 | KING   | NULL ||  7844 | TURNER | 7698 ||  7876 | ADAMS  | 7788 ||  7900 | JAMES  | 7698 ||  7902 | FORD   | 7566 ||  7934 | MILLER | 7782 |+-------+--------+------+\n\nemp b 领导表 \n+-------+--------+| empno | ename  |+-------+--------+|  7566 | JONES  ||  7698 | BLAKE  ||  7782 | CLARK  ||  7788 | SCOTT  ||  7839 | KING   ||  7902 | FORD   |+-------+--------+\n\n内连接:\nselect \ta.ename &#x27;员工&#x27;, b.ename &#x27;领导&#x27;from\temp ajoin\temp bon\ta.mgr = b.empno;\n\n外连接:(左外连接/左连接) \nselect \ta.ename &#x27;员工&#x27;, b.ename &#x27;领导&#x27;from\temp aleft join\temp bon\ta.mgr = b.empno;\n\n// outer是可以省略的。select \ta.ename &#x27;员工&#x27;, b.ename &#x27;领导&#x27;from\temp aleft outer join\temp bon\ta.mgr = b.empno;\n\n外连接:(右外连接/右连接) \nselect \ta.ename &#x27;员工&#x27;, b.ename &#x27;领导&#x27;from\temp bright join\temp aon\ta.mgr = b.empno;\n\n// outer可以省略。select \ta.ename &#x27;员工&#x27;, b.ename &#x27;领导&#x27;from\temp bright outer join\temp aon\ta.mgr = b.empno;\n\n+--------+-------+| 员工    | 领导  |+--------+-------+| SMITH  | FORD  || ALLEN  | BLAKE || WARD   | BLAKE || JONES  | KING  || MARTIN | BLAKE || BLAKE  | KING  || CLARK  | KING  || SCOTT  | JONES || KING   | NULL  || TURNER | BLAKE || ADAMS  | SCOTT || JAMES  | BLAKE || FORD   | JONES || MILLER | CLARK |+--------+-------+\n\n外连接最重要的特点是：主表的数据无条件的全部查询出来。\n案例:找出哪个部⻔没有员工? \nEMP表:\n+-------+--------+-----------+------+------------+---------+---------+--------+| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |+-------+--------+-----------+------+------------+---------+---------+--------+|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 ||  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 ||  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 ||  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 ||  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 ||  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 ||  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 ||  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 ||  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 ||  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 ||  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 ||  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 ||  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 ||  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |+-------+--------+-----------+------+------------+---------+---------+--------+\n\nDEPT表:\n+--------+------------+----------+| DEPTNO | DNAME      | LOC      |+--------+------------+----------+|     10 | ACCOUNTING | NEW YORK ||     20 | RESEARCH   | DALLAS   ||     30 | SALES      | CHICAGO  ||     40 | OPERATIONS | BOSTON   |+--------+------------+----------+\n\n代码：\nselect \td.*from\temp eright join\tdept don\te.deptno = d.deptnowhere\te.empno is null;\n\n+--------+------------+--------+| DEPTNO | DNAME      | LOC    |+--------+------------+--------+|     40 | OPERATIONS | BOSTON |+--------+------------+--------+\n\n2.9、三张表怎么连接查询?案例:找出每一个员工的部⻔名称以及工资等级。\nEMP e:\n+-------+--------+---------+--------+| empno | ename  | sal     | deptno |+-------+--------+---------+--------+|  7369 | SMITH  |  800.00 |     20 ||  7499 | ALLEN  | 1600.00 |     30 ||  7521 | WARD   | 1250.00 |     30 ||  7566 | JONES  | 2975.00 |     20 ||  7654 | MARTIN | 1250.00 |     30 ||  7698 | BLAKE  | 2850.00 |     30 ||  7782 | CLARK  | 2450.00 |     10 ||  7788 | SCOTT  | 3000.00 |     20 ||  7839 | KING   | 5000.00 |     10 ||  7844 | TURNER | 1500.00 |     30 ||  7876 | ADAMS  | 1100.00 |     20 ||  7900 | JAMES  |  950.00 |     30 ||  7902 | FORD   | 3000.00 |     20 ||  7934 | MILLER | 1300.00 |     10 |+-------+--------+---------+--------+\n\nDEPT d:\n+--------+------------+----------+| DEPTNO | DNAME      | LOC      |+--------+------------+----------+|     10 | ACCOUNTING | NEW YORK ||     20 | RESEARCH   | DALLAS   ||     30 | SALES      | CHICAGO  ||     40 | OPERATIONS | BOSTON   |+--------+------------+----------+\n\nSALGRADE s:\n+-------+-------+-------+| GRADE | LOSAL | HISAL |+-------+-------+-------+|     1 |   700 |  1200 ||     2 |  1201 |  1400 ||     3 |  1401 |  2000 ||     4 |  2001 |  3000 ||     5 |  3001 |  9999 |+-------+-------+-------+\n\n\n注意，解释一下：\n....\tAjoin\tBjoin\tCon\t...\n\n表示：A表和B表先进行表连接，连接之后A表继续和C表进行连接。\n\n代码：\nselect \te.ename,d.dname,s.gradefrom\temp ejoin\tdept don\te.deptno = d.deptnojoin\tsalgrade son\te.sal between s.losal and s.hisal;\n\n结果：\n+--------+------------+-------+| ename  | dname      | grade |+--------+------------+-------+| SMITH  | RESEARCH   |     1 || ALLEN  | SALES      |     3 || WARD   | SALES      |     2 || JONES  | RESEARCH   |     4 || MARTIN | SALES      |     2 || BLAKE  | SALES      |     4 || CLARK  | ACCOUNTING |     4 || SCOTT  | RESEARCH   |     4 || KING   | ACCOUNTING |     5 || TURNER | SALES      |     3 || ADAMS  | RESEARCH   |     1 || JAMES  | SALES      |     1 || FORD   | RESEARCH   |     4 || MILLER | ACCOUNTING |     2 |+--------+------------+-------+\n\n案例：找出每一个员工的部门名称、工资等级、以及上级领导。\n代码：\nselect \te.ename &#x27;员工&#x27;,d.dname,s.grade,e1.ename &#x27;领导&#x27;from\temp ejoin\tdept don\te.deptno = d.deptnojoin\tsalgrade son\te.sal between s.losal and s.hisalleft join\temp e1on\te.mgr = e1.empno;\n\n结果：\n+--------+------------+-------+-------+| 员工    | dname      | grade | 领导  |+--------+------------+-------+-------+| SMITH  | RESEARCH   |     1 | FORD  || ALLEN  | SALES      |     3 | BLAKE || WARD   | SALES      |     2 | BLAKE || JONES  | RESEARCH   |     4 | KING  || MARTIN | SALES      |     2 | BLAKE || BLAKE  | SALES      |     4 | KING  || CLARK  | ACCOUNTING |     4 | KING  || SCOTT  | RESEARCH   |     4 | JONES || KING   | ACCOUNTING |     5 | NULL  || TURNER | SALES      |     3 | BLAKE || ADAMS  | RESEARCH   |     1 | SCOTT || JAMES  | SALES      |     1 | BLAKE || FORD   | RESEARCH   |     4 | JONES || MILLER | ACCOUNTING |     2 | CLARK |+--------+------------+-------+-------+\n\n3、子查询3.1、什么是子查询? select语句当中嵌套select语句，被嵌套的select语句是子查询。 \n子查询都可以出现在哪里?\nselect\t..(select).from\t..(select).where\t..(select).\n\n3.2、where子句中使用子查询案例:找出高于平均薪资的员工信息。select * from emp where sal &gt; avg(sal); //错误的写法，where后面不能直接使用分组函数。\n第一步:找出平均薪资  select avg(sal) from emp;\n+-------------+| avg(sal)    |+-------------+| 2073.214286 |+-------------+\n\n 第二步:where过滤  select * from emp where sal &gt; 2073.214286;\n+-------+-------+-----------+------+------------+---------+------+--------+| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |+-------+-------+-----------+------+------------+---------+------+--------+|  7566 | JONES | MANAGER   | 7839 | 1981-04-02 | 2975.00 | NULL |     20 ||  7698 | BLAKE | MANAGER   | 7839 | 1981-05-01 | 2850.00 | NULL |     30 ||  7782 | CLARK | MANAGER   | 7839 | 1981-06-09 | 2450.00 | NULL |     10 ||  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 | NULL |     20 ||  7839 | KING  | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL |     10 ||  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 | NULL |     20 |+-------+-------+-----------+------+------------+---------+------+--------+\n\n第一步和第二步合并  select * from emp where sal &gt; (select avg(sal) from emp);\n3.3、from后面嵌套子查询案例:找出每个部⻔平均薪水的等级。 \n第一步:找出每个部⻔平均薪水(按照部⻔编号分组，求sal的平均值)\nselect deptno,avg(sal) as avgsal from emp group by deptno;\n+--------+-------------+| deptno | avgsal      |+--------+-------------+|     10 | 2916.666667 ||     20 | 2175.000000 ||     30 | 1566.666667 |+--------+-------------+\n\n第二步：将以上的查询结果当做临时表t，让t表和salgrade s表连接，条件是：\nt.avgsal between s.losal and s.hisal\nselect \tt.*,s.gradefrom\t(select deptno,avg(sal) as avgsal from emp group by deptno) tjoin\tsalgrade son\tt.avgsal between s.losal and s.hisal;\n\n+--------+-------------+-------+| deptno | avgsal      | grade |+--------+-------------+-------+|     30 | 1566.666667 |     3 ||     10 | 2916.666667 |     4 ||     20 | 2175.000000 |     4 |+--------+-------------+-------+\n\n案例：找出每个部门平均的薪水等级。第一步：找出每个员工的薪水等级。\nselect e.ename,e.sal,e.deptno,s.grade from emp e join salgrade s on e.sal between s.losal and s.hisal;\n+--------+---------+--------+-------+| ename  | sal     | deptno | grade |+--------+---------+--------+-------+| SMITH  |  800.00 |     20 |     1 || ALLEN  | 1600.00 |     30 |     3 || WARD   | 1250.00 |     30 |     2 || JONES  | 2975.00 |     20 |     4 || MARTIN | 1250.00 |     30 |     2 || BLAKE  | 2850.00 |     30 |     4 || CLARK  | 2450.00 |     10 |     4 || SCOTT  | 3000.00 |     20 |     4 || KING   | 5000.00 |     10 |     5 || TURNER | 1500.00 |     30 |     3 || ADAMS  | 1100.00 |     20 |     1 || JAMES  |  950.00 |     30 |     1 || FORD   | 3000.00 |     20 |     4 || MILLER | 1300.00 |     10 |     2 |+--------+---------+--------+-------+\n\n第二步：基于以上结果，继续按照deptno分组，求grade平均值。\nselect \te.deptno,avg(s.grade)from \temp e join \tsalgrade s on \te.sal between s.losal and s.hisalgroup by\te.deptno;\n\n+--------+--------------+| deptno | avg(s.grade) |+--------+--------------+|     10 |       3.6667 ||     20 |       2.8000 ||     30 |       2.5000 |+--------+--------------+\n\n3.4、在select后面嵌套子查询。 案例:找出每个员工所在的部⻔名称，要求显示员工名和部⻔名。\nselect \te.ename,d.dnamefrom\temp ejoin\tdept don\te.deptno = d.deptno;\n\nselect \te.ename,(select d.dname from dept d where e.deptno = d.deptno) as dname from \temp e;\n\n+--------+------------+| ename  | dname      |+--------+------------+| SMITH  | RESEARCH   || ALLEN  | SALES      || WARD   | SALES      || JONES  | RESEARCH   || MARTIN | SALES      || BLAKE  | SALES      || CLARK  | ACCOUNTING || SCOTT  | RESEARCH   || KING   | ACCOUNTING || TURNER | SALES      || ADAMS  | RESEARCH   || JAMES  | SALES      || FORD   | RESEARCH   || MILLER | ACCOUNTING |+--------+------------+\n\n4、union (可以将查询结果集相加)案例:找出工作岗位是SALESMAN和MANAGER的员工? 第一种:select ename,job from emp where job = &#39;MANAGER&#39; or job = &#39;SALESMAN&#39;; 第二种:select ename,job from emp where job in(&#39;MANAGER&#39;,&#39;SALESMAN&#39;); \n+--------+----------+| ename  | job      |+--------+----------+| ALLEN  | SALESMAN || WARD   | SALESMAN || JONES  | MANAGER  || MARTIN | SALESMAN || BLAKE  | MANAGER  || CLARK  | MANAGER  || TURNER | SALESMAN |+--------+----------+\n\n 第三种:union\nselect ename,job from emp where job = &#x27;MANAGER&#x27;unionselect ename,job from emp where job = &#x27;SALESMAN&#x27;;\n\n+--------+----------+| ename  | job      |+--------+----------+| JONES  | MANAGER  || BLAKE  | MANAGER  || CLARK  | MANAGER  || ALLEN  | SALESMAN || WARD   | SALESMAN || MARTIN | SALESMAN || TURNER | SALESMAN |+--------+----------+\n\n两张不相干的表中的数据拼接在一起显示?\nselect ename from empunionselect dname from dept;\n\n+------------+| ename      |+------------+| SMITH      || ALLEN      || WARD       || JONES      || MARTIN     || BLAKE      || CLARK      || SCOTT      || KING       || TURNER     || ADAMS      || JAMES      || FORD       || MILLER     || ACCOUNTING || RESEARCH   || SALES      || OPERATIONS |+------------+\n\nmysql&gt; select ename,sal from emp    -&gt; union    -&gt; select dname from dept;ERROR 1222 (21000): The used SELECT statements have a differentnumber of columns\n\n5、limit\n(重点中的重点，以后分⻚查询全靠它了)\n\n\nlimit是mysql特有的，其他数据库中没有，不通用。(Oracle中有一个相同的机制，叫做rownum)\nlimit取结果集中的部分数据，这是它的作用。\n\n语法机制:\nlimit startIndex, length//startIndex表示起始位置，从0开始，0表示第一条数据。 length表示取几个\n\n案例:取出工资前5名的员工(思路:降序取前5个) select ename,sal from emp order by sal desc; \n取前5个:\nselect ename,sal from emp order by sal desc limit 0, 5;select ename,sal from emp order by sal desc limit 5;\n\nlimit是sql语句最后执行的一个环节:\nselect\t\t5\t...from\t\t\t1\t...\t\twhere\t\t\t2\t...\tgroup by\t\t3\t...having\t\t4\t...order by\t\t6\t...limit\t\t\t7\t...;\n\n案例:找出工资排名在第4到第9名的员工?select ename,sal from emp order by sal desc limit 3,6;\n+--------+---------+| ename  | sal     |+--------+---------+| JONES  | 2975.00 || BLAKE  | 2850.00 || CLARK  | 2450.00 || ALLEN  | 1600.00 || TURNER | 1500.00 || MILLER | 1300.00 |+--------+---------+\n\n通用的标准分⻚sql?\n每页显示3条记录：第1页：0, 3第2页：3, 3第3页：6, 3第4页：9, 3第5页：12, 3每页显示pageSize条记录：第pageNo页：(pageNo - 1) * pageSize, pageSize\n\npageSize是什么？是每页显示多少条记录pageNo是什么？显示第几页\njava代码\n&#123;\tint pageNo = 2; // 页码是2\tint pageSize = 10; // 每页显示10条\t\tlimit (pageNo - 1) * pageSize, pageSize&#125;\n\n6、创建表:建表语句的语法格式:create table 表名(\t\t\t字段名1 数据类型,\t\t\t字段名2 数据类型,\t\t\t字段名3 数据类型,\t\t\t....\t\t);\n\n关于MySQL当中字段的数据类型？(常见的)int\t\t整数型(java中的int)bigint\t长整型(java中的long)float\t\t浮点型(java中的float double)char\t\t定长字符串(String)varchar\t可变长字符串(StringBuffer/StringBuilder)date\t\t日期类型 （对应Java中的java.sql.Date类型）BLOB\t\t二进制大对象（存储图片、视频等流媒体信息） Binary Large OBject （对应java中的Object）CLOB\t\t字符大对象（存储较大文本，比如，可以存储4G的字符串。） Character Large OBject（对应java中的Object）......\n\nchar和varchar怎么选择？​        在实际的开发中，当某个字段中的数据长度不发生改变的时候，是定长的，例如：性别、生日等都是采用char。​        当一个字段的数据长度不确定，例如：简介、姓名等都是采用varchar。\nBLOB和CLOB类型的使用？\n电影表: t_movie\t\tid(int)\tname(varchar)\t\tplaytime(date/char)\t\thaibao(BLOB)\t\thistory(CLOB)\t\t----------------------------------------------------------------------------------------\t\t1\t\t\t蜘蛛侠\t\t\t2\t\t3\n\n表名在数据库当中一般建议以：t_或者tbl_开始。\n创建学生表：\n学生信息包括：\t学号、姓名、性别、班级编号、生日\t学号：bigint\t姓名：varchar\t性别：char\t班级编号：int\t生日：char\n\ncreate table t_student(\tno bigint,\tname varchar(255),\tsex char(1),\tclassno varchar(255),\tbirth char(10));\n\n7、insert语句插入数据语法格式:\ninsert into 表名(字段名1,字段名2,字段名3,....) values(值1,值2,值3,....)\n要求:字段的数量和值的数量相同，并且数据类型要对应相同。\ninsert into t_student(no,name,sex,classno,birth) values(1,&#x27;zhangsan&#x27;,&#x27;1&#x27;,&#x27;gaosan1ban&#x27;);\tERROR 1136 (21S01): Column count doesn&#x27;t match value count at row 1\tinsert into t_student(no,name,sex,classno,birth) values(1,&#x27;zhangsan&#x27;,&#x27;1&#x27;,&#x27;gaosan1ban&#x27;, &#x27;1950-10-12&#x27;);\tmysql&gt; select * from t_student;\n\n结果：\n+------+----------+------+------------+------------+| no   | name     | sex  | classno    | birth      |+------+----------+------+------------+------------+|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |+------+----------+------+------------+------------+\n\ninsert into t_student(name,sex,classno,birth,no) values(&#x27;lisi&#x27;,&#x27;1&#x27;,&#x27;gaosan1ban&#x27;, &#x27;1950-10-12&#x27;,2);\tmysql&gt; select * from t_student;\n\n+------+----------+------+------------+------------+| no   | name     | sex  | classno    | birth      |+------+----------+------+------------+------------+|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 ||    2 | lisi     | 1    | gaosan1ban | 1950-10-12 |+------+----------+------+------------+------------+\n\ninsert into t_student(name) values(&#x27;wangwu&#x27;); // 除name字段之外，剩下的所有字段自动插入NULL。mysql&gt; select * from t_student;\n\n+------+----------+------+------------+------------+| no   | name     | sex  | classno    | birth      |+------+----------+------+------------+------------+|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 ||    2 | lisi     | 1    | gaosan1ban | 1950-10-12 || NULL | wangwu   | NULL | NULL       | NULL       |+------+----------+------+------------+------------+\n\ninsert into t_student(no) values(3); mysql&gt; select * from t_student;\n\n+------+----------+------+------------+------------+| no   | name     | sex  | classno    | birth      |+------+----------+------+------------+------------+|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 ||    2 | lisi     | 1    | gaosan1ban | 1950-10-12 || NULL | wangwu   | NULL | NULL       | NULL       ||    3 | NULL     | NULL | NULL       | NULL       |+------+----------+------+------------+------------+\n\ndrop table if exists t_student; // 当这个表存在的话删除。create table t_student(\tno bigint,\tname varchar(255),\tsex char(1) default 1,\tclassno varchar(255),\tbirth char(10));insert into t_student(name) values(&#x27;zhangsan&#x27;);mysql&gt; select * from t_student;\n\n+------+----------+------+---------+-------+| no   | name     | sex  | classno | birth |+------+----------+------+---------+-------+| NULL | zhangsan | 1    | NULL    | NULL  |+------+----------+------+---------+-------+\n\n\n需要注意的地方：        当一条insert语句执行成功之后，表格当中必然会多一行记录。        即使多的这一行记录当中某些字段是NULL，后期也没有办法在执行        insert语句插入数据了，只能使用update进行更新。\n\n// 字段可以省略不写，但是后面的value对数量和顺序都有要求。\tinsert into t_student values(1,&#x27;jack&#x27;,&#x27;0&#x27;,&#x27;gaosan2ban&#x27;,&#x27;1986-10-23&#x27;);\tmysql&gt; select * from t_student;\n\n+------+----------+------+------------+------------+| no   | name     | sex  | classno    | birth      |+------+----------+------+------------+------------+| NULL | zhangsan | 1    | NULL       | NULL       ||    1 | jack     | 0    | gaosan2ban | 1986-10-23 |+------+----------+------+------------+------------+\n\ninsert into t_student values(1,&#x27;jack&#x27;,&#x27;0&#x27;,&#x27;gaosan2ban&#x27;);ERROR 1136 (21S01): Column count doesn&#x27;t match value count at row 1// 一次插入多行数据insert into t_student\t(no,name,sex,classno,birth) values\t(3,&#x27;rose&#x27;,&#x27;1&#x27;,&#x27;gaosi2ban&#x27;,&#x27;1952-12-14&#x27;),(4,&#x27;laotie&#x27;,&#x27;1&#x27;,&#x27;gaosi2ban&#x27;,&#x27;1955-12-14&#x27;);mysql&gt; select * from t_student;\n\n+------+----------+------+------------+------------+| no   | name     | sex  | classno    | birth      |+------+----------+------+------------+------------+| NULL | zhangsan | 1    | NULL       | NULL       ||    1 | jack     | 0    | gaosan2ban | 1986-10-23 ||    3 | rose     | 1    | gaosi2ban  | 1952-12-14 ||    4 | laotie   | 1    | gaosi2ban  | 1955-12-14 |+------+----------+------+------------+------------+\n\n8、表的复制语法:\ncreate table 表名 as select语句;将查询结果当做表创建出来。\n\n9、将查询结果插入到一张表中?mysql&gt; insert into dept1 select * from dept;mysql&gt; select * from dept1;\n\n+--------+------------+----------+| DEPTNO | DNAME      | LOC      |+--------+------------+----------+|     10 | ACCOUNTING | NEW YORK ||     20 | RESEARCH   | DALLAS   ||     30 | SALES      | CHICAGO  ||     40 | OPERATIONS | BOSTON   ||     10 | ACCOUNTING | NEW YORK ||     20 | RESEARCH   | DALLAS   ||     30 | SALES      | CHICAGO  ||     40 | OPERATIONS | BOSTON   |+--------+------------+----------+\n\n10、修改数据:update语法格式:\nupdate 表名 set 字段名1=值1,字段名2=值2... where 条件;\n\n注意：没有条件整张表数据全部更新。\n\n案例：将部门10的LOC修改为SHANGHAI，将部门名称修改为RENSHIBU\nupdate dept1 set loc = &#x27;SHANGHAI&#x27;, dname = &#x27;RENSHIBU&#x27; where deptno = 10;\tmysql&gt; select * from dept1;\n\n+--------+------------+----------+| DEPTNO | DNAME      | LOC      |+--------+------------+----------+|     10 | RENSHIBU   | SHANGHAI ||     20 | RESEARCH   | DALLAS   ||     30 | SALES      | CHICAGO  ||     40 | OPERATIONS | BOSTON   ||     10 | RENSHIBU   | SHANGHAI ||     20 | RESEARCH   | DALLAS   ||     30 | SALES      | CHICAGO  ||     40 | OPERATIONS | BOSTON   |+--------+------------+----------+\n\n更新所有记录\nupdate dept1 set loc = &#x27;x&#x27;, dname = &#x27;y&#x27;;mysql&gt; select * from dept1;\n\n+--------+-------+------+| DEPTNO | DNAME | LOC  |+--------+-------+------+|     10 | y     | x    ||     20 | y     | x    ||     30 | y     | x    ||     40 | y     | x    ||     10 | y     | x    ||     20 | y     | x    ||     30 | y     | x    ||     40 | y     | x    |+--------+-------+------+\n\n11、删除数据? 语法格式:\ndelete from 表名 where 条件;\n\n注意：没有条件全部删除。\n\n//删除10部门数据？\tdelete from dept1 where deptno = 10;//删除所有记录？\tdelete from dept1;//怎么删除大表中的数据？（重点）\ttruncate table 表名; // 表被截断，不可回滚。永久丢失。//删除表？\tdrop table 表名; // 这个通用。\tdrop table if exists 表名; // oracle不支持这种写法。\n\n12、表结构的修改关于表的修改，大家使用工具完成即可，因为在实际开发中表一旦 设计好之后，对表结构的修改是很少的，修改表结构就是对之前的设计进行了否定，即使 需要修改表结构，我们也可以直接使用工具操作。修改表结构的语句不会出现在Java代码当 中。出现在java代码当中的sql包括:insert delete update select(这些都是表中的数据操作)。\n增删改查有一个术语:CRUD操作 Create(增) Retrieve(检索) Update(修改) Delete(删除)\n13、约束(Constraint)13.1、什么是约束?常⻅的约束有哪些呢?在创建表的时候，可以给表的字段添加相应的约束，添加约束的目的是为了保证表中数据的合法性、有效性、完整性。\n常⻅的约束有哪些呢?\n\n非空约束(not null):约束的字段不能为NULL\n唯一约束(unique):约束的字段不能重复\n主键约束(primary key):约束的字段既不能为NULL，也不能重复(简称PK) \n外键约束(foreign key):…(简称FK)\n检查约束(check):注意Oracle数据库有check约束，但是mysql没有，目前mysql不支持该约束。\n\n13.2、非空约束 not nulldrop table if exists t_user;create table t_user(\tid int,\tusername varchar(255) not null,\tpassword varchar(255));insert into t_user(id,password) values(1,&#x27;123&#x27;);ERROR 1364 (HY000): Field &#x27;username&#x27; doesn&#x27;t have a default valueinsert into t_user(id,username,password) values(1,&#x27;lisi&#x27;,&#x27;123&#x27;);\n\n","categories":["技术","笔记"],"tags":["MySQL","数据库","SQL"]},{"title":"Hexo语法","url":"/2021/10/31/hello-world/","content":"Welcome to Nico’zone! This is my very first post. If you get any problems when reading ,  you can ask me on  the Comments area or contact me through the email on the home page.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","categories":["技术","博客"],"tags":["hexo","terminal","git"]},{"title":"Win-Mac快捷键对照表","url":"/2021/11/03/Win-Mac%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%AF%B9%E7%85%A7%E8%A1%A8/","content":"Mac 键盘符号说明\n⌘ == Command\n⇧ == Shift\n⇪ == Caps Lock\n⌥ == Option\n⌃ == Control\n↩ == Return/Enter\n⌫ == Delete\n⌦ == 向前删除键（Fn+Delete）\n↑ == 上箭头\n↓ == 下箭头\n← == 左箭头\n→ == 右箭头\n⇞ == Page Up（Fn+↑）\n⇟ == Page Down（Fn+↓）\nHome == Fn + ←\nEnd == Fn + →\n⇥ == 右制表符（Tab键）\n⇤ == 左制表符（Shift+Tab）\n⎋ == Escape (Esc)\n⏏ == 电源开关键\n\nCtrl\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nCtrl + F\nCommand + F\n在当前文件进行文本查找\n\n\nCtrl + R\nCommand + R\n在当前文件进行文本替换\n\n\nCtrl + Z\nCommand + Z\n撤销\n\n\nCtrl + Y\nCommand + Delete\n删除光标所在行 或 删除选中的行\n\n\nCtrl + D\nCommand + D\n复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面\n\n\nCtrl + W\nOption + 方向键上\n递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围\n\n\nCtrl + E\nCommand + E\n显示最近打开的文件记录列表\n\n\nCtrl + N\nCommand + O\n根据输入的 类名 查找类文件\n\n\nCtrl + J\nCommand + J\n插入自定义动态代码模板\n\n\nCtrl + P\nCommand + P\n方法参数提示显示\n\n\nCtrl + U\nCommand + U\n前往当前光标所在的方法的父类的方法 / 接口定义\n\n\nCtrl + B\nCommand + B\n进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击\n\n\nCtrl + /\nCommand + /\n注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号\n\n\nCtrl + F1\nCommand + F1\n在光标所在的错误代码处显示错误信息\n\n\nCtrl + F11\nOption + F3\n选中文件 / 文件夹，使用助记符设定 / 取消书签\n\n\nCtrl + F12\nCommand + F12\n弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选\n\n\nCtrl + Space\nControl + Space\n基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl + 逗号\n\n\nCtrl + Delete\nOption + Fn+ Delete\n删除光标后面的单词或是中文句\n\n\nCtrl + BackSpace\nOption + Delete\n删除光标前面的单词或是中文句\n\n\nCtrl + 1,2,3...9\nControl + 1,2,3...9\n定位到对应数值的书签位置\n\n\nCtrl + 加号\nCommand + 加号\n展开代码\n\n\nCtrl + 减号\nCommand + 减号\n折叠代码\n\n\nCtrl + 左键单击\nControl + 左键单击\n在打开的文件标题上，弹出该文件路径\n\n\nCtrl + 左方向键\nOption + 左方向键\n光标跳转到当前单词 / 中文句的左侧开头位置\n\n\nCtrl + 右方向键\nOption + 右方向键\n光标跳转到当前单词 / 中文句的右侧开头位置\n\n\nCtrl + 前方向键\n预设中没有该快捷键\n等效于鼠标滚轮向前效果\n\n\nCtrl + 后方向键\n预设中没有该快捷键\n等效于鼠标滚轮向后效果\n\n\nAlt\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nAlt + `\nControl + V\n显示版本控制常用操作菜单弹出层\n\n\nAlt + F1\nOption + F1\n显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择\n\n\nAlt + F7\nOption + F7\n查询所选对象/变量被引用\n\n\nAlt + Enter\nOption + Enter\nIntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同\n\n\nAlt + Insert\nCommand + N\n代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等\n\n\nAlt + 左方向键\nControl + 左方向键\n切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换\n\n\nAlt + 右方向键\nControl + 右方向键\n切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换\n\n\nAlt + 前方向键\nControl + 前方向键\n当前光标跳转到当前文件的前一个方法名位置\n\n\nAlt + 后方向键\nControl + 后方向键\n当前光标跳转到当前文件的后一个方法名位置\n\n\nAlt + 1,2,3...9\nCommand + 1,2,3...9\n显示对应数值的选项卡，其中 1 是 Project 用得最多\n\n\nShift\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nShift + F11\nCommand + F3\n弹出书签显示层\n\n\nShift + Tab\nShift + Tab\n取消缩进\n\n\nShift + Enter\nShift + Enter\n开始新一行。光标所在行下空出一行，光标定位到新行位置\n\n\nShift + 左键单击\nShift + 左键单击\n在打开的文件名上按此快捷键，可以关闭当前打开文件\n\n\nCtrl + Alt\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nCtrl + Alt + L\nCommand + Option + L\n格式化代码，可以对当前文件和整个包目录使用\n\n\nCtrl + Alt + O\nControl + Option + O\n优化导入的类，可以对当前文件和整个包目录使用\n\n\nCtrl + Alt + T\nCommand + Option + T\n对选中的代码弹出环绕选项弹出层\n\n\nCtrl + Alt + S\nCommand + 逗号\n打开 IntelliJ IDEA 系统设置\n\n\nCtrl + Alt + Enter\nCommand + Option + Enter\n光标所在行上空出一行，光标定位到新行\n\n\nCtrl + Alt + 左方向键\nCommand + Option + 左方向键\n退回到上一个操作的地方\n\n\nCtrl + Alt + 右方向键\nCommand + Option + 右方向键\n前进到上一个操作的地方\n\n\nCtrl + Shift\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nCtrl + Shift + F\nCommand + Shift + F\n根据输入内容查找整个项目 或 指定目录内文件\n\n\nCtrl + Shift + R\nCommand + Shift + R\n根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件\n\n\nCtrl + Shift + J\nControl + Shift + J\n自动将下一行合并到当前行末尾\n\n\nCtrl + Shift + Z\nCommand + Shift + Z\n取消撤销\n\n\nCtrl + Shift + W\nOption + 方向键下\n递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围\n\n\nCtrl + Shift + N\nCommand + Shift + O\n通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠\n\n\nCtrl + Shift + U\nCommand + Shift + U\n对选中的代码进行大 / 小写轮流转换\n\n\nCtrl + Shift + T\nCommand + Shift + T\n对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择\n\n\nCtrl + Shift + C\nCommand + Shift + C\n复制当前文件磁盘路径到剪贴板\n\n\nCtrl + Shift + B\nControl + Shift + B\n跳转到类型声明处\n\n\nCtrl + Shift + /\nCommand + Option + /\n代码块注释\n\n\nCtrl + Shift + [\nCommand + Shift + [\n选中从光标所在位置到它的顶部中括号位置\n\n\nCtrl + Shift + ]\nCommand + Shift + ]\n选中从光标所在位置到它的底部中括号位置\n\n\nCtrl + Shift + 加号\nCommand + Shift + 加号\n展开所有代码\n\n\nCtrl + Shift + 减号\nCommand + Shift + 减号\n折叠所有代码\n\n\nCtrl + Shift + F7\nCommand + Shift + F7\n高亮显示所有该选中文本，按Esc高亮消失\n\n\nCtrl + Shift + F12\nCommand + Shift + F12\n编辑器最大化\n\n\nCtrl + Shift + Enter\nCommand + Shift + Enter\n自动结束代码，行末自动添加分号\n\n\nCtrl + Shift + Backspace\nCtrl + Shift + Backspace\n退回到上次修改的地方\n\n\nCtrl + Shift + 1,2,3...9\nControl + Shift + 1,2,3...9\n快速添加指定数值的书签\n\n\nCtrl + Shift + 左键单击\nCommand + Shift + 左键单击\n把光标放在某个类变量上，按此快捷键可以直接定位到该类中\n\n\nCtrl + Shift + 左方向键\nOption + Shift + 左方向键\n在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句\n\n\nCtrl + Shift + 右方向键\nOption + Shift + 右方向键\n在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句\n\n\nCtrl + Shift + 前方向键\nCommand + Shift + 前方向键\n光标放在方法名上，将方法移动到上一个方法前面，调整方法排序\n\n\nCtrl + Shift + 后方向键\nCommand + Shift + 后方向键\n光标放在方法名上，将方法移动到下一个方法前面，调整方法排序\n\n\nAlt + Shift\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nAlt + Shift + N\nOption + Shift + B\n选择 / 添加 task\n\n\nAlt + Shift + 左键双击\nOption + Shift + 左键双击\n选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句\n\n\nAlt + Shift + 前方向键\nOption + Shift + 前方向键\n移动光标所在行向上移动\n\n\nAlt + Shift + 后方向键\nOption + Shift + 后方向键\n移动光标所在行向下移动\n\n\nCtrl + Shift + Alt\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nCtrl + Shift + Alt + V\nCommand + Shift + Option + V\n无格式黏贴\n\n\nCtrl + Shift + Alt + S\nCommand + ;\n打开当前项目设置\n\n\n其他\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nF2\nF2\n跳转到下一个高亮错误 或 警告位置\n\n\nF4\nF4\n编辑源\n\n\nF11\nF3\n添加书签\n\n\nF12\nF12\n回到前一个工具窗口\n\n\nTab\nTab\n缩进\n\n\nESC\nESC\n从工具窗口进入代码文件窗口\n\n\n","categories":["技术","小妙招"],"tags":["快捷键","全局操作","效率"]},{"title":"日志和测试","url":"/2021/11/01/test/","content":"待添加功能一，多种逻辑图表的网页显示二，思维导图显示三，百度，谷歌等SEO四，角标，高亮显示五，LaTex公式显示六，404页面设置七，电脑端页内链接新窗口跳转八，文字格式颜色自定义九，多级分类（支持）运行bugs一，front-matter 中的标签定义不支持[a,b,c...]数组语法?\n“分类”支持[a,b,c...],表示有层级关系\ncategories:- [大类,中类,小类]\n标签奇怪之处在于：下面这种写法不能识别（不正确？）\ntags：- [标签一,标签二,标签三]\n\n而以下的写法\ntags：[标签一,标签二,标签三]\n\n却能正确识别\n\n\n测试功能测试插入图片：在主题的images文件夹下面建立wz文件夹，引用该相对路径，命令如下：！[alt](/images/wz/IMG_0382.jpg)\n展示：\n！alt\n结果：不能显示\n在博客根目录中的source文件夹中新建images文件夹，引用该相对路径，命令如下![rig](/images/IMG_0382.jpg)\n展示\n\n结果：显示正常\n测试代码高亮：\npublic class NetworkCoding &#123;    public static void main(String [] args)    &#123;        try        &#123;            URL url = new URL(&quot;http://www.runoob.com&quot;);            URLConnection urlConnection = url.openConnection();            HttpURLConnection connection = null;            if(urlConnection instanceof HttpURLConnection)            &#123;                connection = (HttpURLConnection) urlConnection;            &#125;            else            &#123;                System.out.println(&quot;请输入 URL 地址&quot;);                return;            &#125;            BufferedReader in = new BufferedReader(                    new InputStreamReader(connection.getInputStream()));            String urlString = &quot;&quot;;            String current;            while((current = in.readLine()) != null)            &#123;                urlString += current;            &#125;            System.out.println(urlString);        &#125;catch(IOException e)        &#123;            e.printStackTrace();        &#125;    &#125;&#125;/***第一次：不进行配置：不能显示高亮*第二次：代码块加上了语言类型：能够显示部分，不过色彩较少*/\n\n\n\n测试mermaid功能以实现多种图表的网页端显示代码：\nsequenceDiagram 客户-&gt;&gt;银行柜台: 我要存钱  银行柜台-&gt;&gt;后台: 改一下这个账户数字哦  后台-&gt;&gt;银行柜台: 账户的数字改完了，明天起息  银行柜台-&gt;&gt;客户: 好了，给你回单 ，下一位\n\n展示：\nsequenceDiagram \n客户->>银行柜台: 我要存钱  \n银行柜台->>后台: 改一下这个账户数字哦  \n后台->>银行柜台: 账户的数字改完了，明天起息  \n银行柜台->>客户: 好了，给你回单 ，下一位\n\n结果：失败\n测试修改文章的front matter中的title属性结果：可以更改\n","categories":["技术","bugs"],"tags":["Markdown","hexo","Mermaid"]},{"title":"《Java核心技术》笔记","url":"/2021/11/23/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B%E7%AC%94%E8%AE%B0/","content":"\n《Java核心技术》是一套全面扎实的Java工具书，适合进阶学习，平时可以搁一本放身边随时查漏补缺，巩固基础。\n\n[TOC]\n第一章 java程序设计概述1.1java的关键术语\n简单性      \n面向对象\n定义：是一种程序设计技术，重点放在数据与对象的接口上。\n相比于c++，java有简单的接口概念以及元类模型\n\n\n网络技能\n有一个拓展的例程库用于处理TCP/IP，能通过URL打开访问网络上的对象\n\n\n健壮性\n与c++最大的不同在于其采用的指针模型可消除重写内存和损坏数据的可能性\n\n\n安全性\n可移植性\n解释性\n高性能\n字节码-机器码（即时编译）\n\n\n多线程\n动态性\n\n\n题外话：HTML和XMLHTML的全称为超文本标记语言，是一种标记语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、链接等。\nHTML的缺点使其交互性差，语义模糊，这些缺陷难以适应Internet飞速发展的要求，因此一个标准、简洁、结构严谨以及可高度扩展的XML就产生了。\n可扩展标记语言（XML）与Access,Oracle和SQL Server等数据库不同，数据库提供了更强有力的数据存储和分析能力，例如：数据索引、排序、查找、相关一致性等，XML的宗旨传输数据的，而与其同属标准通用标记语言的HTML主要用于显示数据。事实上XML与其他数据表现形式最大的不同是：他极其简单。这是一个看上去有点琐细的优点，但正是这点使XML与众不同。\n\n第二章 java程序设计环境\n小百科：JDK                  开发工具箱JRE                  运行java程序用户所使用的程序软件SE                    用于开发桌面或者简单服务器应用的Java平台EE                    用于复杂的服务器应用的Java平台ME                   用于手机和其他小型设备的Java平台J2                    用于命名老版的JavaSDK                 用于命名老版的JDKu                      甲骨文公司的术语，用于发布修改的bugNetBeans         甲骨文公司的集成开发环境\n\n第三章 Java的基本程序设计结构3.1 一个简单的Java应用程序  public class FirstSample//public这个关键字称为访问修饰符（access modifier），用于控制程序的其他部分对这段代码的访问级别；class表明程序中的全部内容都包含在类之中//class后面紧跟类名    &#123;    public static void main(string[] args)//void表示这个方法没有返回值    &#123;    System.out.println(&quot;Hello Swjtu&quot;)    &#125;    &#125;```\n\n\n==Java对程序的大小写很敏感==\n类是构建所有java应用程序和applet的构建块，后者的所有内容都应该放在类中\n定义类名的规则如下：\n必须以大写字母开头，后面可跟字母数字任意组合\n长度没有限制\n不能使用Java保留字\n类名由多个单词组成时每个单词的首字母都应该大写（骆驼命名法），如CamelCase\n\n\n源代码的文件名必须与公共类相同，并使用.java作为拓展名\n编译运行时，源文件将从指定类中的main方法（函数）开始执行，故而源文件必须包含一个main方法，当然用户也可以自定义一个方法放在类中，并且在main中调用它\n回车不是语句结束的标志，多条语句可以写在同一行之中。\n(.)号用于调用方法，Java的通用语句object.method(paraments);，这等价于函数调用\n()内的叫做参数，在Java的方法之中可以没有参数，但需要空括号，例如System.out.println();\n\n3.2 注释\n注释的书写方式有三种：\n用“//”,其注释的内容到本行结尾\n可以用”/**/ “ 囊括一段注释，注意在java中这种注释方式不能嵌套，即如果代码本身包含了一个“*/”，就不能在两端将代码括起来\n第三种注释可以用来自动生成文档，以“/*”开始，以“/”结束\n\n\n\n3.3 数据类型\nJava是一种强类型语言，意味着必须为每一个变量声明一种类型\nJava没有任何的符号类型\n检测“非数值”的方法：\n\nif(double.isNaN(x));\n\n总共8种基本类型：4种整型+2种浮点型+1种用于表示Unicode编码的字符单元的字符类型+1种用于表示真值的boolean类型\n\n整型（允许是负数）\n\n\n\n类型\n储存需求/字节\n取值范围\n\n\n\nint\n4\n约为正负二十亿\n\n\nshort\n2\n-32768～32767\n\n\nlong\n8\n约正负九后十六零\n\n\nbyte\n1\n-128～127\n\n\n\nlong用于大数量，short和byte则用于特定场合\n\njava整型的范围与机器无关，能解决很多跨平台的问\n\n\n\n\n\n浮点型\n\n\n\n类型\n储存需求\n取值范围\n\n\n\nfloat\n4\n大约正负3.40282E+38F(有效位数6-7)\n\n\ndouble\n8\n大约正负1.79769E+308（有效位数15）\n\n\n\n\n\ndouble的数值精度是float的两倍，绝大多数的应用程序都采用double类型\nfloat的精度很难满足要求，用的少，例如在快速处理单精度数据或者需要储存大量的数据时才会采用\nfloat类型后面有个F（例如3.14F），没有后缀F的浮点数值默认是double型\n所有的浮点类型的计算都遵循IEE 754规范，下面是用来表示溢出和出错情况的三个特殊的浮点数值：\n正无穷大\n负无穷大\nNaN(不是一个数值，计算（0/0or负数的平方根)\n\n\n\n\nchar型\n\nchar 类型原本用于表示单个字符,如今， 有些Unicode字符可以用一个char值描述， 另外一些Unicode 字符则需要两个char 值\n\nchar 类型的字面量值要用单引号括起来。例如：W 是编码值为65 所对应的字符常量。它与”A” 不同，”A” 是包含一个字符A 的字符串, char 类型的值可以表示为十六进制值，其范围从\\u0000 到\\Uffff。\n\n除了转义序列\\u 之外， 还有一些用于表示特殊字符的转义序列\n\n我们强烈建议不要在程序中使用char 类型， 除非确实需要处理UTF-16 代码单元。最好将字符串作为抽象数据类型处理\n\n\n\n\n   \n\nboolean型\n\nboolean ( 布尔）类型有两个值： false 和true, 用来判定逻辑条件整型值和布尔值之间不能进行相互转换。\n\n\n\n3.4 变量\n变量名必须是一个以字母开头并由字母或数字构成的序列。与大多数程序设计语言相比，Java 中“ 字母” 和“ 数字” 的范围更大。字母包括 ’A’ ~ ’Z’、 ’a‘ ~ ’z’、‘_’ ,’$’或在某种语言中表示字母的任何 Unicode 字符。变量名中所有的字符都是有意义的，并且大小写敏感。变量名的长度基本上没有限制\n不能使用 Java 保留字作为变量名\n可以在一行中声明多个变量：int i, z; // both are integers\n声明一个变量之后，必须用赋值语句对变量进行显式初始化， 千万不要使用未初始化的变量。\n变量的声明尽可能地靠近变量第一次使用的地方，这是一种良好的程序编写风格。\n习惯上,常量名使用全大写。\n在 Java 中，经常希望某个常量可以在一个类中的多个方法中使用，通常将这些常量称为类常量。可以使用关键字 static fina丨设置一个类常量。 需要注意， 类常量的定义位于 main 方法的外部。 因此， 在同一个类的其他方法中也可以使用这个常量。 而且， 如果一个常量被声明为 public， 那么其他类的方法也可以使用这个常量。 在这个示例中，Constants2.CM就是这样一个常量\n\npublic class Consitants2&#123;public static final double CM=2；public static void main(String[] args)   &#123;double KE=3；   System.out.println(&quot;RE=&quot;+CM*KE) ;&#125;&#125;\n\n\n\n3.5 运算符\n当参与 / 运算的两个操作数都是整数时， 表示整数除法；否则， 表示浮点除法。 \n整数的求余操作（有时称为取模)用 ％ 表示。 例如， 15/2 等于 7, 15%2 等于 1, 15.0/2 等于 7.5\n整数被 0 除将会产生一个异常， 而浮点数被 0 除将会得到无穷大或 NaN 结果。\n在 main 方法中的所有指令都将使用严格的浮点计算。如果将一个类标记为strictfp(如public static strictfp void main(String[] args)), 这个类中的所有方法都要使用严格的浮点计算。\n数学函数与常量\n\n\n想计算一个数值的平方根， 可以使用 sqrt 方法：\n\n```javadouble x = 4;double y = Math.sqrt(x);System.out.println(y); // prints 2.0\n- println 方法和 sqrt 方法存在微小的差异。println 方法处理 System.out 对象。但是，  Math 类中的 sqrt 方法处理的不是对象，这样的方法被称为静态方法。- 在 Java 中，没有幂运算， 因此需要借助于 Math 类的 pow 方法。语句:- ```java  double y = Math.pow(x, a);\nfloorMod 方法的目的是解决一个长期存在的有关整数余数的问题。floorMod(position + adjustment, 12),你总会得到一个在0-11之间的数值。\n\nMath 类提供了一些常用的三角函数：\n\n\n\nMath,sinMath.cosMath.tanMath.atanMath.atan\n\n\n指数函数以及它的反函数\nMath.expMath.logMath.loglO\npi 和 e 常量的近似值：\nMath.PIMath.E\n不必在数学方法名和常量名前添加前缀“ Math”， 只要在源文件的顶部加上下面这行代码就可以了。\nimport static java.1ang.Math.*;//例如：System.out.println(&quot;The square root of \\u03C0 is &quot; + sqrt(PI)) ;\n\n\n数值类型之间的转换\n\n          \n\n在图 3-1 中有 6 个实心箭头，表示无信息丢失的转换； 有 3 个虚箭头， 表示可能有精度损失的转换。 例如，123 456 789 是一个大整数， 它所包含的位数比 float 类型所能够表达的位数多。 当将这个整型数值转换为 float 类型时， 将会得到同样大小的结果，但却失去了一定的精度。\n\n当使用上面两个数值进行二元操作时（例如 n + f， n 是整数， f 是浮点数，) 先要将两个操作数转换为同一种类型，然后再进行计算。\n\n如果两个操作数中有一个是 double 类型， 另一个操作数就会转换为 double 类型。\n否则， 如果其中一个操作数是 float 类型， 另一个操作数将会转换为 float 类型。\n否则， 如果其中一个操作数是 long 类型， 另一个操作数将会转换为 long 类型。\n否则， 两个操作数都将被转换为 int 类型。\n\n\n\n\n强制类型转换\n\n\n强制类型转换的语法格式是在圆括号中给出想要转换的目标类型，后面紧跟待转换的变量名。例如：\ndouble x = 9.997;int nx = (int) x;\n对浮点数进行舍人运算， 以便得到最接近的整数：\ndouble x = 9.997;int nx = (int) Math.round(x);\n如果试图将一个数值从一种类型强制转换为另一种类型， 而又超出了目标类型的表示范围， 结果就会截断成一个完全不同的值。 例如：（byte)300的实际值为44。\n\n可以在赋值中使用二元运算符；java也提供了自增、 自减运算符，关系运算；\n\n\n8.==位运算符==\n\n处理整型类型时，可以直接对组成整型数值的各个位完成操作。这意味着可以使用掩码技术得到整数中的各个位。\n\n&amp; (&quot;与&quot;) | (&quot;或&quot;) ， ^(&quot;异或&quot;)， ~ (&quot;非&quot;)\n\n\n另外，还有&gt;&gt;和&lt;&lt; 运算符将位模式左移或右移。 需要建立位模式来完成位掩码时， 这两个运算符会很方便\n\nint fourthBitFromRight = (n &amp; (1&lt;&lt; 3)) &gt;&gt; 3;\n\n\n最后,&gt;&gt;&gt;运算符会用 0 填充高位，这与&gt;&gt;不同，它会用符号位填充高位。不存在 &lt;&lt;&lt;运算符。\n\n\n括号与运算优先级\n\n\n与 C 或 C++ 不同，Java 不使用逗号运算符。 不过， 可以在 foi■ 语 句 的 第 1 和第 3 部分中使用逗号分隔表达式列表。\n\n\n\n\n枚举类型：变量的取值只在一个有限的集合内。 变量的取值只在一个有限的集合内。 \n\n3.6 字符串\nJava 没有内置的字符串类型， 而是在标准 Java 类库中提供了一个预定义类， 很自然地叫做 String。每个用双引号括起来的字符串都是 String类的一个实例\n\n\n子串：String 类的 substring 方法可以从一个较大的字符串提取出一个子串。\n\nString greeting = &quot;Hello&quot;;String s = greeting.substring（0, 3);//加上下面这句，就能生成一个“Help!”greeting = greeting.substring(0, 3) + &quot;p!&quot;;\n\n\n拼接：\n\n允许使用 + 号连接（拼接）两个字符串\n\n当将一个字符串与一个非字符串的值进行拼接时，后者被转换成字符串\n\n任何一个 Java 对象都可以转换成字符串\n\n如果需要把多个字符串放在一起， 用一个定界符分隔，可以使用静态 join 方法：\n\n```javaString all = String.join(“ / “, “S”, “M”, “L”, “XL”);// all is the string “S / H / L / XL\n3. 不可变字符   - String 类没有提供用于修改字符串的方法    - 不可变字符串却有一个优点：编译器可以让字符串共享。4. 检测字符串是否相等   - `s.equals(t)`如果字符串 s 与字符串 t 相等， 则返回 true ; 否则， 返回 false。\n//      如何判断两个字符串是否相当//      输出为”The result is :true” \n  String d=&quot;abc&quot;;\n  String e=&quot;abc&quot;;\n  boolean result = d.equals(e);\n  System.out.println(&quot;The result is :&quot; + result);\n\n- s 与 t 可以是字符串变量， 也可以是字符串字面量，如下表达也是合法的：- ```java  &quot;Hello&quot;.equals(greeting)\n要想检测两个字符串是否相等，而不区分大小写， 可以使用 equalsIgnoreCase 方法。如下：\n\n```“Hello”.equalsIgnoreCase(“hel1o”)\n   - 一定不要使用= 运算符检测两个字符串是否相等！ 这个运算符只能够确定两个字串     是否放置在同一个位置上。   - 如果虚拟机始终将相同的字符串共享， 就可以使用= 运算符检测是否相等。但实际上只有字符串常量是共享的，而+ 或 substring 等操作产生的结果并不是共享的。5. 空 串 与 Null 串- 空串 &quot;&quot; 是长度为 0 的字符串。空串是一个 Java 对象， 有自己的串长度（0 ) 和内容（空）。不过，String 变量还可以存放一个特殊的值， 名为null, 这表示目前没有任何对象与该变量关联6. 码点和代码单元- Java 字符串由 char 值序列组成。char 数据类型是一  个采用 UTF-16 编码表示 Unicode 码点的代码单元。大多数的常用 Unicode 字符使用一个代码单元就可以表示，而辅助字符需要一对代码单元表示。7. ==String API==- 每一个 API 的注释都以形如 java.lang.String 的类名开始。类名之后是一个或多个方法的名字，解释和参数描述。8. 阅读联机API文档- API文档是 JDK 的一部分， 它是HTML 格式的。 让浏览器指向安装 roK 的 docs/api/index.html 子目录， 就可以看到### 3.7 输入输出1. 读取输入- 读取“ 标准输人流” System.in 就没有那么简单了。要想通 过控制台进行输人， 首先需要构造一个 Scanner 对象， 并与“ 标准输人流” System.in 关联。如下所示：- ```java  Scanner in = new Scanner(System.in);\n\n\n\n\nnextLine 方法将输入一行。\n\n```System.out.print(“What  is your name?  “);String name  = in.nextLine();\n- 在这里， 使用 nextLine 方法是因为在输人行中有可能包含空格。 要想读取一个单词（以空白 符作为分隔符 )， 就调用：  ```String firstName = in.nextO;```- 想要读取一个整数，就用：\nint age = in.nextlntO;System.out.print(“How old are you? “)；\n- 与此类似， 要想读取下一个浮点数， 就调用 nextDouble 方法。- 最后， 在程序的最开始添加上一行：  ```import  java.util.*;```  Scanner 类定义在 java.util 包中。  当使用的类不是定义在基本 java.lang 包中时， 一定要使用 import 指示字将相应的包加载进来。- 因为输入是可见的，  所以  Scanner 类不适用于从控制台读取密码。 Java SE 6 特别 引入了   Console 类实现这个目的。 要想读取一个密码， 可以采用下列代码：```javaConsole cons = System.console();String username = cons.readLine(&quot;User name: &quot;)； cha「[] passwd = cons.readPassword(&quot;Password:&quot;);\n为了安全起见， 返回的密码存放在一维字符数组中，  而不是字符串中。 在对密码进 行处理之后， 应该马上用一个填充值覆盖数组元素，采用  Console 对象处理输入不如采用  Scanner 方便。 每次只能读取一行输入，  而没有 能够读取一个单词或一个数值的方法。\n\n\n\n\n格式化输出\n\n\n可以使用  SyStem.0Ut.print(x) 将数值  x 输出到控制台上。 这条命令将以  x 对应的数据类型 所允许的最大非  0 数字位数打印输出  X。 例如：double x  = 10000.0 / 3.0; \nSystem.out.print(x);打印：3333.3333333333335而使用如下方式则可以用 8 个字符的宽度和小数点后两个字符的精度打印x：System.out.printf（%8.2f, x);\n\n\n\n\n\ns 转换符格式化任意的对象,， 对于任意实现了 Formattable 接口的对象都将调用 formatTo 方法； 否则将调用 toString 方法， 它可以将对象转换为字符串。\n\nprintf方法中日期与时间的格式化选项。 \n\nSystem.out.printfCXtc&quot;, new DateO);\n这条语句将用下面的格式打印当前的日期和时间：\nMon Feb 09 18:05:19 PST 2015\n\n\n\n\n\n\n\n某些格式只给出了指定 丨期的部分信息 t 。例如， 只有 FI 期 或 月 份 如果需要多次对口期操作才能实现对每一部分进行格式化的 Q 的就太笨拙了为此， 可以采用一个格式化的字符串指出要被格式化的参数索引。 索引必须紧跟在 ％ 后面， 并以 $ 终止。 如\nSystem.out.printf( &quot;&amp;l$s %2$tB %2$te, %2$tY&quot;, &quot;Due date:&quot;, new DateQ())；\n打印:Due date: February 9, 2015\n还可以选择使用 &lt; 标志它指示前而格式说明中的参数将被再次使川也就是说， 下列语句将产生与前面语句同样的输出结果：\nSystem.out .printf (&quot;%s %tB %&lt;te, %&lt;tY&quot; , &quot;Due date:&quot; , new DateO) ;\n\n格式说明符的语法图。\n\n\n\n\n文件的输入和输出\n\n\n要想对文件进行读取， 就需要一个用 File 对象构造一个 Scanner 对象， 如下所示：\nScanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;) , &quot;UTF-8&quot;) ;\n如果文件名中包含反斜杠符号，就要记住在每个反斜杠之前再加一个额外的反斜杠：“ c:\\mydirectory\\myfile.txt” c\n\n要想写入文件， 就需要构造一个 PrintWriter 对象。在构造器中，只需要提供文件名：\nPrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;) ;\n如果文件不存在，创建该文件。 可以像输出到 System.out—样使用 print、 println 以及 printf命令。\n\n\n如果用一个不存在的文件构造一个 Scanner, 或者用一个不能被创建的文件名构造一个 PrintWriter,那么就会发生异常。Java 编译器认为这些异常比“ 被零除” 异常更严重。\n\n已经知道有可能出现“ 输人 / 输出” 异常。这需要在 main 方法中用 throws 子句标记， 如下所示：\npublic static void main(String口 args) throws IOException&#123;Scanner in = new Scanner(Paths.get(&quot;myfi1e.txt&quot;), &quot;UTF-8&quot;) ;\n\n\n\n\n\n\n3.8 控制流\nJava没有goto语句，但break语句可以带标签，可以利用它实现从内层循环跳出的目的；还有一种变形的 for 循环， 在C或C++中没有这类循环。它有点类似于C#中的 foreach 循环。\n\n\n块作用域\n块（即复合语句）是指由一对大括号括起来的若干条简单的 Java 语句。块确定了变量的作用域。一个块可以嵌套在另一个块中。\n不能在嵌套的两个块中声明同名的变量。\n\n\n条件语句\n\n\nif (condition) statement\nif (condition) statementi else statementi\nelse 部分是可选的。else 子句与最邻近的 if 构成一组。\n\n\n循环语句\n\n\nwhile &#123;condition ) statement\ndo statement while &#123;condition );\n\n\n确定循环\n\n\n```javafor (int i = 1;i &lt;= 10; i++)System.out.println(i);- 如果在 for 语句内部定义一个变量， 这个变量就不能在循环体之外使用。 因此， 如果希望在 for 循环体之外使用循环计数器的最终值， 就要确保这个变量在循环语句的前面且在外部声明！- 另一方面，可以在各自独立的不同 for 循环中定义同名的变量：  ```java  for (int i = 1; i &lt;= 10; i++)&#123;..&#125;  for (int i = 11; i &lt;= 20; i ++) &#123;..&#125;// OK to define another variable named i\n\n\n多重选择：switch 语句\n\n\nswitch语句将从与选项值相匹配的 case 标签处开始执行直到遇到 break 语句，或者执行到switch i吾句的结束处为止。如果没有相匹配的 case 标签， 而有 default 子句， 就执行这个子句。\n\n如果你比我们更喜欢 switch 语句， 编译代码时可以考虑加上 -Xlint:fallthrough 选项，如下所示：\n这样一来， 如果某个分支最后缺少一个 break 语句， 编译器就会给出一个警告消息。\n\n```javajavac -Xlint:fallthrough Test.java\n- 如果你确实正是想使用这种“ 直通式”（fallthrough) 行为， 可以为其外围方法加一个标注@SuppressWamings(&quot;fallthrough&quot;)。 这样就不会对这个方法生成警告了 (标注是为编译器或处理 Java 源文件或类文件的工具提供信息的一种机制。 ）- case 标签可以是：  - 类型为 char、byte、 short 或 int 的常量表达式。  - 枚举常量。  - 从 Java SE 7 开始， case 标签还可以是字符串字面量。例如：  - ```java    String input=...;    switch (input.toLowerCaseO)    &#123;    case &quot;yes&quot;: // OK since Java SE 7    ...    break;    ...&#125;\n\n\n当在 switch 语句中使用枚举常量时，不必在每个标签中指明枚举名，可以由 switch 的表达式值确定。例如：\n\n```javaSize sz = . . .;switch (sz){case SMALL: // no need to use Size.SMALL…break;…}\n5. 中断控制流程语句- 与用于退出 switch 语句的 break 语句一样， 它也可以用于退出循环语句。- Java 还提供了一种带标签的 break语句， 用于跳出多重嵌套的循环语句。有时候，在嵌套很深的循环句中会发生一些不可预料的事情。此时可能更加希望跳到嵌套的所有循环语句之外。通过添加一些额外的条件判断实现各层循环的检测很不方便。- ```java  Scanner in = new Scanner(System.in);  int n;  read_data:  while (. . .) // this loop statement is tagged with the label  for (. . .) // this inner loop is not labeled  &#123;  Systen.out.print(&quot;Enter a number &gt;= 0: &quot;)；  n = in.nextlntO；  if (n &lt; 0) // should never happen-can’t go on  break read_data;  ...// break out of readjata loop  &#125;&#125;\n\n如果输入有误， 通过执行带标签的 break 跳转到带标签的语句块末尾。对于任何使用break语句的代码都需要检测循环是正常结束， 还是由 break 跳出。\n\n最后，还有一个 continue 语句。 与 break 语句一样， 它将中断正常的控制流程。continue语句将控制转移到最内层循环的首部。\n\n```javaScanner in = new Scanner(System.in) ;while (sum &lt; goal ){System.out.print(“Enter a number: “)；n = in.nextlntO；if (n &lt; 0) continue;sum += n; // not executed if n &lt; 0}\n  如果 n&lt;0, 则 continue语句越过了当前循环体的剩余部分， 立刻跳到循环首部。如果将 continue 语句用于 for 循环中， 就可以跳到 for 循环的“ 更新” 部分。 例如， 下面这个循环：- ```java  for (count = 1; count &lt;= 100; count++)  &#123;  System.out.print(&quot;Enter a number, -1 to quit: &quot;);  n = in.nextlntO；  if (n &lt; 0) continue;  sum += n; // not executed if n &lt; 0  &#125;\n\n如果 n&lt;0, 则 continue 语句跳到 count++ 语句。还有一种带标签的 continue 语句，将跳到与标签匹配的循环首部。\n\n\n3.9 大数值\n如果基本的整数和浮点数精度不能够满足需求， 那么可以使用jaVa.math 包中的两个很有用的类：Biglnteger 和 BigDecimaL 这两个类可以处理包含任意长度数字序列的数值。Biglnteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。\n\n使用静态的 valueOf 方法可以将普通的数值转换为大数值：\nBiglnteger a = Biglnteger.valueOf(100);\n遗憾的是，不能使用人们熟悉的算术运算符（如：+ 和 *) 处理大数值。 而需要使用大数值类中的 add 和 multiply 方法:\nBiglnteger c = a.add(b); // c = a + bBiglnteger d = c.multiply(b.add(BigInteger.valueOf(2))); // d = c * (b + 2)\n\n3.10 数组\n在声明数组变量时，需要指出数组类型（数据元素类型紧跟 [] ) 和数组变量的名字。如\nint[] a = new int[100];//加上了初始化\n\n创建一个数字数组时， 所有元素都初始化为 0。boolean 数组的元素会初始化为 false， 对象数组的元素则初始化为一个特殊值 null, 这表示这些元素（还）未存放任何对象。\nString[] names = new String[10] ;会创建一个包含 10 个字符串的数组， 所有字符串都为null。\n\n要想获得数组中的元素个数，可以使用 array.length。例如:\nfor (int i = 0; i &lt; a.length; i ++)System.out.println(a[i]);\nFor each 循环\n\nJava 的一种功能很强的循环结构， 可以用来依次处理数组中的每个元素（其他类型的元素集合亦可）而不必为指定下标值而分心。\nfor (variable : collection) statement\n定义一个变量用于暂存集合中的每一个元素， 并执行相应的语句（当然， 也可以是语句块)。collection 这一集合表达式必须是一个数组或者是一个实现了 Iterable 接口的类对象（例如ArrayList )。 \nfor (int element : a)System.out.println(element):\n\n\n想打印数组中的所有值利用 Arrays 类的 toString 方法更简单。 调用 Arrays.toString(a), 返回一个包含数组元素的字符串， 这些元素被放置在括号内， 并用逗号分隔， 例如，“ [2,3,5,7,11,13]”、 代码如下：\nSystem.out.println(Arrays.toString(a));\n数组初始化以及匿名数组\n\n在 Java中， 提供了一种创建数组对象并同时赋予初始值的简化书写形式。\nint[] small Primes = &#123; 2, 3, 5, 7, 11, 13 &#125;;\n\n甚至还可以初始化一个匿名的数组：\nnew int[] &#123; 17, 19, 23, 29, 31, 37 &#125;small Primes = new int[] &#123; 17, 19, 23, 29, 31, 37 &#125;;\n\n\n数组拷贝\n\n在 Java 中， 允许将一个数组变量拷贝给另一个数组变量。这时， 两个变量将引用同一 个数组：\nint[] luckyNumbers = smallPrimes;1uckyNumbers[5] = 12; // now smallPrimes[5] is also 12\n如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 Arrays 类的 copyOf方法：\nint[] copiedLuckyNumbers = Arrays.copyOf(luckyNumbers, luckyNumbers.length) ;\n\n第 2 个参数是新数组的长度。这个方法通常用来增加数组的大小：\nluckyNumbers = Arrays.copyOf(luckyNumbers, 2 * luckyNumbers.length);\n\n如果数组元素是数值型，那么多余的元素将被赋值为 0 ; 如果数组元素是布尔型， 则将赋值为 false。相反， 如果长度小于原始数组的长度，则只拷贝最前面的数据元素。\n\n\n\n命令行参数\n\n  前面已经看到多个使用 Java 数组的示例。 每一个 Java 应用程序都有一个带 String arg[ ]参数的 main 方法。这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数.\n\n\n数组排序\n\n要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：\nint[] a = new int[10000];Arrays.sort(a)\n\n\n多维数组\n\n在 Java 中， 声明一个二维数组相当简单。 例如：\ndouble[][] balances;\n与一维数组一样， 在调用 new 对多维数组进行初始化之前不能使用它。 在这里可以这样初始化：\nbalances = new double[NYEARS] [NRATES]:\n\n另外， 如果知道数组元素， 就可以不调用 new， 而直接使用简化的书写形式对多维数组进行初始化。例如：\nint[][] magicSquare =&#123;&#123;16, 3, 2, 13&#125;，&#123;5, 10, 11, 8&#125;,(9, 6, 7, 12&#125;,&#123;4, 15, 14, 1&#125;&#125;；\n\n一旦数组被初始化， 就可以利用两个方括号访问每个元素， 例如，balances[i][j]\n例如使用初始余额来初始化这个数组的第一行：\nfor (int j = 0; j &lt; balances[0].length; j++)balances[0][j] = 10000;\n\n然后， 按照下列方式计算其他行：\nfor (int i = 1; i &lt; balances.length; i++)&#123;for (int j = 0; j &lt; balances[i].length; j++)&#123;double oldBalance = balances[i - 1][j]:double interest = . . .;balances[i][j] = oldBalance + interest;&#125;&#125;\n要想快速地打印一个二维数组的数据元素列表， 可以调用：\nSystem.out.println(Arrays.deepToString(a)) ;\nfor each 循环语句不能自动处理二维数组的每一个元素。它是按照行， 也就是一维教组处理的要想访问二维教组 a 的所有元素， 需要使用两个嵌套的循环， 如下所示：\nfor (double[] row : a)for (double value : row)do something with value\n\n\n不规则数组\n\nJava 实际上没有多维数组， 只有一维数组。 多维数组被解释为“ 数组的数组。\n\n表达式balances[i]引用第 i 个子数组， 也就是二维表的第 i 行。它本身也是一个组，balances[i][j]引用这个数组的第 j 项。由于可以单独地存取数组的某一行， 所以可以让两行交换:\ndoubleQ temp = balances[i]:balances[i] = balances[i + 1];balances[i + 1] = temp;\n还可以方便地构造一个“ 不规则” 数组， 即数组的每一行有不同的长度。\n要想创建一个不规则的数组， 首先需要分配一个具有所含行数的数组。\nint[][] odds = new int [NMAX + 1] [] ;\n\n接下来， 分配这些行。\nfor (int n = 0; n &lt;= NMAX ; n++)odds[n] = new int [n + 1] ;\n\n\n\n第四章 对象与类4.1 面对对象程序设计概述\n面向对象的程序是由对象组成的， 每个对象包含对用户公开的特定功能部分和隐藏的实现部分。\n从根本上说， 只要对象能够满足要求， 就不必关心其功能的具体实现过程。在 OOP 中， 不必关心对象的具体实现， 只要能够满足用户的需求即可。\n对于一些规模较小的问题， 将其分解为过程的开发方式比较理想。而面向对象更加适用于解决规模较大的问题。\n\n\n4.1.1类\n类（ class) 是构造对象的模板或蓝图。 由类构造 （construct) 对象的过程称为创建类的实例 （instance ) .\n封装 （ encapsulation , 有时称为数据隐藏）是与对象有关的一个重要概念。 \n从形式上看，封装不过是将数据和行为组合在一个包中， 并对对象的使用者隐藏了数据的实现方式。\n对象中的数据称为实例域（ instance field ), 操纵数据的过程称为方法（ method )。 \n对于每个特定的类实例（对象）都有一组特定的实例域值。这些值的集合就是这个对象的当前状态 （ state )。无论何时， 只要向对象发送一个消息，它的状态就有可能发生改变。\n实现封装的关键在于绝对不能让类中的方法直接地访问其他类的实例域。 \n程序仅通过对象的方法与对象数据进行交互。封装给对象赋予了“ 黑盒” 特征， 这是提高重用性和可靠性的关键。\n\n\n有的类都源自于一个“ 神通广大的超类”，它就是 Object。\n在扩展一个已有的类时， 这个扩展后的新类具有所扩展的类的全部属性和方法。在新类中， 只需提供适用于这个新类的新方法和数据域就可以了。通过扩展一个类来建立另外一个类的过程称为继承（inheritance）。\n\n4.1.2对象\n要想使用 OOP,—定要清楚对象的三个主要特性：\n\n对象的行为（behavior)—可以对对象施加哪些操作，或可以对对象施加哪些方法？\n\n对象的状态 （state)—当施加那些方法时，对象如何响应？\n\n对象标识（identity )—如何辨别具有相同行为与状态的不同对象？\n\n\n\n\n同一个类的所有对象实例， 由于支持相同的行为而具有家族式的相似性。对象的行为是用可调用的方法定义的。\n\n每个对象都保存着描述当前特征的信息。这就是对象的状态。对象的状态可能会随着时间而发生改变，但这种改变不会是自发的。 对象状态的改变必须通过调用方法实现(如果不经过方法调用就可以改变对象状态， 只能说明封装性遭到了破坏。)\n\n作为一个类的实例， 每个对象的标识永远是不同的， 状态常常也存在着差异。\n\n对象的这些关键特性在彼此之间相互影响着。\n\n\n\n4.1.3 识别类\n传统的过程化程序设计， 必须从顶部的 main 函数开始编写程序。在面向对象程序设计时没有所谓的“ 顶部”。对于学习OOP 的初学者来说常常会感觉无从下手。答案是：  首先从设计类开始，然后再往每个类中添加方法。\n\n识别类的简单规则是在分析问题的过程中寻找名词，而方法对应着动词。\n\n\n\n例如， 在订单处理系统中，有这样一些名词：•商品（Item )•订单（Order)•送货地址（Shippingaddress)•付 款 ( Payment )•账户（Account)\n这些名词很可能成为类 Item、 Order 等。接下来， 查看动词：商品被添加到订单中， 订单被发送或取消， 订单货款被支付。对于每一个动词如：“ 添加”、“ 发送”、“ 取消” 以及“ 支付”， 都要标识出主要负责完成相应动作的对象。 例如， 当一个新的商品添加到订单中时， 那个订单对象就是被指定的对象， 因为它知道如何存储商品以及如何对商品进行排序。也就是说，add 应该是 Order 类的一个方法，而 Item 对象是一个参数。\n\n4.1.4类与类之间的关系\n最常见的关系有以下三种：\n\n依赖（“use-a”）\n\n依赖（dependence ), 即“ uses-a” 关系， 是一种最明显的、 最常见的关系。例如， Order类使用 Account 类是因为 Order 对象需要访问 Account 对象查看信用状态。但是 Item 类不依赖于 Account 类， 这是因为 Item 对象与客户账户无关。因此， 如果一个类的方法操纵另一个类的对象，我们就说一个类依赖于另一个类。\n\n\n应该尽可能地将相互依赖的类减至最少。用软件工程的术语来说， 就是让类之间的耦合度最小。\n\n\n聚合（“has- a”）\n\n聚合（aggregation ), 即“ has-a” 关系， 又可称为关联，是一种具体且易于理解的关系。 例如， 一个Order 对象包含一些 Item 对象。聚合关系意味着类 A 的对象包含类 B 的对象。\n\n\n继承（“is-a”）\n\n继承（inheritance ), 即“ is-a” 关系， 是一种用于表示特殊与一般关系的。 例如， RushOrder类由 Order 类继承而来。 在具有特殊性的 RushOrder 类中包含了一些用于优先处理的特殊方法， 以及一个计算运费的不同方法；而其他的方法， 如添加商品、 生成账单等都是从Order 类继承来的。一般而言， 如果类 A 扩展类 B, 类 A 不但包含从类 B 继承的方法，还会拥有一些额外的功能。\n\n\n\n\n\n4.2使用预定义类\n并不是所有的类都具有面向对象特征。 例如，Math 类。\n\n\n程序中，可以使用 Math 类的方法， 如 Math.random, 并只需要知道方法名和参数 （如果有的话，) 而不必了解它的具体实现过程。这正是封装的关键所在，当然所有类都是这样。但遗憾的是， Math 类只封装了功能，它不需要也不必隐藏数据。 由于没有数据，因此也不必担心生成对象以及初始化实例域.\n\n4.2.1对象和对象变量\n在java之中，想要使用对象必须先构造对象，并指定其初始状态。\n\n使用构造器（construtor）构造新实例，构造器是一种特殊的方法，用来构造和初始化对象。\n\n在标准java库中包含了一个date类，它的作用是用来描述一个时间点：\ndecember 31,1999,23:59:59 GMT \n\n\n\n构造器的名字应该与类名相同，因此，Date类的构造器的名字就叫做Date。想要构造一个Date对象，得在构造器前面加上一个new操作符，如下所示：\nnew Date()//这个构造器构造了一个新的对象。这个对象被初始化成了当前的日期和时间\n\n\n也可将这个对象传递给一个方法：\n\nSystem.out.println(new Date());\n\n\n还可以将一个方法应用于刚刚创建的额对象。Date类中就有一个string方法。这个方法将返回日期的字符串描述。如下：\nString s = new Date.toString();\n\n在这两个例子里，对象仅仅使用了一次。通常我们希望对象可以多次使用，因此，可将对象放入一个变量之中。例如：\nDate birthday = new Date();\n\n==对象与对象变量之间的区别==\n\nDate deadline;定义了一个对象deadline，它可以引用date类型的对象。但是，==一定要认识到，变量deadline不是一个变量，实际上也没有引用对象。此时不能把任何的Date方法应用在这个变量上。==例如下面这个语句：\ns= deadline.toString();\n\n将产生编译错误。\n必须要先初始化变量deadline，这里有两个选择：\ndeadline = new Date();\n\ndeadline = birthday;\n\n\n\n在Java中，任何对象变量的值都是对储存在另一个地方的一个对象的引用。\n\n局部变量不会自动地初始化为null，而必须通过调用new或者将它们设置为null进行初始化。\n\n\n\n\n4.2.2Java类库中的LocalDate类\n类库设计者决定将保存时间与给时间点命名分开。所以标准 Java 类库分别包含了两个类：一个是用来表示时间点的 Date 类；另一个是用来表示大家熟悉的日历表示法的 LocalDate 类。\n\n不要使用构造器来构造 LocalDate 类的对象。实际上，应当使用静态工厂方法 (factory method) 代表你调用构造器。下面的表达式：\nLocalDate.now()\n\n会构造一个新对象，表示构造这个对象时的日期。\n\n\n\n4.2.3更改器方法与访问器方法\n只 访 问 对 象 而 不 修 改 对 象 的 方 法 有 时 称 为 访 问 器 方 法 \n\n4.3用户自定义类4.3.1 最简单的定义形式是：class ClassName&#123;field1field2...construct1construct2...method1method2...&#125;\n\n例如下面这段代码所演示的：\nclass Employee&#123;  //instance field  private String name;  private double salary;  private Date hireDay;    //constrator  public Employee(String n,double s,int year,int month,int day)  &#123;    name = n;    salary = s;    GregrorianCalendar calendar=new GregrorianCalendar(year,month-1,day);    hireday = calandar gettime();  &#125;    //a method  public String getname()  &#123;    return name;  &#125;    //more method  .....  &#125;\n\n在一个源文件里只能有一个公共类，但是可以有任意数目的非公有类。\n4.3.2 多个源文件的使用\n如果习惯将每一个类都放在一个单独的源文件之中，那么可以有两种编译源程序的方法：\n一种是使用通配符调用java编译器：javac Employee*.java,所有与通配符相匹配的源文件都将被编译成类文件。\n或者键入jacac.EmployeeTest.java\n\n\n\n4.3.3剖析Employee类public Employee(String n,double s,int year,int month,int day)public String getName()public double getSalary()public Date getHireDay()public void raiseSalary(double byPercent)\n\n这个类的所有方法都被标记为public,这就意味着任何类的任何方法都能调用这些方法。接下来需要注意的是，Employee类的实例中有三个实例域用来存放将被操作的数据：\nprivate String name;private double salary;private Date hireDay;\n\n\nprivate能保证只有Employee类自身的方法才能访问这些实例域，而其他的方法则不能读写这些域。\n对此相对比的是，极不推荐使用public来来标记实例域，因为这样做任何的方法都能读写修改该实例域中的数据，这也就破坏了封装。\n\n4.3.4从构造器开始public Employee(String n,double s,int year,int month,int day)&#123;  name=n;  salary=s;  GregrorianCalendar calendar = new GregroCalendar(year,month-1,day);  hireDay=calendar.getTime();&#125;\n\n\n可以看到，构造器类的名称相同。在构造Employee类的对象时，构造器会运行，以便将实例域初始化成所希望的状态。例如在这条代码new Employee(&quot;James Bond&quot;，10000，1950，1，1)创建Employee类实例时会把实例域设置成：\n\nname = James Bond;salary = 10000;hireDay = january 1,1950;\n\n构造器和其他方法的不同之处在于，它的调用总是伴随着new操作符的执行，而不能使用构造器对一个已经存在的对象进行操作来达到重新设置实例域的目的，否则的话会出现编译错误。\n\n记忆要点\n\n构造器与类同名；\n每个类可以有一个以上的构造器；\n构造器可以有0个，1个或者多个参数；\n构造器没有返回值；\n构造期总是伴随着new操作符一起使用\n\n\n4.3.5隐式参数和显式参数例如代码段：\npublic void raiseSalary(double byPercent)&#123;  double raise = salary*byPercent/100;  salary+=raise;&#125;\n\n将调用这个方法的对象的salary的实例域设置成新值：\nnumber007.raiseSalary(5);\n\n\n在方法名后面的括号里面的值就是一个显式参数\n出现在方法名前的Employee类对象就是隐式参数\n可以看到，显式参数是明显直白的出现在方法的声明之中的，而隐式参数没有出现在方法的声明之中；在每一个方法中，this表示隐式参数，例如可以把上述代码块的salary统统改成this.salary,可以明显地将实例域和局部变量区别开来。\n在java中，所有方法都必须在类的内部进行定义，但并不代表它们就是内联方法。\n\n4.3.6 封装的优点\n有些时候需要获取或者设置实例域的值，应该提供下面三个内容：\n\n一个私有的数据域\n一个公有域的访问器方法\n一个公有域的更改器方法\n\n有以下两点好处：\n\n可以改变内部实现，除了该类的方法之外不会影响其他代码；\n更改器方法可以执行错误检查。\n\n\n注意不要编写返回引用可变对象的访问器方法。如果需要返回一个可变对象的引用，应该首先对它进行克隆，对象克隆是指存放在另外一个位置上的对象副本。\n\n\n4.3.7基于类的访问权限\n一个方法可以访问同一个类下面所属的所有对象的数据，例如\n\nclass Employee&#123;  ...    public boolean equals(Employee other)  &#123;    return name.equals(other name);  &#125;&#125;\n\n4.3.8 私有方法\n有时我们可能希望一个计算机代码分成若干个独立的辅助方法，通常这些方法不应该成为公有接口的一部分，这是由于他们往往与当前的实现机制非常紧密，或者需要一个特别的歇息以及一个特别的调用次序。\n实现方法：只需要将关键字public改为private即可\n\n4.3.9 final实例域\n\n可以将实例域定义成final，构建对象时必须初始化这样的域，且后续不能再对它进行修改。\nfinal修饰符大都应用于基本类型域，或者不可变类的域。\n\n4.4静态域和静态方法4.4.1 静态域\n如果把域定义成static，每个类中只有一个这样的域，而每个一个对象对于所有的实例域却都有自己的拷贝。\n\n\npublic void setId()&#123;id = nextId;nextId++;&#125;\n\n假设为Harry设定雇员标识码：\nHarry.setId();\nHarry的id域被设置为静态域nextId当前的值，并且静态域的值加1。\n\n4.4.2 静态常量\n静态变量使用较少，静态常量使用的却比较多，例如PI：\npublic class Math&#123;...public static final double PI =  3.14159265358979323846;...&#125;\n\n在程序中可以采用Math.PI的形式来获得这个常量。\n\n前面提到最好不要将域设置成public，但公有常量却没问题，因为out被设置为final，故不允许将其他打印流赋值给它。\n\n\n4.4.3 静态方法\n静态方法是一种不能向对象实时操作的方法。例如Math.pow(x,a),在运算时，不使用任何Math对象，换句话说就是没有隐式参数。\n\n可以认为静态方法是没有this参数的方法（在一个非静态的方法中，this参数表示这个方法的隐式参数）\n\nEmployee类的静态方法不能访问Id实例域，因为它不能操作对象。\n\n静态方法可以访问自身类中的静态域：\npublic static int getNextId()&#123;  return nextId;&#125;可以通过类名调用这个方法：  int n = Employee.getNext();\n在下面两种情况下使用静态方法：\n\n一个方法不需要访问对象状态，其所需的参数都是通过显式参数提供的（例如：Employee.getNextID）\n一个方法只需要访问类中的静态域（例如：Employee.getNextId）。\n\n4.4.4 工厂方法\n静态方法还有另外一种常见的用途，类似于LocalDate和NumberFormat的类使用静态工厂方法来构造对象。例如：\n\nNumberFormat currencyFormatter = NumberFormat.getCurrencyInstance();NumberFormat percentFormatter = NumberFormat.getpercentInstance();double x = 0.1;system.out.println(currencyFormatter.format(x));system.out.println(percentFormatter.format(x));\n\n\n为什么NumberFormat类不利用构造器来完成这些操作呢？主要有以下两个原因：\n\n无法命名构造器。构造器的名字必须与类名相同，但是，这里希望将得到的货币实例和百分比实例采用不同的名字。\n当使用构造器时，无法改变所构造对象的类型。而Factory方法将返回一个DecimalFormat类对象，这是NumberFormat的子类。\n\n\n4.4.5 main方法\n不需要使用对象调用静态方法。main就是个静态方法。\nmain方法不对任何对象进行才做，事实上，在启动程序时还没有任何一个对象，静态的main方法将执行并创建程序所需要的对象。\n\n\n每一个类可以有一个main方法，这是一个常用于对类进行单元测试的技巧，例如可以在Employee类中添加一个main方法：\nclass Employee&#123;publlic employee(String n,double s,int year,int day)&#125;&#123;... public static void main(String[] args )&#123; Employee e = new Employee(&quot;ROmeo&quot;,50000,2003,3,31); e.raiseSalary(10); system.out.println(e.getName()+&quot; &quot;+e.getSalary());&#125;...&#125;//如果想要独立地运行测试Employee类，只需要执行：`java Employee`//如果该类是一个更大型程序的一部分，就可以使用以下的语句来运行程序：//`java Application`//Employee类的main方法永远不会执行\n\n\n\n\n4.5方法参数\n回顾一下有关参数传递给方法的一些专业术语：\n\n按值调用：表示方法接受的是调用者提供的值。\n按引用调用：表示方法接受的是调用者提供的变量地址\n\n一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。\n\n\n==java程序设计语言总是采用按值调用，不是引用调用。也就是说，方法得到的是所有参数值的一个拷贝，方法不能修改传递给它的任何参数变量的内容。==\n\n方法参数的两种类型：\n\n基本数据类型（数字，布尔值）\n对象引用\n\n\n==一个方法不可能修改一个基本数据类型的参数==，而对象引用作为参数则不一样了：\npublic static void tripleSalary(Employee x)&#123;  x.raiseSalary(200);&#125;\n\n​    当调用时：\nharry = new Employee(...);tripleSalary(harry);\n\n具体的执行过程为：\n1. x被初始化为harry的拷贝，这里是一个对象的引用。2. raiseSalary方法引用与这个对象引用。x和harry同时引用的那个Employee对象的薪资提高了两倍。3. 方法结束之后，参数变量x不再使用。当然对象变量harry继续引用那个薪资增至三倍的固原对象。\n\n\n\n\n\n4.6对象构造4.6.1 重载\n定义：有些类有多个构造器，例如可以构造一个空的StringBuilder对象：\nStringbuilder messages = new Stringbuider();\n亦可指定一个初始字符串：\nStringBuilder todolist = new StringBuilder(&quot;To do:\\n&quot;);\n这种特征就叫做重载，即如果多个方法有相同的名字，不同的参数，便产生了重载。\n\n编译器必须挑选出具体执行哪个方法，它通过用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出相应的方法。\n如果编译器找不到匹配的参数，就会产生编译时错误，因为根本不存在匹配，或者没有一个比其他的更好，这个过程叫做重载解析。\n\n\nJava允许重载任何方法，而不只是构造器方法。因此要完整地描述一个方法，需要指出方法名以及参数类型，这叫做方法的签名。例如String类有四个成为indexOf的公有方法，他们的签名是：\nindexOf(int)indexOf(int,int)indexOf(String)indexOf(String,int)\n\n返回类型不是方法签名的一部分，也就是说，不能有两个名字相同，参数类型也相同却返回不同类型值的方法。\n\n\n4.6.2 默认域初始化\n如果在构造器中没有显式地给域赋予初值，那么就会被自动得赋予初值：数值为0，布尔值为false，对象引用为null。\n\n\n这也是域和局部变量的主要不同点，必须明确地初始化方法中的局部变量。但是，如果没有初始化类中的域，将会自动得初始化为默认值。\n\n\n最好在使用之前初始化域。\n\n4.6.3 无参数的构造器\n如果在编写一个类时没有编写构造器,那么系统就会提供一个无参数构造器。这个构造器将所有的实例域设置成默认值。于是，实例域中的数值型数据设置成0，布尔型数据设置成false，所有对象变量设置成null。\n如果类中提供了至少一个构造器，但是没有提供无参数的构造器，则在构造对象时如果没有提供参数就会被视为不合法。\n\n4.6.4 显式域初始化\n通过重载类的构造器方法，可以采用多种形式设置类的实例域的初始状态。\n在执行构造器之前，先执行赋值操作。当一个类的所有构造器都希望把相同的值赋予给某个特定的实例域时，这种方式特别有用。\n初始值不一定是常量值，也可以调用方法对域进行初始化。\n\n4.6.5 参数名\n在编写很小的构造器时，常常在参数命名上出现错误。例如用单个字符，但这样只有阅读代码才能晓得参数的含义.\npublic Employee(String n,double s)&#123;  name=n;  salary=s;&#125;\n另外一个技巧就是在每个参数前面加上一个前缀“a”，例如：\npublic Employee(String aName,double aSalary)&#123;  name=aName;  salary=aSalary;&#125;\n还有一个常用的技巧，基于这样的现实：参数变量用同样的名字将实例域屏蔽起来。例如，将参数命名成salary，salary将引用这个参数，而不是实例域。但是可以采用this.salary的形式访问实例域。回想一下，this指示隐式参数，也就是所构造的对象。\n\n\n4.6.6 调用另外一个构造器\n关键字this引用方法的隐式参数，但它还有另外一个含义，如果构造器的第一个语句形如this(….),这个构造器将调用同一个类的另一个构造器，下面是个典型例子：\npublic Employee(double s)&#123;  //calls Employee(String double)  this(&quot;Employee #&quot;+nextId s);  nextId++;&#125;\n\n当调用new Employee(60000)时，Employee(double)构造器将调用Employee（String,double）。采用这种方式使用this关键字非常有用，这样对公共的构造器代码部分只编写一次即可。\n\n\n\n\n4.6.7 初始化块\n前文中有两种初始化数据域的方法：\n\n在构造器中设置值\n在声明中赋值\n\n实际上还存在第三种机制，成为“初始化块”。在一个类的声明中，可以包含多个代码块，只要构造类的对象，这些块就会被执行。\n\n由于初始化数据域有多种途径，所以列出构造过程的所有路径可能相当混乱。下面是调用构造器的具体处理步骤：\n\n所有数据域被初始化为默认值\n按照在类声明中出现的次序，依次执行所有域初始化语句和初始化块\n如果构造器第一行调用量第二个构造器，则执行第二个构造器主体\n执行这个构造器的主体\n\n编写代码时我们应当精心组织好初始化代码，有利于其他人理解。\n\n如果对类的静态域进行初始化的代码比较复杂，你们可以使用静态的初始化块。将代码放在一个块中，并标记关键字static。\n\n\n4.6.8 对象析构与finalize方法\nJava中有自动的垃圾回收器，不需要人工回收内存，故而Java不支持析构器\n\n\n析构器：计算机语言中的析构函数，当一个对象在消亡的时候，由编译器自动调用，主要用来释放内存。\n\n4.7 包\nJava允许使用包将类组织起来，借助于宝可以方便地组织自己的代码，并将自己的代码与别人提供的代码库分开管理。\n标准的Java类库分布在多个包中，包括java.lang,java.util和java.net等。\n标准的java包具有一个层次结构，也可以使用嵌套层次组织包。所有标准的java包都处在java和javax包层次中。\n使用包的主要原因是确保类名的唯一性，同名的类放在不同的包中，不会产生冲突；为了保证包名的绝对唯一性，建议将域名以逆序的形式作为包名，如com.horstman，还能进一步地划分为子包，如com.horstman.corejava。\n从编译器的角度来看，嵌套的包没有任何关系。\n\n4.7.1 类的导入\n一个类可以使用所属包的所有类，以及其他包中的共有类。采用两种方式访问另一个包中的公有类：\n\n第一种方式是在每个类名之前添加完整的包名。较为的繁琐，例如\njava.time.LocalDate today = java.time.LocalDate.now()；\n简单常用的另外一种是使用import语句，import语句是一种引用包含在包中的类的简明描述。一旦使用了import语句，在使用类时，就不必写出包的全名了。\n\n可以使用import语句导入一个特定的类或者整个包。该语句应该位于源文件的顶部。\n\n在多数情况下，只导入需要的包，不必过多得注意它们，但是如果发生命名冲突时，就需要注意他们的名字了。\n\n例如，java.util和java.sql中都有日期(Date)类,导入 如下两个包时：\nimport java.util.*;import java.sql.*;\n\n当程序在使用Date类时，编译就会出现以下错误：\nDate today; // Error java.util.Date or java.sql.Date?\n\n因为此时编译器无法确定是使用哪个Date类，此时应该在导入处写明具体是哪个包中的Date类；如果都需要使用时那么在使用处应该标明完整的包名。\n\n\n\n\n\n4.7.2 静态导入\nimport不仅可以导入类，还可以导入静态方法和静态域\n\n例如，在源文件的顶部，增加一条这样的指令：import static java lang.system.*;\n就可以使用system的静态方法和静态域的时候，不加类名前缀：\nout.println(&quot;Hello World&quot;);\nexit(0);\n\n\n这种方式可以让代码美观：\nsqrt(pow(x,2)+pow(y,2));//美观Math.sqrt(Math.pow(x,2)+Math.pow(y,2));//繁杂\n\n4.7.3 将类放入包中\n想要将一个类放入一个包中，就必须将包的的名字放在源文件的开头，定义类的代码之前。\n\npackage com.horstman.corejava;public class Employee&#123;...&#125;\n\n如果没有在源文件中放置package语句，这个源文件中的类会被放置在一个默认的包中（defaulf package）中。\n\n\n4.7.4 包作用域\n包不是一个封装的实体。也就是说，任何人都可以向包中添加更多的类。\n\n4.8类路径\n类储存文件系统的子目录中，类的路径必须与包名匹配，另外，类文件也可以储存在JAR（java归档）文件中。\n\n为了使类能够被多个程序共享，需要一下几点：\n\n把类放在一个目录中，这个目录是包树状结构的基目录。\n将JAR文件放在一个目录中\n设置类路径（class path）\n\n在UNIX环境中，类路径的不同项目之间采用冒号(;)分隔；而在Windows系统中，则以分号（;）分隔。\n\n类路径所列出的目录和归档文件是搜寻类的起始点。\n\n编译器定位文件比虚拟机复杂的多。如果引用一个类，而没有指出这个类所爱的包，那么编译器将首先查找包含着这个类的包，并查询所有的import指令，确定其中是否包含被引用的类。\n\n\n4.8.1 设置类路径\n最好采用-classpath（或者-cp）选项指定类路径。\n整个指令应该书写在一行中。将这样一个长的命令行放在一个shell脚本或者一个批处理文件中是一个不错的主意。\n利用 -dasspath 选项设置类路径是首选的方法， 也可以通过设置 CLASSPATH 环境变量 完成这个操作。\n\n4.9文档注释\n如果在源代码中添加以专用的定界符 /** 开始的注释， 那么可以很容易地生成一个看上 去具有专业水准的文档。这是一种很好的方式， 因为这种方式可以将代码与注释保存在一个 地方。如果将文档存人一个独立的文件中， 就有可能会随着时间的推移， 出现代码和注释不 一致的问题。 然而， 由于文档注释与源代码在同一个文件中， 在修改源代码的同时， 重新运 行 javadoc 就可以轻而易举地保持两者的一致性。\n\n4.9.1 注释的插入\n应该编写注释的部分：\n包\n共有类与接口\n共有的和受保护的构造器以及方法\n共有的和受保护的域\n\n\n注释应该放置在所描述的特性前面，每个/***…..*/文档注释在标记之后紧跟着“自由格式文本”，标记以@开始，如@author,@param。\n自由格式文本的第一句应该是一个概要性的句子，javadoc实用程序将自动得将这些句子抽取出来形成概要页。\n在自由格式文本中，可以使用HTML修饰符。\n\n4.9.2 类注释\n类注释必须放在import语句之后，类定义之前。\n\n4.9.3 方法注释\n每一个方法注释必须放在所描述方法之前。除了通用的标记之外，还可以使用下面的标记：\n\n@param 变量描述\n这个标记将对当前方法的“ param” (参数)部分添加一个条目。这个描述可以占据多\n行， 并可以使用 HTML 标记。一个方法的所有 @param 标记必须放在一起。\n\nreturn 描述\n这个标记将对当前方法添加“ return” (返回)部分。这个描述可以跨越多行， 并可以\n使用 HTML 标记。\n\nthrows类描述\n这个标记将添加一个注释， 用于表示这个方法有可能抛出异常。\n\n\n\n\n4.9.4 域注释\n只需要对公有域（通常是指静态变量）建立文档。\n\n4.9.5 通用注释下面的标记可以用在类文档的注释中：\n\neauthor 姓名\n这个标记将产生一个 ** author” ( 作者)条目。可以使用多个 @aUthor 标记， 每个 @\nauthor 标记对应一个作者\n\n©version\n这个标记将产生一个“ version ”(版本)条目。 这里的文本可以是对当前版本的任何描\n述。\n\n\n下面的标记可以用于所有的文档注释中：\n\n@sinee文本\n这个标记将产生一个“ since” (始于)条目。这里的 text 可以是对引人特性的版本描 述 例如 ©since version 1.7.10。\n\n@deprecated\n这个标记将对类、方法或变量添加一个不再使用的注释。 文本中给出了取代的建议。 例如，\n@deprecated Use  setVIsible(true)  instead\n通过 @see 和 @link 标记， 可以使用超级链接， 链接到 javadoc 文档的相关部分或外\n部文档。\n\nsee引用\n这个标记将在“ see also” 部分增加一个超级链接。它可以用于类中， 也可以用于方 法中。 这里的引用可以选择下列情形之一:\npackage, class#feature label\n label/a&gt;\n“Text”\n第一种情况是最常见的。 只要提供类、方法或变量的名字，javadoc 就在文档中插入 一个超链接。 例如， @see com.horstraann.corejava.Employee#raiseSalary(double)\n建立一个链接到 com.horstmann.corejava.Employee 类的 raiseSalary(double) 方法的超 链接。 可以省略包名， 甚至把包名和类名都省去， 此时， 链接将定位于当前包或当前类。\n如果 @see 标记后面有一个 &lt; 字符， 就需要指定一个超链接。\n如果 @see 标记后面有一个双引号(“)字符， 文本就会显示在 “ see also” 部分。\n\n如果愿意的话， 还可以在注释中的任何位置放置指向其他类或方法的超级链接， 以及\n插人一个专用的标记， 例如，\n{@}ink package.class#ifeature label} \n这里的特性描述规则与 @see 标记规则一样。\n\n\n4.9.6 包域概述注释\n\n要想产生包注释， 就需要在每一个包目录中添加一个单独的文件。可以 有如下两个选择:\n提供一个以 package.html 命名的 HTML 文件。在标记 … 之间的所有 文本都会被抽取出来。\n提供一个以 package-info.java 命名的 Java 文件。 这个文件必须包含一个初始的以 /** 和 */ 界定的 Javadoc 注释， 跟随在一个包语句之后。它不应该包含更多的代码或注释。\n还可以为所有的源文件提供一个概述性的注释。 这个注释将被放置在一个名为 overview, html 的文件中， 这个文件位于包含所有源文件的父目录中。标记 …  2间的所 有文本将被抽取出来。 当用户从导航栏中选择“ Overview ” 时， 就会显示出这些注释内容。\n\n\n\n4.9.7 注释的抽取\n可以使用多种形式的命令行选项对 javadoc 程序进行调整。 \n-version 选项在文档中包含 @author 和 @version 标记 (默认情况下， 这些标记会被省 略)。另一个很有用的选项是-link, 用来为标准类添加超链接。\n\n4.10类设计技巧使设计出来的类更具有 OOP 的专业水准的技巧：\n\n一定要保证数据私有\n绝对不要破坏封装性，数据的表现形式很可能会发生改变，但是它们的使用方式不会经常改变。\n\n一定要对数据初始化\njava不会对局部变量进行初始化，但会对对象的实例域进行初始化，最好不要依赖于系统的默认值，应该显式地初始化所有的数据。\n\n不要再类中使用过多的基本类型\n用其他的类代替多个相关的基本类型的使用。\n\n不是所有的域都需要独立的域访问器和域更改器\n\n将职责过多的类进行分解\n\n类名和方法名要能够体现它们的职责\n\n优先使用不可变的类\n\n\n第五章 继承5.1 类，超类和子类\n“is-a”关系是继承的一个明显特征\n在Java中，所有继承都是公有继承，没有c++中的私有继承和保护继承\n\n5.1.1 定义子类\n关键字extends表示继承\n\n下面由继承Employee类来定义Manager类的格式：\npublic class Manager Employee&#123;...//添加方法与域，例如：private double bonus;... public void setbonus(double bonus )&#123; this.bonus = bonus;&#125;&#125;\n\n\n\n\n再通过拓展定义子类的时候，仅需要指出子类和超类的不同指出。因此在设计类的时候，应该将通用的方法放在超类中，而将具有特殊用途的方法放在子类中。\n\n\n5.1.2 覆盖方法\n```javapublic double getSalary(){  return salary + bonus;//不能工作}  ==问题在于Managerer类的getSalary方法不能直接地访问超类的私有域,也就是说尽管每个Manager对象都有一个名为salary的域,但在Manager类的getSalary方法中并不能够直接地访问salary域,只有Employee类的方法才能够访问私有部分, 如果 Manager 类的方法一定要访问私有域， 就必须借助于公有的接口， Employee 类中的 公有方法 getSalary 正是这样一个接口。- 在子类中可以增加域,增加方法或者覆盖类的方法,然而绝对不能删除继承的任何域和方法.#### 5.1.3 子类构造器```javapublic Manager(String name,double salary,int year,int day)&#123;  super (name,salary,year,month,day);  bonus = 0;&#125;\n\n\n这里的关键字super有着不一样的含义，语句super(n,s,year,month,day)是”调用超类Employee中含有n，s，year，month和day参数的构造器“的简写模式。\n\n\n使用super调用构造器的语句必须是子类构造器的第一条语句。\n\n\nthis关键字的两个用途：\n\n一是引用隐式参数\n二是带哦用该类的其他构造器\n\n对比之下，super也有两个用途：\n\n一是调用超类的方法\n二是调用超类的构造器\n\n注意点：在调用构造器的时候， 这两个关键字的使用方式很相似。调用构造器的语句只能作为另 一个构造器的第一条语句出现。构造参数既可以传递给本类(this) 的其他构造器，也可 以传递给超类(super) 的构造器。\n\n\n一个对象变量可以指示多种实际类型的现象被称为==多态==\n在运行时能够自动地选择调用哪个方法的现象被称为动态绑定。\n\n5.1.4 继承层次\n继承并不只限于一个层次\n由一个公共超类派生出来的所有类的集合被称为继承层次\n在继承层次中，从某个特定的类到其祖先的路径被称为该累的继承链\n一个祖先类可以拥有多个子孙继承链\njava不支持多继承\n\n\n5.1.5 多态\n判断是否应该设计成继承关系的简单规则，就是”is-a“guize，它表明子类的每个对象也是超类的对象。例如，每个经理都是雇员。\n\n”is-a“规则的另一种表述法是置换法则，它表明程序中出现超类对象的任何地方都可以用子类对象替换。\n例如，将一个子类对象赋值给超类对象\nEmployee e:e = new Employee(...);e = new Manager(...);\n对象变量是多态的，存在一个变量即可以同时引用父子类的对象\n\n在JAVA中，子类数组的引用可以转换成超类数组的引用，而不需要采用强制类型转换\n\n\n5.1.6 理解方法调用\n调用过程的详细描述\n\n编译器查看对象的声明类型和方法名\n\n编译器将查看调用方法时提供的参数类型\n\n调用x.f(param)，在列举完类中所有名为f 的方法之后，其中存在一个与提供的参数类型完全匹配的，就选择调用这个方法，这个过程被称为重载解析。\n\n\n如果没有找到一个与参数类型相匹配的方法，或者发现经过类型转换之后有多个方法与只匹配，就会报错。\n\n至此，编译器已获得需要调用的方法名字和参数类型\n\n\n\n如果是private方法，static方法，final方法或者构造器，那么编译器将可以准确的知道该调用哪个方法，我们将这种调用方式成为静态绑定。\n\n当程序运行时，并且采用动态绑定调用方法时，虚拟机一定调用与x所引用对象的实际类型最合适的那个类的方法。\n\n动态绑定由一个非常重要的特性，就是无需对现存的代码进行修改，就可以对程序进行拓展。\n\n\n\n7.1.7 阻止继承：final类和方法\n不允许拓展的类被称为final类。例如，人民希望阻止定义Excutive类的子类，就可以在定义这个类的时候使用final修饰符声明。\n将方法和类声明为final的主要目的是：确保他们不会在子类中改变语义。\n\n5.2 所有类的超类5.3 泛型数组列表5.4 对象包装器与自动装箱5.5 参数数量可变的方法5.6 枚举类5.7 反射5.8 继承的设计技巧第六章 接口，lambda表达式与内部类\n待更……\n\n","categories":["技术","笔记"],"tags":["java"]},{"title":"《MySQL必知必会》拆书稿","url":"/2021/11/03/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E6%8B%86%E4%B9%A6%E7%A8%BF/","content":"\n共三十章，211面内容有待精简持续更新、\n\n第1章 了解SQL1.1  数据库基础1.1.1  什么是数据库\n数据库是一个以某种 有组织的方式存储的数据集合。\n数据库不同于日常使用的数据库软件（DBMS 数据库管理系统），数据库是通过DBMS创建和操纵的容器。数据库可以是保存在硬设备上的文件，但也可以不是。\n\n1.1.2  表\n表是一种结构化的文件，可用 来存储某种特定类型的数据。表可以保存顾客清单、产品目录，或者其 他信息清单。\n存储在表中的数据是一种类型的数据或一个清单，决不能将归属于不同类型的数据储存在一起。\n数据库中的每个表都有一个名字，用来标识自己。此名字是唯一的， 这表示数据库中没有其他表具有相同的名字。\n虽然在相同数据库中不能两次使用相同的表名， 但在不同的数据库中却可以使用相同的表名。\n模式(schema) ：关于数据库和表的布局及特性的信息。模式可以用来描述数据库中特定的表以及 整个数据库(和其中表的关系)。\n\n1.1.3  列和数据类型\n表由列组成。列中存储着表中某部分的信息。列(column)： 表中的一个字段。所有表都是由一个或多个列组成的。\n\n理解列的最好办法是将数据库表想象为一个网格。网格中每一列存 储着一条特定的信息。\n\n数据库中每个列都有相应的数据类型。数据类型定义列可以存储的数据种类。\n\n数据类型限制可存储在列中的数据种类(例如，防止在数值字段中 录入字符值)。数据类型还帮助正确地排序数据，并在优化磁盘使用方面起重要的作用。因此，在创建表时必须对数据类型给予特别的关注。\n1.1.4  行\n表中的数据是按行存储的，所保存的每个记录存储在自己的行内。如果将表想象为网格，网格中垂直的列为表列，水平行为表行。\n\n用户在提到行(row)时称其为 数据库记录(record)。在很大程度上，这两个术语是可以互相 替代的，但从技术上说，行才是正确的术语。\n1.1.5  主键\n主键(primary key)1一一列(或一组列)，其值能够唯一区分表 中每个行。表中每一行都应该有可以唯一标识自己的一列(或一组列)。\n\n唯一标识表中每行的这个列(或这组列)称为主键。主键用来表示 一个特定的行。没有主键，更新或删除表中特定行很困难，因为没有安 全的方法保证只涉及相关的行。\n\n表中的任何列都可以作为主键，只要它满足以下条件:\n\n任意两行都不具有相同的主键值;\n每个行都必须具有一个主键值(主键列不允许NULL值)。\n\n\n主键值规则（本身强制的要求）\n\n主键通常定义在表的一列上，但这并不是必需的，也可以一起使用多个列作为主键。\n在使用多列作为主键时，上述条件必须应用到构成主 键的所有列，所有列值的组合必须是唯一的(但单个列的值可以不唯一)。\n\n\n使用主键的好习惯：\n\n不更新主键列中的值;\n不重用主键列的值;\n不在主键列中使用可能会更改的值。\n\n\n\n1.2  什么是SQL\nSQL(发音为字母S-Q-L或sequel)是结构化查询语言(Structured Query Language)的缩写。SQL是一种专门用来与数据库通信的语言。\nSQL有如下的优点：\nSQL不是某个特定数据库供应商专有的语言。几乎所有重要的DBMS都支持SQL，所以，学习此语言使你几乎能与所有数据库打交道。\nSQL简单易学。它的语句全都是由描述性很强的英语单词组成， 而且这些单词的数目不多。\nSQL尽管看上去很简单，但它实际上是一种强有力的语言，灵活 使用其语言元素，可以进行非常复杂和高级的数据库操作。\n\n\n\n1.3  动手实践1.4  小结第2章 MySQL简介2.1  什么是MySQL\n数据的所有存储、 检索、管理和处理实际上是由数据库软件——DBMS(数据库管理系统) 完成的。MySQL是一种DBMS，即它是一种数据库软件。\nMySQL广泛应用的原因：\n成本低\n性能好\n可信赖\n简单\n\n\n\n2.1.1  客户机—服务器软件\nDBMS的两种类型\n\n一类为基于共享文件系统的DBMS\n\n另一类为基于客户机——服务器的DBMS\nMySQL，Oracle，Microsoft SQL Server都属于后者。\n\n\n\n客户机—服务器应用分为两个不同的部分：\n\n服务器部分是负责所有数据访问和处理的一个软件。这个软件运行在称为数据库服务器的计算机上。与数据文件打交道的只有服务器软件。关于数据、数据添加、删除和数据更新的所有请求都由服务器软件完成。\n客户机是与用户打交道的软件。\n\n\n事实上，多数网络的建立使用户不具有对数据的访问权，甚至不 具有对存储数据的驱动器的访问权。\n\n\n\n2.1.2  MySQL版本\nMySQL 4.1对MySQL函数库引入了重要更改，本书是为使用此版本或更高版本而撰写的。\n\n2.2  MySQL工具\n每个MySQL安装都有一个名为mysql的简单命令行实用程序。这个实用程序没有下拉菜单、流行的用户界面、鼠标支持或任何类似的东西。\n\n2.2.1 mysql命令行实用程序\n如果仅输入mysql，可能会出现一个错误 消息。因为可能需要安全证书，或者是因为MySQL没有运行 在本地或默认端口上。\n\nmysql接受你可以(和可能需要)使用 的一组命令行参数。\n\n具体的版本和连接信息可能不同，但都可以使用这个实用程序。请注意:\n\n命令输入在mysql&gt;之后;\n\n命令用;或\\g结束，换句话说，仅按Enter不执行命令;\n\n输入help或\\h获得帮助，也可以输入更多的文本获得特定命令的帮助(如，输入help select获得使用SELECT语句的帮助);\n\n输入quit或exit退出命令行实用程序。\n==mysql命令行实用程序是使用最多的实用程序之一，它对于快速测试和执行脚本非常有价值。==\n\n\n\n\n2.2.2  MySQL Adminis-trator\nMySQL Administrator(MySQL管理器)是一个图形交互客户机，用来简化MySQL服务器的管理。\n\nMySQL Administrator提示输入服务器和登录信息(并且允许你保存 服务器定义供以后选择)，然后显示允许选择不同视图的图标。其中:\n\n Server Information(服务器信息)显示客户机和被连接的服务器的状态和版本信息;\n Service Control(服务控制)允许停止和启动MySQL以及指定服务器特性;\n User Administration(用户管理)用来定义MySQL用户、登录和权限;\n Catalogs(目录)列出可用的数据库并允许创建数据库和表。\n\n\n\n2.2.3  MySQL Query Browser\nMySQL Query Browser为一个图形交互客户机，用来编写和执行 MySQL命令。\n\nMySQL Query Browser要求输入服务器和登录信息(在MySQL Query Browser和MySQL Administrator之间共享保存的定义)，然后显示应用界面。注意下面几点：\n\n输入MySQL命令到屏幕顶上的窗口中。在输入语句后，单击 Execute按钮把它提交给MySQL处理。\n\n结果(如果有)显示在屏幕左边的大区域网格中。\n\n多条语句和结果显示在它们自己的标签中，并且允许快速切换。屏幕右边是一个标签，它列出所有可能的数据源(这里称为大纲)，展开任一数据源查看它的表，展开任一个表查看它的列。 你还可以选择表和列让MySQL Query Browser为你编写MySQL语句。\n\nSchemata(大纲)标签的右边是一个History(历史)标签，它保持MySQL语句的执行历史。在需要测试不同版本的MySQL语句时，它非常有用。\n\n关于MySQL语法、函数等的帮助可在屏幕右下角得到。\n\n\n\n\n\n2.3  小结第3章 使用MySQL3.1  连接\nMySQL与所有的客户机-服务器一样,要求在能执行命令之前登录到DBMS\n登录名可以与网络登录名不同,MySQL 在内部保存自己的用户列表,并且把每个用户与用户权限关联起来\n连接到MySQL,需要一下信息:\n主机名(计算机名)\n端口\n一个合法的用户名\n用户口令\n\n\n\n3.2  选择数据库3.3  了解数据库和表3.4  小结第4章 检索数据4.1 SELECT语句4.2 检索单个列4.3 检索多个列4.4 检索所有列4.5 检索不同的行4.6 限制结果4.7 使用完全限定的表名4.8 小结第5章 排序检索数据5.1 排序数据5.2 按多个列排序5.3 指定排序方向5.4 小结第6章 过滤数据6.1 使用WHERE子句6.2 WHERE子句操作符6.2.1 检查单个值6.2.2 不匹配检查6.2.3 范围值检查6.2.4 空值检查6.3 小结第7章 数据过滤…………………….. 407.1 组合WHERE子句 ……………….. 407.1.1  AND操作符 ……………. 407.1.2  OR操作符 ……………… 417.1.3  计算次序 ……………… 42","categories":["技术","拆书稿","悦读","拆书稿"],"tags":["MySQL","数据库","SQL"]},{"title":"一周一本","url":"/2021/11/02/%E4%B8%80%E5%91%A8%E4%B8%80%E6%9C%AC/","content":"\nA book a week keeps games away~\n（╮(￣▽￣)╭）农药玩家手动滑稽\n看了油管Up John Fish的视频，又看了看躺在收藏夹里吃灰的伙计们，遂打算一周看完一本清清库存\n这小伙子说多利用碎片化的空闲时间，也应了鲁迅先生的海绵之说，是个好技巧\n看自己能坚持多久吧\n\n《被讨厌的勇气》\n共计10.2万字\n\n\n\n复读指数：⭐️⭐️⭐️⭐️\n上周还欠了“一夜半”没看完，这周补完\n采用青年和哲人地对话引导读者思考，传达阿德勒心理学的核心点，看起来不枯燥，会觉得自己仿佛就站在那个小房间里，看着他俩交流，甚至能想象的到那小伙子挠头搔耳，苦苦思鸣的样子，我看着看着发现，这哪里是“他”啊，这他喵的分明就是我啊。\n这本书给了我很多关于生活哲学，亲密关系，人际关系，自我认知等方面新的认识，与生俱来的一些“人性”或许是一种羁绊，从小到大接受的教育体系里都讲究因果逻辑，或许自己就默认觉得这才正确的，在某些方面这也许是一种偏见……\n细看下来某些地方还不够严密，给人一种唯心的感觉，但却是本好的启发书，也是一本不错的生活指导手册，值得复读。\n\n《虚拟现实：沉浸于VR梦境》\n共计27.1万字\n\n\n阅读中……\n","categories":["悦读","一周一本"],"tags":["阿德勒","勇气心理学","自我启发","VR","metauniverse","AR","MR"]},{"title":"优雅永不过时","url":"/2021/11/05/%E4%BC%98%E9%9B%85%E6%B0%B8%E4%B8%8D%E8%BF%87%E6%97%B6/","content":"给MacBook扩容换电池，见识到了其优雅紧凑的布局：\n\n还有这“性感”的翘臀\n\nSHP9500，有着硬朗，中正的外观个性，不错的卡扣阻尼，质感不错\n\n\n钟爱的一组软卡抄，素雅的外观配上磨砂质感，抚摸间仿佛沁着花香\n\n","categories":["设计美学","工业品"],"tags":["工业品","优雅设计","简而美"]},{"title":"林湾村流着哈喇子的哈巴狗在啃骨头","url":"/2021/11/02/%E6%9E%97%E6%B9%BE%E6%9D%91%E6%B5%81%E7%9D%80%E5%93%88%E5%96%87%E5%AD%90%E7%9A%84%E5%93%88%E5%B7%B4%E7%8B%97/","content":"\n记录那些细碎时光\n\n哎哟，大灰，你这蓝猫胖子镜头感不错啊\n“别瞪了，别瞪了，快瞎了，姐姐饶命~” 拍完快逃\n桌面清理大师的多巴胺飙升时刻，点名表扬小米台灯，还能再漂亮点吗？\n“咕噜咕噜，太饿了，我先喝点电”我说Mac咱充电这么慢（传统艺能(￣.￣)），原来猫着个偷电贼！\n\n猫猫祟祟，“喂！人类，你瞅啥？”\n建设路猫咖的小白，睡得好香甜，看起来好乖，做美梦居然不流口水   ￣▽￣\nCyberpunk Rainbow Bridge. 欢迎登录午夜飞艇\n租间的“拼多多”墙面，9块9我拼出了个新太阳系，这么多球可踢，这宇航员真幸福\n解释一下，隔壁那个“平行宇宙”是价值四十大洋的墙布，装了个大月亮和宿醉的阿姆斯朗，“思乡嘛人之常情~”。\n\n\n晒着阳光浴打盹的花大爷\n水の鄙视链：怡宝：“您好水，请上座。” \n农夫山泉：“你才水呢，我是大自然的馈赠！”\n\n这是我住的宿舍？？？不知道还以为是汤臣一品呢！\n分手桥相当漂亮的对称美，像是侧卧的虹桥\n\n","categories":["生活点滴","林湾村"],"tags":["林湾村","回忆"]},{"title":"梦梦向导带你逛","url":"/2021/11/01/%E6%A2%A6%E6%A2%A6%E5%90%91%E5%AF%BC%E5%B8%A6%E4%BD%A0%E9%80%9B/","content":"小锅锅，小姐姐好, 沃是小梦，欢迎来到 Nico的博客空间 ~先来自沃介绍一下嘛\n\n(甩鞭噘嘴)\n\n沃可是来自十万大山的万毒窟圣女，心狠手辣（bushi）的湘西美女，不要随便惹沃哈！\n\n（傲娇~）\n\n扣恨那毒王八，让堂堂本圣女沦落到打工银滴身份\n\n”呜呜呜~“\n\n那果大蜗牛咱啷个贵！医药费好难攒啊！\n\n哒—哒—哒 —哒…\n”嘘，老板要来啦，要干活咯“ \n\n沃是这个网站滴 管理员 ，这个博客主要是记录俺老板滴生活和学习用滴（真无聊），这是  网站地图 ，啷~ 你点一下瞅瞅咯～\n\n诶，到点了，下班咯～下班咯\n小锅锅/小姐姐，干饭嘛？你请客（眨巴嘟嘴） \n\n\n"},{"title":"设计网站集锦","url":"/2021/11/02/%E6%BC%82%E4%BA%AE%E8%AE%BE%E8%AE%A1/","content":"\n一大波资源正在来袭\n\n\n直线一个日本的网站设计赏析平台\n\nDribbleUI分享网站\n\nBehance比Drbble更全面，支持英文关键字搜索\n\nlogopond国外优秀logo分享平台\n\ninstant logo提供各大公司logo的矢量图下载\n\nlapa精美的landing page收集网站\n\nawwwards展示卓越前沿的web设计，打分评价\n\n\n","categories":["设计美学","资源素材"],"tags":["设计资源网站","UI设计"]}]