[{"title":"MySQL语法第一弹","url":"/2021/11/01/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%B8%80%E5%BC%B9/","content":"\n根据老杜MySQL教学视频整理\n\n1、sql、DB、DBMS分别是什么，他们之间的关系？  DB:      DataBase（数据库，数据库实际上在硬盘上以文件的形式存在）\n  DBMS:    DataBase Management System（数据库管理系统，常见的有：MySQL Oracle DB2 Sybase SqlServer…）\n  SQL:    结构化查询语言，是一门标准通用的语言。标准的sql适合于所有的数据库产品。    SQL属于高级语言。只要能看懂英语单词的，写出来的sql语句，可以读懂什么意思。    SQL语句在执行的时候，实际上内部也会先进行编译，然后再执行sql。（sql语句的编译由DBMS完成。）\n  DBMS负责执行sql语句，通过执行sql语句来操作DB当中的数据。  DBMS -(执行)-&gt; SQL -(操作)-&gt; DB\n2、什么是表？\n表：table\n表：table是数据库的基本组成单元，所有的数据都以表格的形式组织，目的是可读性强。\n一个表包括行和列： 行：被称为数据/记录(data) 列：被称为字段(column)\n学号(int)\t姓名(varchar)\t年龄(int)110\t\t\t张三\t\t\t\t20120\t\t\t李四\t\t\t\t21\n\n每一个字段应该包括哪些属性？字段名、数据类型、相关的约束。\n3、学习MySQL主要还是学习通用的SQL语句，那么SQL语句包括增删改查，SQL语句怎么分类呢？ DQL（数据查询语言）: 查询语句，凡是select语句都是DQL。 DML（数据操作语言）：insert delete update，对表当中的数据进行增删改。 DDL（数据定义语言）：create drop alter，对表结构的增删改。 TCL（事务控制语言）：commit提交事务，rollback回滚事务。(TCL中的T是Transaction) DCL（数据控制语言）: grant授权、revoke撤销权限等。\n4、导入数据（后期大家练习的时候使用这个演示的数据）    第一步：登录mysql数据库管理系统        dos命令窗口：            mysql -uroot -p333    第二步：查看有哪些数据库\nshow databases; (这个不是SQL语句，属于MySQL的命令。)\t\t+--------------------+\t\t| Database           |\t\t+--------------------+\t\t| information_schema |\t\t| mysql              |\t\t| performance_schema |\t\t| test               |\t\t+--------------------+\n\n​    第三步：创建属于我们自己的数据库create database bjpowernode; (这个不是SQL语句，属于MySQL的命令。)​    第四步：使用bjpowernode数据​        use bjpowernode; (这个不是SQL语句，属于MySQL的命令。)​    第五步：查看当前使用的数据库中有哪些表？​        show tables; (这个不是SQL语句，属于MySQL的命令。)​    第六步：初始化数据​        mysql&gt; source D:\\course\\05-MySQL\\resources\\bjpowernode.sql​    \n  注意：数据初始化完成之后，有三张表：  +-----------------------+| Tables_in_bjpowernode |+-----------------------+| dept                  || emp                   || salgrade              |+-----------------------+\n5、bjpowernode.sql，这个文件以sql结尾，这样的文件被称为“sql脚本”。什么是sql脚本呢？    当一个文件的扩展名是.sql，并且该文件中编写了大量的sql语句，我们称这样的文件为sql脚本。    注意：直接使用source命令可以执行sql脚本。    sql脚本中的数据量太大的时候，无法打开，请使用source命令完成初始化。\n6、删除数据库：drop database bjpowernode;\n7、查看表结构：\n\t+-----------------------+​\t| Tables_in_bjpowernode |​\t+-----------------------+​\t| dept                  |   (部门表)​\t| emp                   |   (员工表)​\t| salgrade              |   (工资等级表)​\t+-----------------------+\n\nmysql&gt; desc dept;\n+--------+-------------+------+-----+---------+-------+\n| Field  | Type        | Null | Key | Default | Extra |\n+--------+-------------+------+-----+---------+-------+\n| DEPTNO | int(2)      | NO   | PRI | NULL    |       |        部门编号\n| DNAME  | varchar(14) | YES  |     | NULL    |       |        部门名称\n| LOC    | varchar(13) | YES  |     | NULL    |       |        部门位置\n+--------+-------------+------+-----+---------+-------+\n\nmysql&gt; desc emp;\n+----------+-------------+------+-----+---------+-------+\n| Field    | Type        | Null | Key | Default | Extra |\n+----------+-------------+------+-----+---------+-------+\n| EMPNO    | int(4)      | NO   | PRI | NULL    |       |    员工编号\n| ENAME    | varchar(10) | YES  |     | NULL    |       |    员工姓名\n| JOB      | varchar(9)  | YES  |     | NULL    |       |    工作岗位\n| MGR      | int(4)      | YES  |     | NULL    |       |    上级领导编号\n| HIREDATE | date        | YES  |     | NULL    |       |    入职日期\n| SAL      | double(7,2) | YES  |     | NULL    |       |    月薪\n| COMM     | double(7,2) | YES  |     | NULL    |       |    补助/津贴\n| DEPTNO   | int(2)      | YES  |     | NULL    |       |    部门编号\n+----------+-------------+------+-----+---------+-------+\n\n`mysql&gt; desc salgrade;`\n+-------+---------+------+-----+---------+-------+\n| Field | Type    | Null | Key | Default | Extra |\n+-------+---------+------+-----+---------+-------+\n| GRADE | int(11) | YES  |     | NULL    |       |        等级\n| LOSAL | int(11) | YES  |     | NULL    |       |        最低薪资\n| HISAL | int(11) | YES  |     | NULL    |       |        最高薪资\n+-------+---------+------+-----+---------+-------+\n\n8、表中的数据？\nmysql&gt; select * from emp;+-------+--------+-----------+------+------------+---------+---------+--------+| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |+-------+--------+-----------+------+------------+---------+---------+--------+|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 ||  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 ||  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 ||  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 ||  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 ||  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 ||  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 ||  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 ||  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 ||  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 ||  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 ||  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 ||  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 ||  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |+-------+--------+-----------+------+------------+---------+---------+--------+mysql&gt; select * from dept;+--------+------------+----------+| DEPTNO | DNAME      | LOC      |+--------+------------+----------+|     10 | ACCOUNTING | NEW YORK ||     20 | RESEARCH   | DALLAS   ||     30 | SALES      | CHICAGO  ||     40 | OPERATIONS | BOSTON   |+--------+------------+----------+mysql&gt; select * from salgrade;+-------+-------+-------+| GRADE | LOSAL | HISAL |+-------+-------+-------+|     1 |   700 |  1200 ||     2 |  1201 |  1400 ||     3 |  1401 |  2000 ||     4 |  2001 |  3000 ||     5 |  3001 |  9999 |+-------+-------+-------+9、常用命令？mysql&gt; select database(); 查看当前使用的是哪个数据库+-------------+| database()  |+-------------+| bjpowernode |+-------------+mysql&gt; select version(); 查看mysql的版本号。+-----------+| version() |+-----------+| 5.5.36    |+-----------+\\c   命令，结束一条语句。exit 命令，退出mysql。\n\n10、查看创建表的语句：    show create table emp;\n11、简单的查询语句（DQL）\n语法格式：    select 字段名1,字段名2,字段名3,.... from 表名;\n提示：    1、任何一条sql语句以“;”结尾。    2、sql语句不区分大小写。\n查询员工的年薪？（字段可以参与数学运算。）\nselect ename,sal * 12 from emp;\t+--------+----------+\t| ename  | sal * 12 |\t+--------+----------+\t| SMITH  |  9600.00 |\t| ALLEN  | 19200.00 |\t| WARD   | 15000.00 |\t| JONES  | 35700.00 |\t| MARTIN | 15000.00 |\t| BLAKE  | 34200.00 |\t| CLARK  | 29400.00 |\t| SCOTT  | 36000.00 |\t| KING   | 60000.00 |\t| TURNER | 18000.00 |\t| ADAMS  | 13200.00 |\t| JAMES  | 11400.00 |\t| FORD   | 36000.00 |\t| MILLER | 15600.00 |\t+--------+----------+\n\n给查询结果的列重命名？    select ename,sal * 12 as yearsal from emp;\n别名中有中文？\nselect ename,sal * 12 as 年薪 from emp; // 错误\tselect ename,sal * 12 as &#x27;年薪&#x27; from emp;\t+--------+----------+\t| ename  | 年薪        |\t+--------+----------+\t| SMITH  |  9600.00 |\t| ALLEN  | 19200.00 |\t| WARD   | 15000.00 |\t| JONES  | 35700.00 |\t| MARTIN | 15000.00 |\t| BLAKE  | 34200.00 |\t| CLARK  | 29400.00 |\t| SCOTT  | 36000.00 |\t| KING   | 60000.00 |\t| TURNER | 18000.00 |\t| ADAMS  | 13200.00 |\t| JAMES  | 11400.00 |\t| FORD   | 36000.00 |\t| MILLER | 15600.00 |\t+--------+----------+\n\n\n注意：标准sql语句中要求字符串使用单引号括起来。虽然mysql支持双引号，尽量别用。\n\nas关键字可以省略？\nmysql&gt; select empno,ename,sal * 12 yearsal from emp;\t+-------+--------+----------+\t| empno | ename  | yearsal  |\t+-------+--------+----------+\t|  7369 | SMITH  |  9600.00 |\t|  7499 | ALLEN  | 19200.00 |\t|  7521 | WARD   | 15000.00 |\t|  7566 | JONES  | 35700.00 |\t|  7654 | MARTIN | 15000.00 |\t|  7698 | BLAKE  | 34200.00 |\t|  7782 | CLARK  | 29400.00 |\t|  7788 | SCOTT  | 36000.00 |\t|  7839 | KING   | 60000.00 |\t|  7844 | TURNER | 18000.00 |\t|  7876 | ADAMS  | 13200.00 |\t|  7900 | JAMES  | 11400.00 |\t|  7902 | FORD   | 36000.00 |\t|  7934 | MILLER | 15600.00 |\t+-------+--------+----------+\n\n查询所有字段？    select * from emp; // 实际开发中不建议使用*，效率较低。\n12、条件查询。\n语法格式：\t\tselect \t\t\t字段,字段...\t\tfrom\t\t\t表名\t\twhere\t\t\t条件;\n\n执行顺序：先from，然后where，最后select\n查询工资等于5000的员工姓名？    select ename from emp where sal = 5000;    +——-+    | ename |    +——-+    | KING  |    +——-+查询SMITH的工资？    select sal from emp where ename = ‘SMITH’; // 字符串使用单引号括起来。    +——–+    | sal    |    +——–+    | 800.00 |    +——–+找出工资高于3000的员工？    select ename,sal from emp where sal &gt; 3000;\n​    select ename,sal from emp where sal &gt;= 3000;\n​    select ename,sal from emp where sal &lt; 3000;\n​    select ename,sal from emp where sal &lt;= 3000;\n找出工资不等于3000的？    select ename,sal from emp where sal &lt;&gt; 3000;    select ename,sal from emp where sal != 3000;\n找出工资在1100和3000之间的员工，包括1100和3000？    select ename,sal from emp where sal &gt;= 1100 and sal &lt;= 3000;\n​    select ename,sal from emp where sal between 1100 and 3000; // between…and…是闭区间 [1100 ~ 3000]\n​    select ename,sal from emp where sal between 3000 and 1100; // 查询不到任何数据\n​    between and在使用的时候必须左小右大。\n​    between and除了可以使用在数字方面之外，还可以使用在字符串方面。​    select ename from emp where ename between ‘A’ and ‘C’;​    +——-+​    | ename |​    +——-+​    | ALLEN |​    | BLAKE |​    | ADAMS |​    +——-+​    select ename from emp where ename between ‘A’ and ‘D’; // 左闭右开。\n​    找出哪些人津贴为NULL？​        在数据库当中NULL不是一个值，代表什么也没有，为空。​        空不是一个值，不能用等号衡量。​        必须使用 is null或者is not null​        select ename,sal,comm from emp where comm is null;​        +——–+———+——+​        | ename  | sal     | comm |​        +——–+———+——+​        | SMITH  |  800.00 | NULL |​        | JONES  | 2975.00 | NULL |​        | BLAKE  | 2850.00 | NULL |​        | CLARK  | 2450.00 | NULL |​        | SCOTT  | 3000.00 | NULL |​        | KING   | 5000.00 | NULL |​        | ADAMS  | 1100.00 | NULL |​        | JAMES  |  950.00 | NULL |​        | FORD   | 3000.00 | NULL |​        | MILLER | 1300.00 | NULL |​        +——–+———+——+​        select ename,sal,comm from emp where comm = null;​        Empty set (0.00 sec)\n​    找出哪些人津贴不为NULL？​        select ename,sal,comm from emp where comm is not null;​        +——–+———+———+​        | ename  | sal     | comm    |​        +——–+———+———+​        | ALLEN  | 1600.00 |  300.00 |​        | WARD   | 1250.00 |  500.00 |​        | MARTIN | 1250.00 | 1400.00 |​        | TURNER | 1500.00 |    0.00 |​        +——–+———+———+​​    找出哪些人没有津贴？​        select ename,sal,comm from emp where comm is null or comm = 0;​        +——–+———+——+​        | ename  | sal     | comm |​        +——–+———+——+​        | SMITH  |  800.00 | NULL |​        | JONES  | 2975.00 | NULL |​        | BLAKE  | 2850.00 | NULL |​        | CLARK  | 2450.00 | NULL |​        | SCOTT  | 3000.00 | NULL |​        | KING   | 5000.00 | NULL |​        | TURNER | 1500.00 | 0.00 |​        | ADAMS  | 1100.00 | NULL |​        | JAMES  |  950.00 | NULL |​        | FORD   | 3000.00 | NULL |​        | MILLER | 1300.00 | NULL |​        +——–+———+——+​​    找出工作岗位是MANAGER和SALESMAN的员工？​        select ename,job from emp where job = ‘MANAGER’ or job = ‘SALESMAN’;​        +——–+———-+​        | ename  | job      |​        +——–+———-+​        | ALLEN  | SALESMAN |​        | WARD   | SALESMAN |​        | JONES  | MANAGER  |​        | MARTIN | SALESMAN |​        | BLAKE  | MANAGER  |​        | CLARK  | MANAGER  |​        | TURNER | SALESMAN |​        +——–+———-+​​    and和or联合起来用：找出薪资大于1000的并且部门编号是20或30部门的员工。​        select ename,sal,deptno from emp where sal &gt; 1000 and deptno = 20 or deptno = 30; // 错误的​        select ename,sal,deptno from emp where sal &gt; 1000 and (deptno = 20 or deptno = 30); // 正确的。​        注意：当运算符的优先级不确定的时候加小括号。​​    in等同于or：找出工作岗位是MANAGER和SALESMAN的员工？​        select ename,job from emp where job = ‘SALESMAN’ or job = ‘MANAGER’;​        select ename,job from emp where job in(‘SALESMAN’, ‘MANAGER’);\n​        select ename,job from emp where sal in(800, 5000); // in后面的值不是区间，是具体的值。​        +——-+———–+​        | ename | job       |​        +——-+———–+​        | SMITH | CLERK     |​        | KING  | PRESIDENT |​        +——-+———–+​​    not in: 不在这几个值当中。​        select ename,job from emp where sal not in(800, 5000);​​    模糊查询like ?​        找出名字当中含有O的？​            （在模糊查询当中，必须掌握两个特殊的符号，一个是%，一个是_）​            %代表任意多个字符，_代表任意1个字符。​            select ename from emp where ename like ‘%O%’;​            +——-+​            | ename |​            +——-+​            | JONES |​            | SCOTT |​            | FORD  |​            +——-+​        找出名字中第二个字母是A的？​            select ename from emp where ename like ‘A%’;​            +——–+​            | ename  |​            +——–+​            | WARD   |​            | MARTIN |​            | JAMES  |​            +——–+​        找出名字中有下划线的？​            mysql&gt; select * from t_user;​            +——+———-+​            | id   | name     |​            +——+———-+​            |    1 | zhangsan |​            |    2 | lisi     |​            |    3 | WANG_WU  |​            +——+———-+​            select name from t_user where name like ‘%%’;​            +———-+​            | name     |​            +———-+​            | zhangsan |​            | lisi     |​            | WANG_WU  |​            +———-+​            select name from t_user where name like ‘%_%’;​            +———+​            | name    |​            +———+​            | WANG_WU |​            +———+\n​        找出名字中最后一个字母是T的？​            select ename from emp where ename like ‘%T’;​            +——-+​            | ename |​            +——-+​            | SCOTT |​            +——-+\n13、排序（升序、降序）\n按照工资升序，找出员工名和薪资？    select        ename,sal    from        emp    order by        sal;+——–+———+| ename  | sal     |+——–+———+| SMITH  |  800.00 || JAMES  |  950.00 || ADAMS  | 1100.00 || WARD   | 1250.00 || MARTIN | 1250.00 || MILLER | 1300.00 || TURNER | 1500.00 || ALLEN  | 1600.00 || CLARK  | 2450.00 || BLAKE  | 2850.00 || JONES  | 2975.00 || FORD   | 3000.00 || SCOTT  | 3000.00 || KING   | 5000.00 |+——–+———+\n注意：默认是升序。怎么指定升序或者降序呢？asc表示升序，desc表示降序。    select ename , sal from emp order by sal; // 升序    select ename , sal from emp order by sal asc; // 升序    select ename , sal from emp order by sal desc; // 降序。\n按照工资的降序排列，当工资相同的时候再按照名字的升序排列。    select ename,sal from emp order by sal desc;    select ename,sal from emp order by sal desc , ename asc;    注意：越靠前的字段越能起到主导作用。只有当前面的字段无法完成排序的时候，才会启用后面的字段。\n找出工作岗位是SALESMAN的员工，并且要求按照薪资的降序排列。    select        ename,job,sal    from        emp    where        job = ‘SALESMAN’    order by        sal desc;+——–+———-+———+| ename  | job      | sal     |+——–+———-+———+| ALLEN  | SALESMAN | 1600.00 || TURNER | SALESMAN | 1500.00 || WARD   | SALESMAN | 1250.00 || MARTIN | SALESMAN | 1250.00 |+——–+———-+———+\nselect    字段                        3from    表名                        1where    条件                        2order by    ….                        4\norder by是最后执行的。\n14、分组函数？    count 计数    sum 求和    avg 平均值    max 最大值    min 最小值\n记住：所有的分组函数都是对“某一组”数据进行操作的。\n找出工资总和？    select sum(sal) from emp;找出最高工资？    select max(sal) from emp;找出最低工资？    select min(sal) from emp;找出平均工资？    select avg(sal) from emp;找出总人数？    select count(*) from emp;    select count(ename) from emp;\n分组函数一共5个。分组函数还有另一个名字：多行处理函数。多行处理函数的特点：输入多行，最终输出的结果是1行。\n分组函数自动忽略NULL。    select count(comm) from emp;    +————-+    | count(comm) |    +————-+    |           4 |    +————-+\n​    select sum(comm) from emp;​    +———–+​    | sum(comm) |​    +———–+​    |   2200.00 |​    +———–+\n​    select sum(comm) from emp where comm is not null; // 不需要额外添加这个过滤条件。sum函数自动忽略NULL。\n​    找出工资高于平均工资的员工？​        select avg(sal) from emp; // 平均工资​        +————-+​        | avg(sal)    |​        +————-+​        | 2073.214286 |​        +————-+\n​        select ename,sal from emp where sal &gt; avg(sal); //ERROR 1111 (HY000): Invalid use of group function​        思考以上的错误信息：无效的使用了分组函数？​            原因：SQL语句当中有一个语法规则，分组函数不可直接使用在where子句当中。why????​            怎么解释？​                因为group by是在where执行之后才会执行的。​​            select        5​                ..​            from            1​                ..​            where            2​                ..​            group by        3​                ..​            having        4​                ..​            order by        6​                ..\ncount()和count(具体的某个字段)，他们有什么区别？    count():不是统计某个字段中数据的个数，而是统计总记录条数。（和某个字段无关）    count(comm): 表示统计comm字段中不为NULL的数据总数量。\n分组函数也能组合起来用：    select count(*),sum(sal),avg(sal),max(sal),min(sal) from emp;\n​    +———-+———-+————-+———-+———-+​    | count(*) | sum(sal) | avg(sal)    | max(sal) | min(sal) |​    +———-+———-+————-+———-+———-+​    |       14 | 29025.00 | 2073.214286 |  5000.00 |   800.00 |​    +———-+———-+————-+———-+———-+\n找出工资高于平均工资的员工？    第一步：找出平均工资        select avg(sal) from emp;        +————-+        | avg(sal)    |        +————-+        | 2073.214286 |        +————-+    第二步：找出高于平均工资的员工        select ename,sal from emp where sal &gt; 2073.214286;        +——-+———+        | ename | sal     |        +——-+———+        | JONES | 2975.00 |        | BLAKE | 2850.00 |        | CLARK | 2450.00 |        | SCOTT | 3000.00 |        | KING  | 5000.00 |        | FORD  | 3000.00 |        +——-+———+\n​        select ename,sal from emp where sal &gt; (select avg(sal) from emp);\n15、单行处理函数    什么是单行处理函数？        输入一行，输出一行。\n计算每个员工的年薪？\n    select ename,(sal+comm)*12 as yearsal from emp;\n    重点：所有数据库都是这样规定的，只要有NULL参与的运算结果一定是NULL。\n    使用ifnull函数：\n    select ename,(sal+ifnull(comm,0))*12 as yearsal from emp;\n\nifnull() 空处理函数？\n    ifnull(可能为NULL的数据,被当做什么处理) ： 属于单行处理函数。\n    select ename,ifnull(comm,0) as comm from emp;\n    +--------+---------+\n    | ename  | comm    |\n    +--------+---------+\n    | SMITH  |    0.00 |\n    | ALLEN  |  300.00 |\n    | WARD   |  500.00 |\n    | JONES  |    0.00 |\n    | MARTIN | 1400.00 |\n    | BLAKE  |    0.00 |\n    | CLARK  |    0.00 |\n    | SCOTT  |    0.00 |\n    | KING   |    0.00 |\n    | TURNER |    0.00 |\n    | ADAMS  |    0.00 |\n    | JAMES  |    0.00 |\n    | FORD   |    0.00 |\n    | MILLER |    0.00 |\n    +--------+---------+\n\n16、group by 和 having\ngroup by ： 按照某个字段或者某些字段进行分组。having : having是对分组之后的数据进行再次过滤。\n案例：找出每个工作岗位的最高薪资。select max(sal),job from emp group by job;\n+———-+———–+| max(sal) | job       |+———-+———–+|  3000.00 | ANALYST   ||  1300.00 | CLERK     ||  2975.00 | MANAGER   ||  5000.00 | PRESIDENT ||  1600.00 | SALESMAN  |+———-+———–+\n​    \n注意：分组函数一般都会和group by联合使用，这也是为什么它被称为分组函数的原因。并且任何一个分组函数（count sum avg max min）都是在group by语句执行结束之后才会执行的。当一条sql语句没有group by的话，整张表的数据会自成一组。\nselect ename,max(sal),job from emp group by job;以上在mysql当中，查询结果是有的，但是结果没有意义，在Oracle数据库当中会报错。语法错误。Oracle的语法规则比MySQL语法规则严谨。记住一个规则：当一条语句中有group by的话，select后面只能跟分组函数和参与分组的字段。\n每个工作岗位的平均薪资？    select job,avg(sal) from emp group by job;    +———–+————-+    | job       | avg(sal)    |    +———–+————-+    | ANALYST   | 3000.000000 |    | CLERK     | 1037.500000 |    | MANAGER   | 2758.333333 |    | PRESIDENT | 5000.000000 |    | SALESMAN  | 1400.000000 |    +———–+————-+\n多个字段能不能联合起来一块分组？案例：找出每个部门不同工作岗位的最高薪资。    select        deptno,job,max(sal)    from        emp    group by        deptno,job;\n找出每个部门的最高薪资，要求显示薪资大于2900的数据。\n​    第一步：找出每个部门的最高薪资​    select max(sal),deptno from emp group by deptno;​    +———-+——–+​    | max(sal) | deptno |​    +———-+——–+​    |  5000.00 |     10 |​    |  3000.00 |     20 |​    |  2850.00 |     30 |​    +———-+——–+\n​    第二步：找出薪资大于2900​    select max(sal),deptno from emp group by deptno having max(sal) &gt; 2900; // 这种方式效率低。​    +———-+——–+​    | max(sal) | deptno |​    +———-+——–+​    |  5000.00 |     10 |​    |  3000.00 |     20 |​    +———-+——–+\n​    select max(sal),deptno from emp where sal &gt; 2900 group by deptno;  // 效率较高，建议能够使用where过滤的尽量使用where。​    +———-+——–+​    | max(sal) | deptno |​    +———-+——–+​    |  5000.00 |     10 |​    |  3000.00 |     20 |​    +———-+——–+\n找出每个部门的平均薪资，要求显示薪资大于2000的数据。\n第一步：找出每个部门的平均薪资select deptno,avg(sal) from emp group by deptno;+——–+————-+| deptno | avg(sal)    |+——–+————-+|     10 | 2916.666667 ||     20 | 2175.000000 ||     30 | 1566.666667 |+——–+————-+\n第二步：要求显示薪资大于2000的数据select deptno,avg(sal) from emp group by deptno having avg(sal) &gt; 2000;+——–+————-+| deptno | avg(sal)    |+——–+————-+|     10 | 2916.666667 ||     20 | 2175.000000 |+——–+————-+\nwhere后面不能使用分组函数：    select deptno,avg(sal) from emp where avg(sal) &gt; 2000 group by deptno;    // 错误了。    这种情况只能使用having过滤。\n17、总结一个完整的DQL语句怎么写？\nselect        5    ..from            1    ..where            2    ..group by        3    ..having        4    ..order by        6    ..\n  从某张表中查询数据语句的执行顺序：  1.先经过where条件筛选出有价值的数据；  2.group对这些数据进行分组  3.分组之后可以继续使用having再一次筛选  4.挑选出想要的数据  5.对最终的筛选结果进行排序。\n","categories":["技术","笔记"],"tags":["MySQL","数据库","SQL"]},{"title":"MySQL语法第三弹","url":"/2021/11/05/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%B8%89%E5%BC%B9/","content":"","categories":["技术","笔记"],"tags":["MySQL","数据库","SQL"]},{"title":"Sitemap","url":"/2021/11/01/Sitemap/","content":"我吃可爱多长大滴小锅锅，小姐姐，你来看沃哒？\n梦梦衣橱\n分类（categories）：技术（笔记，bug总结…），悦读（观感，推荐…），美学设计（资源，产品…），生活点滴（自勉，感悟，照片音频…）\n\n标签（tags）：Markdown，yaml，MySQL，java se，java web，spring，Mybatis，hexo，github，git，terminal，Linux，Redis….\n\n\n去 关于 跟小梦摸鱼吧"},{"title":"MySQL语法第二弹","url":"/2021/11/05/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%BA%8C%E5%BC%B9/","content":"\n根据老杜MySQL教学视频整理\n\n1、关于查询结果集的去重?\nmysql&gt; select distinct job from emp; // distinct关键字去除重复记录。+-----------+| job       |+-----------+| CLERK     || SALESMAN  || MANAGER   || ANALYST   || PRESIDENT |+-----------+\n\nmysql&gt; select ename,distinct job from emp; \n以上的sql语句是错误的。 记住:\ndistinct只能出现在所有字段的最前面。\nmysql&gt; select distinct deptno,job from emp;+--------+-----------+| deptno | job       |+--------+-----------+|     20 | CLERK     ||     30 | SALESMAN  ||     20 | MANAGER   ||     30 | MANAGER   ||     10 | MANAGER   ||     20 | ANALYST   ||     10 | PRESIDENT ||     30 | CLERK     ||     10 | CLERK     |+--------+-----------+\n   案例:统计岗位的数量?\nselect count(distinct job) from emp;\n  +---------------------+| count(distinct job) |+---------------------+ |5                    |+---------------------+\n  2、连接查询\n  2.1、什么是连接查询? 在实际开发中，大部分的情况下都不是从单表中查询数据，一般都是多张表联合\n查询取出最终的结果。       在实际开发中，一般一个业务都会对应多张表，比如:学生和班级，起码两张表。学生和班级信息存储到一张表中，结果就像上面一样，数据会存在大量的重复，导致数据的冗余。\n2.2、连接查询的分类? 根据语法出现的年代来划分的话，包括:\n\nSQL92(一些老的DBA可能还在使用这种语法。DBA:DataBase Administrator，数据库管理员)\n\nSQL99(比较新的语法)\n\n\n 根据表的连接方式来划分，包括:      1. 内连接:           - 等值连接           - 非等值连接           - 自连接            2. 外连接:                 左外连接(左连接)                 右外连接(右连接)                3 .全连接(这个不讲，很少用!)\n2.3、在表的连接查询方面有一种现象被称为:笛卡尔积现象。(笛卡尔乘积现象)\n笛卡尔积现象:当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询结果条数是两张表记录条数的乘积。\n关于表的别名:select e.ename,d.dname from emp e,dept d;\n表的别名有什么好处?          第一:执行效率高。\n​          第二:可读性好。\n2.4、怎么避免笛卡尔积现象?当然是加条件进行过滤。 思考:避免了笛卡尔积现象，会减少记录的匹配次数吗?\n不会，次数还是56次。只不过显示的是有效记录。\n案例:找出每一个员工的部⻔名称，要求显示员工名和部⻔名。\nselect                 e.ename,d.dname\nfrom where\n​                  emp e , dept d\ne.deptno = d.deptno; //SQL92，以后不用。\n+--------+------------+| ename  | dname      |+--------+------------+| CLARK  | ACCOUNTING || KING   | ACCOUNTING || MILLER | ACCOUNTING || SMITH  | RESEARCH   || JONES  | RESEARCH   || SCOTT  | RESEARCH   || ADAMS  | RESEARCH   || FORD   | RESEARCH   || ALLEN  | SALES      || WARD   | SALES      || MARTIN | SALES      || BLAKE  | SALES      || TURNER | SALES      || JAMES  | SALES      |+--------+------------+\n\n2.5、内连接之等值连接:最大特点是:条件是等量关系。\n案例:查询每个员工的部⻔名称，要求显示员工名和部⻔名。\nSQL92:(太老，不用了) select\nfrom where\nSQL99:(常用的) \nselecte.ename,d.dnameemp e, dept de.deptno = d.deptno;e.ename,d.dname\n\nfrom emp e\njoin dept d\non\ne.deptno = d.deptno;\n\n// inner可以省略的，带着inner目的是可读性好一些。 select\ne.ename,d.dname\n\nfrom emp e\ninner join        dept d\n\non\ne.deptno = d.deptno;\n\n语法:\non\nwhere\n… A\njoin B\n连接条件\n… SQL99语法结构更清晰一些:表的连接条件和后来的where条件分离了。\n+--------+------------+| ename  | dname      |+--------+------------+| CLARK  | ACCOUNTING || KING   | ACCOUNTING || MILLER | ACCOUNTING || SMITH  | RESEARCH   || JONES  | RESEARCH   || SCOTT  | RESEARCH   || ADAMS  | RESEARCH   || FORD   | RESEARCH   || ALLEN  | SALES      || WARD   | SALES      || MARTIN | SALES      || BLAKE  | SALES      || TURNER | SALES      || JAMES  | SALES      |+--------+------------+\n\n2.6、内连接之非等值连接:最大的特点是:连接条件中的关系是非等量关系。\n案例:找出每个员工的工资等级，要求显示员工名、工资、工资等级。\n\nmysql&gt; select ename,sal from emp; e +——–+———+ |ename |sal | +——–+———+\n| SMITH  |  800.00 || ALLEN  | 1600.00 || WARD   | 1250.00 || JONES  | 2975.00 || MARTIN | 1250.00 || BLAKE  | 2850.00 || CLARK  | 2450.00 || SCOTT  | 3000.00 || KING   | 5000.00 || TURNER | 1500.00 || ADAMS  | 1100.00 || JAMES  |  950.00 || FORD   | 3000.00 || MILLER | 1300.00 |+--------+---------+mysql&gt; select * from salgrade; s+-------+-------+-------+| GRADE | LOSAL | HISAL |+-------+-------+-------+\n\n| 1|700|1200|\n\n|  2| 1201| 1400|\n|  3| 1401| 2000|\n|  4| 2001| 3000|\n\n| 5| 3001| 9999| +——-+——-+——-+\nselect        e.ename,e.sal,s.grade\n\nfrom emp e\njoin        salgrade s\n\non\ne.sal between s.losal and s.hisal;\n\n// inner可以省略 select\ne.ename,e.sal,s.grade\n\nfrom emp e\ninner join        salgrade s\n\non\ne.sal between s.losal and s.hisal;\n\n+——–+———+——-+ | ename | sal | grade | +——–+———+——-+ | SMITH | 800.00 | 1| | ALLEN | 1600.00 | 3| |WARD |1250.00| 2| | JONES | 2975.00 | 4| | MARTIN | 1250.00 | 2| | BLAKE | 2850.00 | 4| | CLARK | 2450.00 | 4| | SCOTT | 3000.00 | 4| |KING |5000.00| 5| | TURNER | 1500.00 | 3| | ADAMS | 1100.00 | 1| | JAMES | 950.00 | 1| |FORD |3000.00| 4| | MILLER | 1300.00 | 2| +——–+———+——-+\n2.7、自连接:最大的特点是:一张表看做两张表。自己连接自己。\n案例:找出每个员工的上级领导，要求显示员工名和对应的领导名。\n\nmysql&gt; select empno,ename,mgr from emp; emp a 员工表 +——-+——–+——+ | empno | ename | mgr | +——-+——–+——+\n| 7369 | SMITH | 7902 | | 7499 | ALLEN | 7698 | | 7521|WARD |7698| | 7566 | JONES | 7839 |\n| 7654|MARTIN|7698| | 7698 | BLAKE | 7839 | | 7782 | CLARK | 7839 | | 7788 | SCOTT | 7566 | | 7839|KING |NULL| | 7844|TURNER|7698| | 7876 | ADAMS | 7788 | | 7900 | JAMES | 7698 | | 7902|FORD |7566| | 7934|MILLER|7782| +——-+——–+——+ emp b 领导表 +——-+——–+\n| empno | ename  |+-------+--------+|  7566 | JONES  ||  7698 | BLAKE  ||  7782 | CLARK  ||  7788 | SCOTT  ||  7839 | KING   ||  7902 | FORD   |+-------+--------+\n\n员工的领导编号 = 领导的员工编号 select\na.ename as ‘员工名’,b.ename as ‘领导名’\nfrom emp a\ninner join        emp b\n\non\na.mgr = b.empno;\n\n+——–+——–+ | 员工名 | 领导名 | +——–+——–+ |SMITH |FORD | | ALLEN | BLAKE | |WARD |BLAKE| |JONES |KING | | MARTIN | BLAKE | |BLAKE |KING | |CLARK |KING | | SCOTT | JONES | | TURNER | BLAKE | | ADAMS | SCOTT | | JAMES | BLAKE | |FORD |JONES| | MILLER | CLARK | +——–+——–+\n2.8、外连接?\n什么是外连接，和内连接有什么区别?     内连接:\n\n假设A和B表进行连接，使用内连接的话，凡是A表和B表能够匹配上的 记录查询出来，这就是内连接。\nAB两张表没有主副之分，两张表是平等的。 外连接:\n假设A和B表进行连接，使用外连接的话，AB两张表中有一张表是主 表，一张表是副表，主要查询主表中\n的数据，捎带着查询副表，当副表中的数据没有和主表中的数据匹配 上，副表自动模拟出NULL与之匹配。\n     外连接的分类?          左外连接(左连接):表示左边的这张表是主表。          右外连接(右连接):表示右边的这张表是主表。          左连接有右连接的写法，右连接也会有对应的左连接的写法。案例:找出每个员工的上级领导?(所有员工必须全部查询出来。)\n\nemp a 员工表 +——-+——–+——+ | empno | ename | mgr | +——-+——–+——+ | 7369 | SMITH | 7902 | | 7499 | ALLEN | 7698 | | 7521|WARD |7698| | 7566 | JONES | 7839 | | 7654|MARTIN|7698| | 7698 | BLAKE | 7839 | | 7782 | CLARK | 7839 | | 7788 | SCOTT | 7566 | | 7839|KING |NULL| | 7844|TURNER|7698| | 7876 | ADAMS | 7788 | | 7900 | JAMES | 7698 | | 7902|FORD |7566| | 7934|MILLER|7782| +——-+——–+——+ emp b 领导表 +——-+——–+ | empno | ename | +——-+——–+ | 7566 | JONES | | 7698 | BLAKE | | 7782 | CLARK | | 7788 | SCOTT | | 7839 | KING |\n|  7902 | FORD   |+-------+--------+\n\n内连接:\nselect a.ename ‘员工’, b.ename ‘领导’\nfrom emp a\njoin emp b\non\na.mgr = b.empno;\n\n外连接:(左外连接/左连接) select\na.ename ‘员工’, b.ename ‘领导’\nfrom emp a\nleft join        emp b\n\non\na.mgr = b.empno;\n\n// outer是可以省略的。 select\na.ename ‘员工’, b.ename ‘领导’\nfrom emp a\nleft outer join        emp b\n\non\na.mgr = b.empno;\n\n外连接:(右外连接/右连接) select\na.ename ‘员工’, b.ename ‘领导’\nfrom emp b\nright join        emp a\n\non\na.mgr = b.empno;\n\n// outer可以省略。 select\na.ename ‘员工’, b.ename ‘领导’\nfrom emp b\nright outer join        emp a\n\non\na.mgr = b.empno;\n\n+——–+——-+ |员工 |领导 | +——–+——-+ |SMITH |FORD | | ALLEN | BLAKE | | WARD | BLAKE | |JONES |KING | | MARTIN | BLAKE | |BLAKE |KING | |CLARK |KING | | SCOTT | JONES | |KING |NULL| | TURNER | BLAKE | | ADAMS | SCOTT | | JAMES | BLAKE | | FORD | JONES | | MILLER | CLARK | +——–+——-+\n外连接最重要的特点是:主表的数据无条件的全部查询出来。\n\n案例:找出哪个部⻔没有员工? EMP表\n+——-+——–+———–+——+————+——— +———+——–+ |EMPNO|ENAME |JOB |MGR |HIREDATE |SAL |COMM | DEPTNO | +——-+——–+———–+——+————+——— +———+——–+\n| 7369 | SMITH | CLERK | 7902 | 1980-12-17 | 800.00 | NULL | 20| | 7499 | ALLEN | SALESMAN | 7698 | 1981-02-20 | 1600.00 | 300.00 | 30|\n| 7521 | WARD | SALESMAN | 7698 | 1981-02-22 | 1250.00 | 500.00 | 30| | 7566 | JONES | MANAGER | 7839 | 1981-04-02 | 2975.00 | NULL | 20|\n| 7654 | MARTIN | SALESMAN | 7698 | 1981-09-28 | 1250.00 | 1400.00 | 30| | 7698 | BLAKE | MANAGER | 7839 | 1981-05-01 | 2850.00 | NULL | 30|\n| 7782 | CLARK | MANAGER | 7839 | 1981-06-09 | 2450.00 | NULL | 10| | 7788 | SCOTT | ANALYST | 7566 | 1987-04-19 | 3000.00 | NULL | 20|\n| 7839 | KING | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL | 10| | 7844 | TURNER | SALESMAN | 7698 | 1981-09-08 | 1500.00 | 0.00 | 30|\n| 7876 | ADAMS | CLERK | 7788 | 1987-05-23 | 1100.00 | NULL | 20| | 7900 | JAMES | CLERK | 7698 | 1981-12-03 | 950.00 | NULL\n| 30| | 7902 | FORD | ANALYST | 7566 | 1981-12-03 | 3000.00 | NULL | 20| | 7934 | MILLER | CLERK | 7782 | 1982-01-23 | 1300.00 | NULL | 10| +——-+——–+———–+——+————+——— +———+——–+ DEPT +——–+————+———-+ | DEPTNO | DNAME | LOC | +——–+————+———-+\n\n```|      10 | ACCOUNTING | NEW YORK |\n- ```  |      20 | RESEARCH   | DALLAS   |\n```|      30 | SALES      | CHICAGO  |\n- ```  |      40 | OPERATIONS | BOSTON   |  +--------+------------+----------+\n\nselect d.*\nfrom emp e\nright join        dept d\n\non where\ne.deptno = d.deptnoe.empno is null;+--------+------------+--------+| DEPTNO | DNAME      | LOC    |+--------+------------+--------+|     40 | OPERATIONS | BOSTON |+--------+------------+--------+\n\n2.9、三张表怎么连接查询? 案例:找出每一个员工的部⻔名称以及工资等级。 EMP e +——-+——–+———+——–+ | empno | ename | sal | deptno | +——-+——–+———+——–+ | 7369 | SMITH | 800.00 | 20| | 7499 | ALLEN | 1600.00 | 30| | 7521|WARD |1250.00| 30| | 7566 | JONES | 2975.00 | 20| | 7654 | MARTIN | 1250.00 | 30| | 7698 | BLAKE | 2850.00 | 30| | 7782 | CLARK | 2450.00 | 10| | 7788 | SCOTT | 3000.00 | 20| | 7839|KING |5000.00| 10| | 7844 | TURNER | 1500.00 | 30| | 7876 | ADAMS | 1100.00 | 20| | 7900 | JAMES | 950.00 | 30| | 7902|FORD |3000.00| 20| | 7934 | MILLER | 1300.00 | 10|\n+-------+--------+---------+--------+DEPT d+--------+------------+----------+| DEPTNO | DNAME      | LOC      |+--------+------------+----------+\n\n\n```|      10 | ACCOUNTING | NEW YORK |\n- ```  |      20 | RESEARCH   | DALLAS   |\n```|      30 | SALES      | CHICAGO  |\n- ```  |      40 | OPERATIONS | BOSTON   |  +--------+------------+----------+  SALGRADE s  +-------+-------+-------+\n\n| GRADE | LOSAL | HISAL |+-------+-------+-------+\n|  1|700|1200|\n\n|  2| 1201| 1400|\n\n|  3| 1401| 2000|\n\n|  4| 2001| 3000|\n\n|  5| 3001| 9999| +——-+——-+——-+\n注意，解释一下:\n…. A\njoin B\njoin C\non …\n表示:A表和B表先进行表连接，连接之后A表继续和C表进行连接。 select\ne.ename,d.dname,s.grade\n\nfrom emp e\njoin dept d\n\n\non\njoin on\ne.deptno = d.deptnosalgrade se.sal between s.losal and s.hisal;+--------+------------+-------+| ename  | dname      | grade |+--------+------------+-------+\n\n| SMITH | RESEARCH | ALLEN | SALES |WARD |SALES | JONES | RESEARCH | MARTIN | SALES\n| 1| | 3| | 2| | 4| | 2|\n| BLAKE| CLARK| SCOTT| KING| TURNER| ADAMS| JAMES| FORD\n\n| SALES | 4| | ACCOUNTING | 4| | RESEARCH | 4| | ACCOUNTING | 5| | SALES | 3| | RESEARCH | 1| | SALES | 1| | RESEARCH | 4| | ACCOUNTING | 2|\n| MILLER+--------+------------+-------+案例:找出每一个员工的部⻔名称、工资等级、以及上级领导。\n\nselect e.ename ‘员工’,d.dname,s.grade,e1.ename ‘领导’\nfrom emp e\njoin dept d\non\ne.deptno = d.deptnosalgrade se.sal between s.losal and s.hisal\n\nemp e1 on\ne.mgr = e1.empno;\n\n+——–+————+——-+——-+ | 员工 |dname |grade| 领导 | +——–+————+——-+——-+\njoinonleft join\n\n|SMITH |RESEARCH | | ALLEN | SALES | |WARD |SALES | |JONES |RESEARCH | | MARTIN | SALES | | BLAKE | SALES | | CLARK | ACCOUNTING | | SCOTT | RESEARCH | | KING | ACCOUNTING | | TURNER | SALES | | ADAMS | RESEARCH | | JAMES | SALES | |FORD |RESEARCH | | MILLER | ACCOUNTING | +——–+————+——-+——-+\n3、子查询\n3.1、什么是子查询?子查询都可以出现在哪里? select语句当中嵌套select语句，被嵌套的select语句是子查询。 子查询可以出现在哪里?\n1|FORD | 3|BLAKE| 2|BLAKE| 4|KING | 2|BLAKE| 4|KING | 4|KING | 4|JONES| 5|NULL | 3|BLAKE| 1|SCOTT| 1|BLAKE| 4|JONES| 2|CLARK|\nselect        ..(select).\n\nfrom\n        ..(select).where\n\n..(select).\n3.2、where子句中使用子查询\n案例:找出高于平均薪资的员工信息。 select * from emp where sal &gt; avg(sal); //错误的写法，where后面不能直接 使用分组函数。\n第一步:找出平均薪资\nselect avg(sal) from emp;+-------------+| avg(sal)    |+-------------+| 2073.214286 |\n\n+————-+ 第二步:where过滤\n        select * from emp where sal &gt; 2073.214286;        +-------+-------+-----------+------+------------+---------+------+--------+\n\n|EMPNO|ENAME|JOB |MGR |HIREDATE |SAL | COMM | DEPTNO |\n        +-------+-------+-----------+------+------------+---------+------+--------+\n\n| 7566 | JONES | MANAGER | 7839 | 1981-04-02 | 2975.00 | NULL | 20|\n| 7698 | BLAKE | MANAGER | 7839 | 1981-05-01 | 2850.00 | NULL | 30|\n| 7782 | CLARK | MANAGER | 7839 | 1981-06-09 | 2450.00 | NULL | 10|\n| 7788 | SCOTT | ANALYST | 7566 | 1987-04-19 | 3000.00 | NULL | 20|\n| 7839 | KING | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL | 10|\n| 7902 | FORD | ANALYST | 7566 | 1981-12-03 | 3000.00 | NULL | 20|\n        +-------+-------+-----------+------+------------+---------+------+--------+\n\n第一步和第二步合并:\nselect * from emp where sal &gt; (select avg(sal) from emp); 3.3、from后面嵌套子查询\n案例:找出每个部⻔平均薪水的等级。 第一步:找出每个部⻔平均薪水(按照部⻔编号分组，求sal的平均值)\nselect deptno,avg(sal) as avgsal from emp group by deptno;+--------+-------------+| deptno | avgsal      |+--------+-------------+\n\n\n```|      10 | 2916.666667 |\n- ```  |      20 | 2175.000000 |\n|  30 | 1566.666667 | +——–+————-+ 第二步:将以上的查询结果当做临时表t，让t表和salgrade s表连接，条件是: t.avgsal between s.losal and s.hisal\nselect        t.*,s.grade\n\nfrom\nt join\non\n(select deptno,avg(sal) as avgsal from emp group by deptno)\n\nsalgrade s\nt.avgsal between s.losal and s.hisal;+--------+-------------+-------+| deptno | avgsal      | grade |+--------+-------------+-------+\n\n\n```|      30 | 1566.666667 |\n- ```  |      10 | 2916.666667 |\n```|      20 | 2175.000000 |+——–+————-+——-+\n  案例:找出每个部⻔平均的薪水等级。   第一步:找出每个员工的薪水等级。   select e.ename,e.sal,e.deptno,s.grade from emp e join salgrade s on e.sal between s.losal and s.hisal; +--------+---------+--------+-------+   | ename | sal | deptno | grade | +--------+---------+--------+-------+| SMITH | 800.00 | | ALLEN | 1600.00 | |WARD |1250.00| | JONES | 2975.00 | | MARTIN | 1250.00 | | BLAKE | 2850.00 | | CLARK | 2450.00 | | SCOTT | 3000.00 | |KING |5000.00| | TURNER | 1500.00 | | ADAMS | 1100.00 | | JAMES | 950.00 | |FORD |3000.00| | MILLER | 1300.00 | +--------+---------+--------+-------+ 第二步:基于以上结果，继续按照deptno分组，求grade平均值。 selectfrom\ne.deptno,avg(s.grade)emp e\n3 | 4 | 4 |20| 1| 30| 3| 30| 2| 20| 4| 30| 2| 30| 4| 10| 4| 20| 4| 10| 5| 30| 3| 20| 1| 30| 1| 20| 4| 10| 2|\njoin\n  salgrade s\n\non\n  e.sal between s.losal and s.hisal\n\ngroup by\ne.deptno;\n\n+——–+————–+| deptno | avg(s.grade) |+——–+————–+\n- |  10 |- |  20 |- ```  |      30 |  +--------+--------------+\n\n  3.4、在select后面嵌套子查询。 案例:找出每个员工所在的部⻔名称，要求显示员工名和部⻔名。\n  select        e.ename,d.dname\n\n  from   emp e\n  join   dept d\n  on\n  e.deptno = d.deptno;\n\n  select        e.ename,(select d.dname from dept d where e.deptno =\n\n  d.deptno) as dnamefrom\n\n  emp e;\n  +--------+------------+| ename  | dname      |+--------+------------+| SMITH  | RESEARCH   || ALLEN  | SALES      || WARD   | SALES      || JONES  | RESEARCH   || MARTIN | SALES      || BLAKE  | SALES      || CLARK  | ACCOUNTING || SCOTT  | RESEARCH   || KING   | ACCOUNTING || TURNER | SALES      || ADAMS  | RESEARCH   || JAMES  | SALES      || FORD   | RESEARCH   || MILLER | ACCOUNTING |+--------+------------+\n\n  4、union (可以将查询结果集相加)\n3.6667 |2.8000 |2.5000 |\n\n案例:找出工作岗位是SALESMAN和MANAGER的员工? 第一种:select ename,job from emp where job = ‘MANAGER’ or job = ‘SALESMAN’; 第二种:select ename,job from emp where job in(‘MANAGER’,’SALESMAN’); +——–+———-+ |ename |job | +——–+———-+ | ALLEN | SALESMAN | | WARD | SALESMAN | | JONES | MANAGER | | MARTIN | SALESMAN | | BLAKE | MANAGER | | CLARK | MANAGER | | TURNER | SALESMAN | +——–+———-+ 第三种:union select ename,job from emp where job = ‘MANAGER’ union select ename,job from emp where job = ‘SALESMAN’; +——–+———-+ |ename |job | +——–+———-+ | JONES | MANAGER | | BLAKE | MANAGER | | CLARK | MANAGER | | ALLEN | SALESMAN | | WARD | SALESMAN | | MARTIN | SALESMAN | | TURNER | SALESMAN | +——–+———-+\n两张不相干的表中的数据拼接在一起显示?select ename from empunionselect dname from dept;+------------+| ename      |+------------+| SMITH      || ALLEN      || WARD       || JONES      || MARTIN     || BLAKE      || CLARK      || SCOTT      || KING       || TURNER     || ADAMS      || JAMES      || FORD       || MILLER     || ACCOUNTING || RESEARCH   || SALES      || OPERATIONS |+------------+mysql&gt; select ename,sal from emp    -&gt; union    -&gt; select dname from dept;ERROR 1222 (21000): The used SELECT statements have a differentnumber of columns\n\n5、limit (重点中的重点，以后分⻚查询全靠它了。) 5.1、limit是mysql特有的，其他数据库中没有，不通用。(Oracle中有一个相同的机\n制，叫做rownum)\n5.2、limit取结果集中的部分数据，这时它的作用。\n5.3、语法机制: limit startIndex, length\nstartIndex表示起始位置，从0开始，0表示第一条数据。 length表示取几个\n案例:取出工资前5名的员工(思路:降序取前5个) select ename,sal from emp order by sal desc; 取前5个:\nselect ename,sal from emp order by salselect ename,sal from emp order by sal\n\ndesc limit 0, 5; desc limit 5; 5.4、limit是sql语句最后执行的一个环节:\nselectfromwheregroup byhavingorder bylimit.....................;\n\n5 1\n2 3\n4 6\n5.5、案例:找出工资排名在第4到第9名的员工? select ename,sal from emp order by sal desc limit 3,6; +——–+———+ | ename | sal |\n7\n+--------+---------+| JONES  | 2975.00 || BLAKE  | 2850.00 || CLARK  | 2450.00 || ALLEN  | 1600.00 || TURNER | 1500.00 || MILLER | 1300.00 |+--------+---------+\n\n5.6、通用的标准分⻚sql?\n每⻚显示3条记录: 第1⻚:0, 3 第2⻚:3, 3 第3⻚:6, 3 第4⻚:9, 3 第5⻚:12, 3\n每⻚显示pageSize条记录: 第pageNo⻚:(pageNo - 1) * pageSize, pageSize\npageSize是什么?是每⻚显示多少条记录 pageNo是什么?显示第几⻚\njava代码{ int pageNo = 2; // ⻚码是2\nint pageSize = 10; // 每⻚显示10条 limit (pageNo - 1) * pageSize, pageSize\n} 6、创建表:\n建表语句的语法格式: create table 表名(\n字段名1 数据类型, 字段名2 数据类型, 字段名3 数据类型, ….\n);\n关于MySQL当中字段的数据类型?以下只说常⻅的 int 整数型(java中的int) bigint ⻓整型(java中的long) float 浮点型(java中的float double) char 定⻓字符串(String)\nvarchar 可变⻓字符串(StringBuffer/StringBuilder) date 日期类型 (对应Java中的java.sql.Date\n类型)\nBLOB 二进制大对象(存储图片、视频等流媒体信 息) Binary Large OBject (对应java中的Object)\nCLOB 字符大对象(存储较大文本，比如，可以存储 4G的字符串。) Character Large OBject(对应java中的Object)\n……\nchar和varchar怎么选择? 在实际的开发中，当某个字段中的数据⻓度不发生改变的时候，是定\n⻓的，例如:性别、生日等都是采用char。 当一个字段的数据⻓度不确定，例如:简介、姓名等都是采用\nvarchar。\nBLOB和CLOB类型的使用? 电影表: t_movie\nid(int) name(varchar) playtime(date/ char) haibao(BLOB) history(CLOB)\n                 ----------------------------------------------------------------------------------------\n\n1 蜘蛛侠 2 3\n表名在数据库当中一般建议以:t_或者tbl_开始。\n创建学生表:     学生信息包括:\n\n学号、姓名、性别、班级编号、生日 学号:bigint 姓名:varchar 性别:char\n班级编号:int 生日:char\ncreate table t_student(        no bigint,\n\n);\n7、insert语句插入数据 语法格式:\nname varchar(255),sex char(1),classno varchar(255),birth char(10)\n\ninsert into 表名(字段名1,字段名2,字段名3,….) values(值1,值2,值3,….)\n          要求:字段的数量和值的数量相同，并且数据类型要对应相同。        insert into t_student(no,name,sex,classno,birth)values(1,&#x27;zhangsan&#x27;,&#x27;1&#x27;,&#x27;gaosan1ban&#x27;);        ERROR 1136 (21S01): Column count doesn&#x27;t match value countat row 1        insert into t_student(no,name,sex,classno,birth)values(1,&#x27;zhangsan&#x27;,&#x27;1&#x27;,&#x27;gaosan1ban&#x27;, &#x27;1950-10-12&#x27;);\n\nmysql&gt; select * from t_student; +——+———-+——+————+————+ |no |name |sex |classno |birth | +——+———-+——+————+————+ | 1 | zhangsan | 1 | gaosan1ban | 1950-10-12 | +——+———-+——+————+————+\n        insert into t_student(name,sex,classno,birth,no)values(&#x27;lisi&#x27;,&#x27;1&#x27;,&#x27;gaosan1ban&#x27;, &#x27;1950-10-12&#x27;,2);\n\nmysql&gt; select * from t_student; +——+———-+——+————+————+ |no |name |sex |classno |birth | +——+———-+——+————+————+\n\n```\n    |     1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |\n\n- ```          |     2 | lisi     | 1    | gaosan1ban | 1950-10-12 |          +------+----------+------+------------+------------+\n\ninsert into t_student(name) values(‘wangwu’); // 除name字段之 外，剩下的所有字段自动插入NULL。\nmysql&gt; select * from t_student; +——+———-+——+————+————+ |no |name |sex |classno |birth | +——+———-+——+————+————+\n\n```\n    |     1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |\n\n- ```          |     2 | lisi     | 1    | gaosan1ban | 1950-10-12 |          | NULL | wangwu   | NULL | NULL       | NULL       |          +------+----------+------+------------+------------+\n\ninsert into t_student(no) values(3); mysql&gt; select * from t_student; +——+———-+——+————+————+ |no |name |sex |classno |birth | +——+———-+——+————+————+\n\n```\n    |     1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |\n\n- |  2 | lisi | 1 | gaosan1ban | 1950-10-12 | | NULL | wangwu | NULL | NULL | NULL | | 3|NULL |NULL|NULL | NULL | +------+----------+------+------------+------------+  drop table if exists t_student; // 当这个表存在的话删除。 create table t_student(\n             no bigint,\n             name varchar(255),\n             sex char(1) default 1,\n             classno varchar(255),\n\n8、表的复制 语法:\nbirth char(10)\n);insert into t_student(name) values(&#x27;zhangsan&#x27;); mysql&gt; select * from t_student; +------+----------+------+---------+-------+ |no |name |sex |classno|birth| +------+----------+------+---------+-------+ |NULL|zhangsan|1 |NULL |NULL | +------+----------+------+---------+-------+需要注意的地方: 当一条insert语句执行成功之后，表格当中必然会多一行记录。 即使多的这一行记录当中某些字段是NULL，后期也没有办法在执行 insert语句插入数据了，只能使用update进行更新。// 字段可以省略不写，但是后面的value对数量和顺序都有要求。\n  insert into t_student\n\nvalues(1,’jack’,’0’,’gaosan2ban’,’1986-10-23’);\nmysql&gt; select * from t_student; +------+----------+------+------------+------------+ |no |name |sex |classno |birth | +------+----------+------+------------+------------+ | NULL | zhangsan | 1 | NULL | NULL | | 1 | jack | 0 | gaosan2ban | 1986-10-23 | +------+----------+------+------------+------------+\n  insert into t_student values(1,&#39;jack&#39;,&#39;0&#39;,&#39;gaosan2ban&#39;);\n  ERROR 1136 (21S01): Column count doesn&#39;t match value count\n\nat row 1\n// 一次插入多行数据 insert into t_student\n           (no,name,sex,classno,birth)\n  values\n           (3,&#39;rose&#39;,&#39;1&#39;,&#39;gaosi2ban&#39;,&#39;1952-12-14&#39;),\n\n(4,’laotie’,’1’,’gaosi2ban’,’1955-12-14’);\nmysql&gt; select * from t_student; +------+----------+------+------------+------------+ |no |name |sex |classno |birth | +------+----------+------+------------+------------+create table 表名 as select语句; 将查询结果当做表创建出来。\n| NULL       | NULL       || gaosan2ban | 1986-10-23 || gaosi2ban  | 1952-12-14 |\n| NULL | zhangsan | 1 | 1|jack |0 | 3|rose |1 | 4 | laotie | 1 | gaosi2ban | 1955-12-14 | +------+----------+------+------------+------------+9、将查询结果插入到一张表中? mysql&gt; insert into dept1 select * from dept; mysql&gt; select * from dept1; +--------+------------+----------+ | DEPTNO | DNAME | LOC | +--------+------------+----------+- ```          |      10 | ACCOUNTING | NEW YORK |\n```\n    |      20 | RESEARCH   | DALLAS   |\n\n- ```          |      30 | SALES      | CHICAGO  |\n```\n    |      40 | OPERATIONS | BOSTON   |\n\n- ```          |      10 | ACCOUNTING | NEW YORK |\n```\n    |      20 | RESEARCH   | DALLAS   |\n\n- ```          |      30 | SALES      | CHICAGO  |\n```\n    |      40 | OPERATIONS | BOSTON   |\n    +--------+------------+----------+\n\n10、修改数据:update 语法格式:update 表名 set 字段名1=值1,字段名2=值2... where 条件; 注意:没有条件整张表数据全部更新。案例:将部⻔10的LOC修改为SHANGHAI，将部⻔名称修改为RENSHIBU\n    update dept1 set loc = &#39;SHANGHAI&#39;, dname = &#39;RENSHIBU&#39; where\n\ndeptno = 10;\n\n    mysql&gt; select * from dept1;\n    +--------+------------+----------+\n    | DEPTNO | DNAME      | LOC      |\n    +--------+------------+----------+\n\n- ```  |      10 | RENSHIBU\n```|      20 | RESEARCH\n- |  30 | SALES- ```  |      40 | OPERATIONS | BOSTON   |\n\n| SHANGHAI || DALLAS   || CHICAGO  |\n\n\n```|      10 | RENSHIBU\n- ```  |      20 | RESEARCH\n|  30 | SALES\n\n|      40 | OPERATIONS | BOSTON   |\n+--------+------------+----------+\n更新所有记录update dept1 set loc = &#x27;x&#x27;, dname = &#x27;y&#x27;; mysql&gt; select * from dept1; +--------+-------+------+ |DEPTNO|DNAME|LOC | +--------+-------+------+| 10|y |x | | 20|y |x | | 30|y |x | | 40|y |x | | 10|y |x | | 20|y |x |\n| SHANGHAI |\n| DALLAS   |\n| CHICAGO  |\n| 30|y |x | | 40|y |x | +--------+-------+------+11、删除数据? 语法格式:delete from 表名 where 条件; 注意:没有条件全部删除。删除10部⻔数据? delete from dept1 where deptno = 10;删除所有记录?\n               delete from dept1;\n怎么删除大表中的数据?(重点) truncate table 表名; // 表被截断，不可回滚。永久丢失。删除表? drop table 表名; // 这个通用。drop table if exists 表名; // oracle不支持这种写法。12、对于表结构的修改，这里不讲了，大家使用工具完成即可，因为在实际开发中表一旦 设计好之后，对表结构的修改是很少的，修改表结构就是对之前的设计进行了否定，即使 需要修改表结构，我们也可以直接使用工具操作。修改表结构的语句不会出现在Java代码当 中。出现在java代码当中的sql包括:insert delete update select(这些都是表中的数 据操作。)增删改查有一个术语:CRUD操作 Create(增) Retrieve(检索) Update(修改) Delete(删除)13、约束(Constraint)13.1、什么是约束?常⻅的约束有哪些呢? 在创建表的时候，可以给表的字段添加相应的约束，添加约束的目的是为了保证\n表中数据的\n   合法性、有效性、完整性。\n常⻅的约束有哪些呢? 非空约束(not null):约束的字段不能为NULL 唯一约束(unique):约束的字段不能重复 主键约束(primary key):约束的字段既不能为NULL，也不能重复(简称PK) 没有，目前mysql不支持该约束。外键约束(foreign key):...(简称FK) 检查约束(check):注意Oracle数据库有check约束，但是mysql13.2、非空约束 not null drop table if exists t_user;\n      create table t_user(\n               id int,\n               username varchar(255) not null,\n               password varchar(255)\n      );\n      insert into t_user(id,password) values(1,&#39;123&#39;);\n      ERROR 1364 (HY000): Field &#39;username&#39; doesn&#39;t have a default\nvalue\nvalues(1,&#39;lisi&#39;,&#39;123&#39;);\ninsert into t_user(id,username,password)\n\n\n\n","categories":["技术","笔记"],"tags":["MySQL","数据库","SQL"]},{"title":"Markdown语法","url":"/2021/11/01/Markdown%E8%AF%AD%E6%B3%95/","content":"前言Markdown是一种「轻标记型」纯文本语言，优点有：\n\n纯文本内容，键盘写作简单纯粹\n\n专注创作，不纠葛于排版格式\n\n多平台支持，多格式导出\n\n语法简单，效率很高\n\n\n熟悉它的命令之后，能让你在写作中不必关心内容的格式，尺寸等问题专心地从事内容创造，再搭配上一款优秀的Markdown编辑器能让你键指如飞，畅快写作~\n本文主要介绍Markdown的常用语法以及typora的常用操作\n\n本网站的Markdown渲染采用的是Gihub 的GFM,语法和渲染规则和标准的Markdown稍有出入。\ntypora是一众Markdown编辑器中的飒色美人，界面简洁优雅，功能齐全强大，支持即时渲染技术，所写即所见，还内嵌了mermaid，得益于此，她能帮你画流程图，UML时序图，甘特图，类图……除此之外，还有以下功能：\n\n支持图床配置和贴心的图片路径设计\n搜索，批量替换内容，大纲整理，不在话下\n搭配Onedrive，阿里云盘等网盘轻松实现多端联动\n\n爱她，只需片刻。\n\n内容结构1.Markdown的常用语法2.typora常用操作附录\n\n\n\nMarkdown常用语法斜体，高亮和粗体  代码：\n*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~==高亮==\n\n显示效果：\n\n斜体或_斜体_粗体加粗斜体删除线==高亮==\n\n\nps：本小站高亮渲染出幺蛾子了，客官将就下~\n\n分级标题  第一种写法：\n这是一个一级标题============================这是一个二级标题--------------------------------------------------\n\n第二种写法：\n# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题\n\n编辑器中观察，很简单，一级标题字号最大，依级递减。\n超链接  Markdown 支持两种形式的链接语法： 行内式 和 参考式 两种形式，行内式一般使用较多。\n行内式语法说明：[]里写链接文字，()里写链接地址, ()中的”“中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。[链接文字](链接地址 “链接标题”)’这样的形式。链接地址与链接标题前有一个空格。代码：\n兄弟们！[上任鹅城！](https://www.bilibili.com/video/BV1yt4y1Q7SS?from=search&amp;seid=6918277224816122173&amp;spm_id_from=333.337.0.0)I am [IronMan](https://www.bilibili.com/video/BV12341117rG?from=search&amp;seid=51519159685723851&amp;spm_id_from=333.337.0.0 &quot;野生钢铁侠&quot;)\n\n显示效果：\n兄弟们！上任鹅城！I am IronMan\n参考式\n参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。\n语法说明： \n\n参考式链接分为两部分，文中的写法 [链接文字][链接标记]，\n在文本的任意位置添加[链接标记]:链接地址 “链接标题”\n如果链接文字本身可以做为链接标记，你也可以写成 [链接文字][] \n\n代码：\n我经常去的几个网站[Google][1]、[processon][2]以及[微信读书][3][processon][2]是一个不错的[网站][]。[1]:http://www.google.com &quot;Google&quot;[2]:https://www.processon.com/ &quot;processon&quot;[3]:https://weread.qq.com &quot;微信读书&quot;[网站]:https://www.processon.com/\n\n显示效果：\n\n我经常去的几个网站Google、processon以及微信读书processon是一个不错的网站。\n\n自动链接语法说明：Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱,只要是用&lt;&gt;包起来, Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：\n代码：\n&lt;https://www.zxzj.me&gt;&lt;https://xmsoushu.com/#/&gt;\n\n\n显示效果：\n\nhttps://www.zxzj.mehttps://xmsoushu.com/#/\n\n锚点网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。\n注意： \n\nMarkdown Extra 只支持在标题后插入锚点，其它地方无效。 \nLeanote 编辑器右侧显示效果区域暂时不支持锚点跳转，所以点来点去发现没有跳转不必惊慌，但是你发布成笔记或博文后是支持跳转的。\n\n语法描述: 在你准备跳转到的指定标题后插入锚点标记&#123;#标记&#125;，然后在文档的其它地方写上连接到锚点的链接。\n代码：\n跳转到[目录]&#123;#index&#125;跳转到[目录](#index)\n\n\n&#123;#属于hexo保留的关键字，生成时有bug，这里不做展示\n\n显示效果：\n跳转到目录\n列表无序列表  使用 *，+，- 表示无序列表。\n代码：\n- 无序列表项 一- 无序列表项 二- 无序列表项 三\n\n\n显示效果：\n\n无序列表项 一无序列表项 二无序列表项 三\n\n有序列表有序列表则使用数字接着一个英文句点。\n代码：\n1. 有序列表项 一2. 有序列表项 二3. 有序列表项 三\n\n显示效果：\n\n\n有序列表项 一\n有序列表项 二\n有序列表项 三\n\n\n定义型列表语法说明：定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进(Tab)\n代码：\nMarkdown:    轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）代码块 2:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）        代码块（左侧有八个不可见的空格）\n\n\n\n列表缩进语法说明：\n列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。\n要让列表看起来更漂亮，你可以把内容用固定的缩进整理好（显示效果与代码一致）：\n\n轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！\n那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。\n\n但是如果你懒，那也行：代码：\n*   轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。    那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。     软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ *   那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。     寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。     但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！     悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。\n\n显示效果：\n\n\n轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。  那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。  软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ \n那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。  寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。  但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！  悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。\n\n\n包含段落的列表语法说明：\n列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符（显示效果与代码一致）：\n\n轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！\n那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！\n悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。\n\n如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：\n代码：\n*   轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。    那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。     软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！     那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。     寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。     但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ *   悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。\n\n显示效果：\n\n\n轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。  那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。  软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！   那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。  寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。  但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ \n  悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。\n\n\n包含引用的列表语法说明：\n如果要在列表项目内放进引用，那 &gt; 就需要缩进：\n代码：\n*   阅读的方法:    &gt; 打开书本。    &gt; 打开电灯。\n\n显示效果：\n\n\n阅读的方法:\n\n\n打开书本。打开电灯。\n\n\n引用语法说明：引用需要在被引用的文本前加上&gt;符号。\n代码：\n&gt;这是一个有两段文字的引用,&gt;无意义的占行文字&gt;无意义的占行文字&gt;&gt;无意义的占行文字&gt;无意义的占行文字\n\n显示效果：\n\n这是一个有两段文字的引用,无意义的占行文字无意义的占行文字\n无意义的占行文字无意义的占行文字\n\nMarkdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：\n代码：\n&gt;这是一个有两段文字的引用,无意义的占行文字无意义的占行文字无意义的占行文字无意义的占行文字\n\n显示效果：\n\n这是一个有两段文字的引用,无意义的占行文字无意义的占行文字无意义的占行文字无意义的占行文字\n\n引用的多层嵌套区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：\n代码：\n&gt;&gt;&gt; 请问 Markdwon 怎么用？ - 小白 &gt;&gt; 自己看教程！ - 愤青&gt; 教程在哪？ - 小白\n\n显示效果：\n\n\n\n请问 Markdwon 怎么用？ - 小白\n\n\n\n\n\n自己看教程！ - 愤青\n\n\n\n教程在哪？ - 小白\n\n引用其它要素引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码行/区块等：\n代码：\n&gt; 1.   这是第一行列表项。&gt; 2.   这是第二行列表项。&gt;&gt; 给出一些例子代码：&gt;&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);\n显示效果：\n\n\n  这是第一行列表项。\n  这是第二行列表项。\n\n给出一些例子代码：\nreturn shell_exec(&quot;echo $input | $markdown_script&quot;);\n\n\n包含代码区块的引用语法说明：如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：\n一列表项包含一个列表区块：\n&lt;代码写在这&gt;\n\n一个特殊情况在特殊情况下，项目列表很可能会不小心产生，像是下面这样的写法：\n1986. What a great season.\n\n会显示成：\n\nWhat a great season.\n\n换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠：\n1986\\. What a great season.\n\n会显示成：\n\n1986. What a great season.\n\n插入图像图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。\n语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。\n行内式语法说明：![图片Alt](图片地址 “图片Title”)\n代码：\n洗澡好酥服啊： ![洗澡好酥服啊](https://tva1.sinaimg.cn/large/008i3skNgy1gw0lb9b9ptj30v70u0gnf.jpg &quot;洗澡好酥服啊&quot;)\n\n显示效果：\n洗澡好酥服啊：\n参考式语法说明：\n在文档要插入图片的地方写![图片Alt][标记]\n在文档的最后写上[标记]:图片地址 “Title”\n代码：\n![强颜微笑.jpg][蚩梦][蚩梦]:https://tva1.sinaimg.cn/large/008i3skNgy1gw0lbaftvxj30wu0u0jtp.jpg  &quot;强颜微笑.jpg&quot;\n\n\n\n显示效果：\n\n\n站长同学太菜啦，网站还展示不了以下的「注脚」，「LaTex公式」「各类图」原生效果，有待添加\n\n内容目录  在段落中填写 [TOC] 以显示全文内容的目录结构。\n注脚  语法说明：\n在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。\n注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。\n代码：\n使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote[^Le] 编辑器进行书写。[^1]:Markdown是一种纯文本标记语言[^2]:HyperText Markup Language 超文本标记语言[^Le]:开源笔记平台，支持Markdown和笔记直接发为博文\n\n效果\n\nLaTeX 公式$ 表示行内公式：代码：\n质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。\n\n显示效果：\n$$表示整行公式：\n代码：\n$$\\sum_&#123;i=1&#125;^n a_i=0$$$$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$$$\\sum^&#123;j-1&#125;_&#123;k=0&#125;&#123;\\widehat&#123;\\gamma&#125;_&#123;kj&#125; z_k&#125;$$\n\n显示效果：\n各类图表代码流程图竖向（TD 表示从上到下）\ngraph TD;    A--&gt;B;    A--&gt;C;    B--&gt;D;    D--&gt;E;    D--&gt;F;\n\n横向（LR 表示从左到右）\ngraph LR;\t\tA[方形]--&gt;B(圆角)\t\tB--&gt;C&#123;条件a&#125;\t\tC--&gt;|a=1|D[结果1]\t\tC--&gt;|a=2|E[结果2]\n\n实际场景：\nsequenceDiagram 客户-&gt;&gt;银行柜台: 我要存钱  银行柜台-&gt;&gt;后台: 改一下这个账户数字哦  后台-&gt;&gt;银行柜台: 账户的数字改完了，明天起息  银行柜台-&gt;&gt;客户: 好了，给你回单 ，下一位\n\nUML时序图sequenceDiagram对象A-&gt;&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;&gt;对象A: 我很好(响应)对象A-&gt;&gt;对象B: 你真的好吗？\n\n\n\n还有甘特图（如下），饼图，类图，状态图等等，不一而足。\ntypora内置mermaid 库，能漂亮画出👆🏻这一坨图\n巨图镇场：\n\n学习用typora画各类图表，点击这个教程视频      \n更多语法参考：流程图语法参考\n表格语法说明：\n不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。代码：\n简单方式写表格：\n学号|姓名|分数-|-|-小明|男|75小红|女|79小陆|男|92\n\n原生方式写表格：\n|学号|姓名|分数||-|-|-||小明|男|75||小红|女|79||小陆|男|92|\n\n为表格第二列指定方向：\n产品|价格-|-:Leanote 高级账号|60元/年Leanote 超级账号|120元/年\n\n显示效果：\n简单方式写表格：\n\n\n\n学号\n姓名\n分数\n\n\n\n小明\n男\n75\n\n\n小红\n女\n79\n\n\n小陆\n男\n92\n\n\n原生方式写表格：\n\n\n\n学号\n姓名\n分数\n\n\n\n小明\n男\n75\n\n\n小红\n女\n79\n\n\n小陆\n男\n92\n\n\n为表格第二列指定方向：\n\n\n\n产品\n价格\n\n\n\nLeanote 高级账号\n60元/年\n\n\nLeanote 超级账号\n120元/年\n\n\n分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n代码：\n* * *********- - ----------------------------------------\n\n显示效果都一样：\n\n\n\n\n\n代码对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(Tab), 另一种是利用”`”符号（一般在ESC键下方）包裹代码。\n\n语法说明：\n插入行内代码，即插入一个单词或者一句代码的情况，使用下面这样的形式插入：\n`code`\n\n插入多行代码，可以使用缩进或者三个单撇号,具体看示例。注意： 缩进式插入前方必须有空行\n行内式代码：\nC语言里的函数 `scanf()` 怎么使用？\n\n显示效果：\n\nC语言里的函数 scanf() 怎么使用？\n\n缩进式多行代码缩进 4 个空格或是 1 个制表符\n一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。\n代码：\n    #include &lt;stdio.h&gt;\n    int main(void)\n    &#123;\n        printf(&quot;Hello world\\n&quot;);\n    &#125;\n\n显示效果：\n\n#include &lt;stdio.h&gt;int main(void)&#123;    printf(&quot;Hello world\\n&quot;);&#125;\n\n\n用六个`包裹多行代码代码：\n```#include &lt;stdio.h&gt;int main(void)&#123;    printf(&quot;Hello world\\n&quot;);&#125;```\n显示效果：\n\n#include &lt;stdio.h&gt;int main(void)&#123;    printf(&quot;Hello world\\n&quot;);&#125;\n\nHTML 原始码在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理，例如：\n代码和效果：\n第一个例子：\n&lt;div class=&quot;footer&quot;&gt;   © 2004 Foo Corporation&lt;/div&gt;\n\n\n\n   © 2004 Foo Corporation\n\n\n第二个例子：\n&lt;table&gt;    &lt;tr&gt;        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;        &lt;th&gt;星期一&lt;/th&gt;        &lt;th&gt;星期二&lt;/th&gt;        &lt;th&gt;星期三&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;李强&lt;/td&gt;        &lt;td&gt;张明&lt;/td&gt;        &lt;td&gt;王平&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;\n\n效果：\n\n    \n        值班人员\n        星期一\n        星期二\n        星期三\n    \n    \n        李强\n        张明\n        王平\n    \n\n\n\n\n\n\n\ntypora常用操作常用快捷键文件\n\n\n操作\n键值\n\n\n\n新建\nCtrl+N\n\n\n新建窗口\nCtrl+Shift+N\n\n\n打开\nCtrl+O\n\n\n快速打开\nCtrl+P\n\n\n重新打开关闭的文件\nCtrl+Shift+T\n\n\n保存\nCtrl+S\n\n\n另存为/复制\nCtrl+Shift+S\n\n\n关闭\nCtrl+W\n\n\n编辑\n==新段落输入输入==换行Shift+Enter剪切Ctrl+X复制Ctrl+C粘贴Ctrl+V复制为标记Ctrl+Shift+C粘贴为纯文本Ctrl+Shift+V全选Ctrl+A==选择行/句子==选择行（在表中）Ctrl+L删除行（表中）Ctrl+Shift+Backspace==选择样式范围==选择单元格（在表中）Ctrl+E选择单词 Ctrl+D删除单词 Ctrl+Shift+D跳转到顶部 Ctrl+Home跳转到所选内容Ctrl+J跳到按钮 Ctrl+End 查找 Ctrl+F查找下一个 F3/输入查找上一个 Shift+F3/Shift+Enter 替换 Ctrl+H\n\n功能\n标题1到6 Ctrl+1/2/3/4/5/6段落 Ctrl+0增加标题级别 Ctrl+=降低标题级别 Ctrl+-表格 Ctrl+T代码块 Ctrl+Shift+K数学块 Ctrl+Shift+M引用 Ctrl+Shift+Q 【可自定义样式】有序列表 Ctrl+Shift+[无序列表 Ctrl+Shift+]缩进 Ctrl+[/Tab升级 Ctrl+]/Shift+Tab加粗 Ctrl+B斜体 Ctrl+I下划线 Ctrl+U代码 Ctrl+Shift+删除线 Alt+Shift+5超链接 Ctrl+K图像 Ctrl+Shift+I清除格式 Ctrl+\\\n\n视图\n切换侧栏 Ctrl+Shift+L大纲 Ctrl+Shift+1文章 Ctrl+Shift+2文件树 Ctrl+Shift+3源代码模式 Ctrl+/对焦模式 F8打字机模式 F9切换器全屏 F11实际大小 Ctrl+Shift+0放大 Ctrl+Shift+=缩小 Ctrl+Shift+-在打开的文档之间切换 Ctrl+Tab切换开发工具 Ctrl+Shift+I\n\nWin和Mac系统键位对照\n\n\n\n未尽之处，有待更新…\n本文参考：\n文章一      \n文章二\n文章三\n友情链接：\n下载学习typora(Win&amp;Mac)，请自行前往：typora官网](https://typora.io/)\n想了解更多关于GFM的知识，请参考：GitHub Flavored Markdown Docs\n","categories":["技术","笔记"],"tags":["Markdown","typora","Note-taking"]},{"title":"Hexo语法","url":"/2021/10/31/hello-world/","content":"Welcome to Nico’zone! This is my very first post. If you get any problems when reading ,  you can ask me on  the Comments area or contact me through the email on the home page.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","categories":["技术","博客"],"tags":["hexo","terminal","git"]},{"title":"Win-Mac快捷键对照表","url":"/2021/11/03/Win-Mac%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%AF%B9%E7%85%A7%E8%A1%A8/","content":"Mac 键盘符号说明\n⌘ == Command\n⇧ == Shift\n⇪ == Caps Lock\n⌥ == Option\n⌃ == Control\n↩ == Return/Enter\n⌫ == Delete\n⌦ == 向前删除键（Fn+Delete）\n↑ == 上箭头\n↓ == 下箭头\n← == 左箭头\n→ == 右箭头\n⇞ == Page Up（Fn+↑）\n⇟ == Page Down（Fn+↓）\nHome == Fn + ←\nEnd == Fn + →\n⇥ == 右制表符（Tab键）\n⇤ == 左制表符（Shift+Tab）\n⎋ == Escape (Esc)\n⏏ == 电源开关键\n\nCtrl\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nCtrl + F\nCommand + F\n在当前文件进行文本查找\n\n\nCtrl + R\nCommand + R\n在当前文件进行文本替换\n\n\nCtrl + Z\nCommand + Z\n撤销\n\n\nCtrl + Y\nCommand + Delete\n删除光标所在行 或 删除选中的行\n\n\nCtrl + D\nCommand + D\n复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面\n\n\nCtrl + W\nOption + 方向键上\n递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围\n\n\nCtrl + E\nCommand + E\n显示最近打开的文件记录列表\n\n\nCtrl + N\nCommand + O\n根据输入的 类名 查找类文件\n\n\nCtrl + J\nCommand + J\n插入自定义动态代码模板\n\n\nCtrl + P\nCommand + P\n方法参数提示显示\n\n\nCtrl + U\nCommand + U\n前往当前光标所在的方法的父类的方法 / 接口定义\n\n\nCtrl + B\nCommand + B\n进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击\n\n\nCtrl + /\nCommand + /\n注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号\n\n\nCtrl + F1\nCommand + F1\n在光标所在的错误代码处显示错误信息\n\n\nCtrl + F11\nOption + F3\n选中文件 / 文件夹，使用助记符设定 / 取消书签\n\n\nCtrl + F12\nCommand + F12\n弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选\n\n\nCtrl + Space\nControl + Space\n基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl + 逗号\n\n\nCtrl + Delete\nOption + Fn+ Delete\n删除光标后面的单词或是中文句\n\n\nCtrl + BackSpace\nOption + Delete\n删除光标前面的单词或是中文句\n\n\nCtrl + 1,2,3...9\nControl + 1,2,3...9\n定位到对应数值的书签位置\n\n\nCtrl + 加号\nCommand + 加号\n展开代码\n\n\nCtrl + 减号\nCommand + 减号\n折叠代码\n\n\nCtrl + 左键单击\nControl + 左键单击\n在打开的文件标题上，弹出该文件路径\n\n\nCtrl + 左方向键\nOption + 左方向键\n光标跳转到当前单词 / 中文句的左侧开头位置\n\n\nCtrl + 右方向键\nOption + 右方向键\n光标跳转到当前单词 / 中文句的右侧开头位置\n\n\nCtrl + 前方向键\n预设中没有该快捷键\n等效于鼠标滚轮向前效果\n\n\nCtrl + 后方向键\n预设中没有该快捷键\n等效于鼠标滚轮向后效果\n\n\nAlt\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nAlt + `\nControl + V\n显示版本控制常用操作菜单弹出层\n\n\nAlt + F1\nOption + F1\n显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择\n\n\nAlt + F7\nOption + F7\n查询所选对象/变量被引用\n\n\nAlt + Enter\nOption + Enter\nIntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同\n\n\nAlt + Insert\nCommand + N\n代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等\n\n\nAlt + 左方向键\nControl + 左方向键\n切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换\n\n\nAlt + 右方向键\nControl + 右方向键\n切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换\n\n\nAlt + 前方向键\nControl + 前方向键\n当前光标跳转到当前文件的前一个方法名位置\n\n\nAlt + 后方向键\nControl + 后方向键\n当前光标跳转到当前文件的后一个方法名位置\n\n\nAlt + 1,2,3...9\nCommand + 1,2,3...9\n显示对应数值的选项卡，其中 1 是 Project 用得最多\n\n\nShift\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nShift + F11\nCommand + F3\n弹出书签显示层\n\n\nShift + Tab\nShift + Tab\n取消缩进\n\n\nShift + Enter\nShift + Enter\n开始新一行。光标所在行下空出一行，光标定位到新行位置\n\n\nShift + 左键单击\nShift + 左键单击\n在打开的文件名上按此快捷键，可以关闭当前打开文件\n\n\nCtrl + Alt\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nCtrl + Alt + L\nCommand + Option + L\n格式化代码，可以对当前文件和整个包目录使用\n\n\nCtrl + Alt + O\nControl + Option + O\n优化导入的类，可以对当前文件和整个包目录使用\n\n\nCtrl + Alt + T\nCommand + Option + T\n对选中的代码弹出环绕选项弹出层\n\n\nCtrl + Alt + S\nCommand + 逗号\n打开 IntelliJ IDEA 系统设置\n\n\nCtrl + Alt + Enter\nCommand + Option + Enter\n光标所在行上空出一行，光标定位到新行\n\n\nCtrl + Alt + 左方向键\nCommand + Option + 左方向键\n退回到上一个操作的地方\n\n\nCtrl + Alt + 右方向键\nCommand + Option + 右方向键\n前进到上一个操作的地方\n\n\nCtrl + Shift\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nCtrl + Shift + F\nCommand + Shift + F\n根据输入内容查找整个项目 或 指定目录内文件\n\n\nCtrl + Shift + R\nCommand + Shift + R\n根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件\n\n\nCtrl + Shift + J\nControl + Shift + J\n自动将下一行合并到当前行末尾\n\n\nCtrl + Shift + Z\nCommand + Shift + Z\n取消撤销\n\n\nCtrl + Shift + W\nOption + 方向键下\n递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围\n\n\nCtrl + Shift + N\nCommand + Shift + O\n通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠\n\n\nCtrl + Shift + U\nCommand + Shift + U\n对选中的代码进行大 / 小写轮流转换\n\n\nCtrl + Shift + T\nCommand + Shift + T\n对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择\n\n\nCtrl + Shift + C\nCommand + Shift + C\n复制当前文件磁盘路径到剪贴板\n\n\nCtrl + Shift + B\nControl + Shift + B\n跳转到类型声明处\n\n\nCtrl + Shift + /\nCommand + Option + /\n代码块注释\n\n\nCtrl + Shift + [\nCommand + Shift + [\n选中从光标所在位置到它的顶部中括号位置\n\n\nCtrl + Shift + ]\nCommand + Shift + ]\n选中从光标所在位置到它的底部中括号位置\n\n\nCtrl + Shift + 加号\nCommand + Shift + 加号\n展开所有代码\n\n\nCtrl + Shift + 减号\nCommand + Shift + 减号\n折叠所有代码\n\n\nCtrl + Shift + F7\nCommand + Shift + F7\n高亮显示所有该选中文本，按Esc高亮消失\n\n\nCtrl + Shift + F12\nCommand + Shift + F12\n编辑器最大化\n\n\nCtrl + Shift + Enter\nCommand + Shift + Enter\n自动结束代码，行末自动添加分号\n\n\nCtrl + Shift + Backspace\nCtrl + Shift + Backspace\n退回到上次修改的地方\n\n\nCtrl + Shift + 1,2,3...9\nControl + Shift + 1,2,3...9\n快速添加指定数值的书签\n\n\nCtrl + Shift + 左键单击\nCommand + Shift + 左键单击\n把光标放在某个类变量上，按此快捷键可以直接定位到该类中\n\n\nCtrl + Shift + 左方向键\nOption + Shift + 左方向键\n在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句\n\n\nCtrl + Shift + 右方向键\nOption + Shift + 右方向键\n在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句\n\n\nCtrl + Shift + 前方向键\nCommand + Shift + 前方向键\n光标放在方法名上，将方法移动到上一个方法前面，调整方法排序\n\n\nCtrl + Shift + 后方向键\nCommand + Shift + 后方向键\n光标放在方法名上，将方法移动到下一个方法前面，调整方法排序\n\n\nAlt + Shift\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nAlt + Shift + N\nOption + Shift + B\n选择 / 添加 task\n\n\nAlt + Shift + 左键双击\nOption + Shift + 左键双击\n选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句\n\n\nAlt + Shift + 前方向键\nOption + Shift + 前方向键\n移动光标所在行向上移动\n\n\nAlt + Shift + 后方向键\nOption + Shift + 后方向键\n移动光标所在行向下移动\n\n\nCtrl + Shift + Alt\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nCtrl + Shift + Alt + V\nCommand + Shift + Option + V\n无格式黏贴\n\n\nCtrl + Shift + Alt + S\nCommand + ;\n打开当前项目设置\n\n\n其他\n\n\nWin 快捷键\nMac 快捷键\n介绍\n\n\n\nF2\nF2\n跳转到下一个高亮错误 或 警告位置\n\n\nF4\nF4\n编辑源\n\n\nF11\nF3\n添加书签\n\n\nF12\nF12\n回到前一个工具窗口\n\n\nTab\nTab\n缩进\n\n\nESC\nESC\n从工具窗口进入代码文件窗口\n\n\n","categories":["技术","小妙招"],"tags":["快捷键","全局操作","效率"]},{"title":"日志和测试","url":"/2021/11/01/test/","content":"待添加功能一，多种逻辑图表的网页显示二，思维导图显示三，百度，谷歌等SEO四，角标，高亮显示五，LaTex公式显示六，404页面设置七，电脑端页内链接新窗口跳转八，文字格式颜色自定义九，多级分类（支持）运行bugs一，front-matter 中的标签定义不支持[a,b,c...]数组语法?\n“分类”支持[a,b,c...],表示有层级关系\ncategories:- [大类,中类,小类]\n标签奇怪之处在于：下面这种写法不能识别（不正确？）\ntags：- [标签一,标签二,标签三]\n\n而以下的写法\ntags：[标签一,标签二,标签三]\n\n却能正确识别\n\n\n测试功能测试插入图片：在主题的images文件夹下面建立wz文件夹，引用该相对路径，命令如下：！[alt](/images/wz/IMG_0382.jpg)\n展示：\n！alt\n结果：不能显示\n在博客根目录中的source文件夹中新建images文件夹，引用该相对路径，命令如下![rig](/images/IMG_0382.jpg)\n展示\n\n结果：显示正常\n测试代码高亮：\npublic class NetworkCoding &#123;    public static void main(String [] args)    &#123;        try        &#123;            URL url = new URL(&quot;http://www.runoob.com&quot;);            URLConnection urlConnection = url.openConnection();            HttpURLConnection connection = null;            if(urlConnection instanceof HttpURLConnection)            &#123;                connection = (HttpURLConnection) urlConnection;            &#125;            else            &#123;                System.out.println(&quot;请输入 URL 地址&quot;);                return;            &#125;            BufferedReader in = new BufferedReader(                    new InputStreamReader(connection.getInputStream()));            String urlString = &quot;&quot;;            String current;            while((current = in.readLine()) != null)            &#123;                urlString += current;            &#125;            System.out.println(urlString);        &#125;catch(IOException e)        &#123;            e.printStackTrace();        &#125;    &#125;&#125;/***第一次：不进行配置：不能显示高亮*第二次：代码块加上了语言类型：能够显示部分，不过色彩较少*/\n\n\n\n测试mermaid功能以实现多种图表的网页端显示代码：\nsequenceDiagram 客户-&gt;&gt;银行柜台: 我要存钱  银行柜台-&gt;&gt;后台: 改一下这个账户数字哦  后台-&gt;&gt;银行柜台: 账户的数字改完了，明天起息  银行柜台-&gt;&gt;客户: 好了，给你回单 ，下一位\n\n展示：\nsequenceDiagram \n客户->>银行柜台: 我要存钱  \n银行柜台->>后台: 改一下这个账户数字哦  \n后台->>银行柜台: 账户的数字改完了，明天起息  \n银行柜台->>客户: 好了，给你回单 ，下一位\n\n结果：失败\n测试修改文章的front matter中的title属性结果：可以更改\n","categories":["技术","bugs"],"tags":["Markdown","hexo","Mermaid"]},{"title":"《MySQL必知必会》拆书稿","url":"/2021/11/03/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E6%8B%86%E4%B9%A6%E7%A8%BF/","content":"\n共三十章，211面内容有待精简持续更新、\n\n第1章 了解SQL1.1  数据库基础1.1.1  什么是数据库\n数据库是一个以某种 有组织的方式存储的数据集合。\n数据库不同于日常使用的数据库软件（DBMS 数据库管理系统），数据库是通过DBMS创建和操纵的容器。数据库可以是保存在硬设备上的文件，但也可以不是。\n\n1.1.2  表\n表是一种结构化的文件，可用 来存储某种特定类型的数据。表可以保存顾客清单、产品目录，或者其 他信息清单。\n存储在表中的数据是一种类型的数据或一个清单，决不能将归属于不同类型的数据储存在一起。\n数据库中的每个表都有一个名字，用来标识自己。此名字是唯一的， 这表示数据库中没有其他表具有相同的名字。\n虽然在相同数据库中不能两次使用相同的表名， 但在不同的数据库中却可以使用相同的表名。\n模式(schema) ：关于数据库和表的布局及特性的信息。模式可以用来描述数据库中特定的表以及 整个数据库(和其中表的关系)。\n\n1.1.3  列和数据类型\n表由列组成。列中存储着表中某部分的信息。列(column)： 表中的一个字段。所有表都是由一个或多个列组成的。\n\n理解列的最好办法是将数据库表想象为一个网格。网格中每一列存 储着一条特定的信息。\n\n数据库中每个列都有相应的数据类型。数据类型定义列可以存储的数据种类。\n\n数据类型限制可存储在列中的数据种类(例如，防止在数值字段中 录入字符值)。数据类型还帮助正确地排序数据，并在优化磁盘使用方面起重要的作用。因此，在创建表时必须对数据类型给予特别的关注。\n1.1.4  行\n表中的数据是按行存储的，所保存的每个记录存储在自己的行内。如果将表想象为网格，网格中垂直的列为表列，水平行为表行。\n\n用户在提到行(row)时称其为 数据库记录(record)。在很大程度上，这两个术语是可以互相 替代的，但从技术上说，行才是正确的术语。\n1.1.5  主键\n主键(primary key)1一一列(或一组列)，其值能够唯一区分表 中每个行。表中每一行都应该有可以唯一标识自己的一列(或一组列)。\n\n唯一标识表中每行的这个列(或这组列)称为主键。主键用来表示 一个特定的行。没有主键，更新或删除表中特定行很困难，因为没有安 全的方法保证只涉及相关的行。\n\n表中的任何列都可以作为主键，只要它满足以下条件:\n\n任意两行都不具有相同的主键值;\n每个行都必须具有一个主键值(主键列不允许NULL值)。\n\n\n主键值规则（本身强制的要求）\n\n主键通常定义在表的一列上，但这并不是必需的，也可以一起使用多个列作为主键。\n在使用多列作为主键时，上述条件必须应用到构成主 键的所有列，所有列值的组合必须是唯一的(但单个列的值可以不唯一)。\n\n\n使用主键的好习惯：\n\n不更新主键列中的值;\n不重用主键列的值;\n不在主键列中使用可能会更改的值。\n\n\n\n1.2  什么是SQL\nSQL(发音为字母S-Q-L或sequel)是结构化查询语言(Structured Query Language)的缩写。SQL是一种专门用来与数据库通信的语言。\nSQL有如下的优点：\nSQL不是某个特定数据库供应商专有的语言。几乎所有重要的DBMS都支持SQL，所以，学习此语言使你几乎能与所有数据库打交道。\nSQL简单易学。它的语句全都是由描述性很强的英语单词组成， 而且这些单词的数目不多。\nSQL尽管看上去很简单，但它实际上是一种强有力的语言，灵活 使用其语言元素，可以进行非常复杂和高级的数据库操作。\n\n\n\n1.3  动手实践1.4  小结第2章 MySQL简介2.1  什么是MySQL\n数据的所有存储、 检索、管理和处理实际上是由数据库软件——DBMS(数据库管理系统) 完成的。MySQL是一种DBMS，即它是一种数据库软件。\nMySQL广泛应用的原因：\n成本低\n性能好\n可信赖\n简单\n\n\n\n2.1.1  客户机—服务器软件\nDBMS的两种类型\n\n一类为基于共享文件系统的DBMS\n\n另一类为基于客户机——服务器的DBMS\nMySQL，Oracle，Microsoft SQL Server都属于后者。\n\n\n\n客户机—服务器应用分为两个不同的部分：\n\n服务器部分是负责所有数据访问和处理的一个软件。这个软件运行在称为数据库服务器的计算机上。与数据文件打交道的只有服务器软件。关于数据、数据添加、删除和数据更新的所有请求都由服务器软件完成。\n客户机是与用户打交道的软件。\n\n\n事实上，多数网络的建立使用户不具有对数据的访问权，甚至不 具有对存储数据的驱动器的访问权。\n\n\n\n2.1.2  MySQL版本\nMySQL 4.1对MySQL函数库引入了重要更改，本书是为使用此版本或更高版本而撰写的。\n\n2.2  MySQL工具\n每个MySQL安装都有一个名为mysql的简单命令行实用程序。这个实用程序没有下拉菜单、流行的用户界面、鼠标支持或任何类似的东西。\n\n2.2.1 mysql命令行实用程序\n如果仅输入mysql，可能会出现一个错误 消息。因为可能需要安全证书，或者是因为MySQL没有运行 在本地或默认端口上。\n\nmysql接受你可以(和可能需要)使用 的一组命令行参数。\n\n具体的版本和连接信息可能不同，但都可以使用这个实用程序。请注意:\n\n命令输入在mysql&gt;之后;\n\n命令用;或\\g结束，换句话说，仅按Enter不执行命令;\n\n输入help或\\h获得帮助，也可以输入更多的文本获得特定命令的帮助(如，输入help select获得使用SELECT语句的帮助);\n\n输入quit或exit退出命令行实用程序。\n==mysql命令行实用程序是使用最多的实用程序之一，它对于快速测试和执行脚本非常有价值。==\n\n\n\n\n2.2.2  MySQL Adminis-trator\nMySQL Administrator(MySQL管理器)是一个图形交互客户机，用来简化MySQL服务器的管理。\n\nMySQL Administrator提示输入服务器和登录信息(并且允许你保存 服务器定义供以后选择)，然后显示允许选择不同视图的图标。其中:\n\n Server Information(服务器信息)显示客户机和被连接的服务器的状态和版本信息;\n Service Control(服务控制)允许停止和启动MySQL以及指定服务器特性;\n User Administration(用户管理)用来定义MySQL用户、登录和权限;\n Catalogs(目录)列出可用的数据库并允许创建数据库和表。\n\n\n\n2.2.3  MySQL Query Browser\nMySQL Query Browser为一个图形交互客户机，用来编写和执行 MySQL命令。\n\nMySQL Query Browser要求输入服务器和登录信息(在MySQL Query Browser和MySQL Administrator之间共享保存的定义)，然后显示应用界面。注意下面几点：\n\n输入MySQL命令到屏幕顶上的窗口中。在输入语句后，单击 Execute按钮把它提交给MySQL处理。\n\n结果(如果有)显示在屏幕左边的大区域网格中。\n\n多条语句和结果显示在它们自己的标签中，并且允许快速切换。屏幕右边是一个标签，它列出所有可能的数据源(这里称为大纲)，展开任一数据源查看它的表，展开任一个表查看它的列。 你还可以选择表和列让MySQL Query Browser为你编写MySQL语句。\n\nSchemata(大纲)标签的右边是一个History(历史)标签，它保持MySQL语句的执行历史。在需要测试不同版本的MySQL语句时，它非常有用。\n\n关于MySQL语法、函数等的帮助可在屏幕右下角得到。\n\n\n\n\n\n2.3  小结第3章 使用MySQL3.1  连接\nMySQL与所有的客户机-服务器一样,要求在能执行命令之前登录到DBMS\n登录名可以与网络登录名不同,MySQL 在内部保存自己的用户列表,并且把每个用户与用户权限关联起来\n连接到MySQL,需要一下信息:\n主机名(计算机名)\n端口\n一个合法的用户名\n用户口令\n\n\n\n3.2  选择数据库3.3  了解数据库和表3.4  小结第4章 检索数据4.1 SELECT语句4.2 检索单个列4.3 检索多个列4.4 检索所有列4.5 检索不同的行4.6 限制结果4.7 使用完全限定的表名4.8 小结第5章 排序检索数据5.1 排序数据5.2 按多个列排序5.3 指定排序方向5.4 小结第6章 过滤数据6.1 使用WHERE子句6.2 WHERE子句操作符6.2.1 检查单个值6.2.2 不匹配检查6.2.3 范围值检查6.2.4 空值检查6.3 小结第7章 数据过滤…………………….. 407.1 组合WHERE子句 ……………….. 407.1.1  AND操作符 ……………. 407.1.2  OR操作符 ……………… 417.1.3  计算次序 ……………… 42","categories":["技术","拆书稿","悦读","拆书稿"],"tags":["MySQL","SQL，数据库"]},{"title":"优雅永不过时","url":"/2021/11/05/%E4%BC%98%E9%9B%85%E6%B0%B8%E4%B8%8D%E8%BF%87%E6%97%B6/","content":"给MacBook扩容换电池，见识到了其优雅紧凑的布局：\n\n还有这“性感”的翘臀\n\nSHP9500，有着硬朗，中正的外观个性，不错的卡扣阻尼，质感不错\n\n\n钟爱的一组软卡抄，素雅的外观配上磨砂质感，抚摸间仿佛沁着花香\n\n","categories":["设计美学","工业品"],"tags":["工业品","优雅设计","简而美"]},{"title":"林湾村流着哈喇子的哈巴狗在啃骨头","url":"/2021/11/02/%E6%9E%97%E6%B9%BE%E6%9D%91%E6%B5%81%E7%9D%80%E5%93%88%E5%96%87%E5%AD%90%E7%9A%84%E5%93%88%E5%B7%B4%E7%8B%97/","content":"\n记录那些细碎时光\n\n哎哟，大灰，你这蓝猫胖子镜头感不错啊\n“别瞪了，别瞪了，快瞎了，姐姐饶命~” 拍完快逃\n桌面清理大师的多巴胺飙升时刻，点名表扬小米台灯，还能再漂亮点吗？\n“咕噜咕噜，太饿了，我先喝点电”我说Mac咱充电这么慢（传统艺能(￣.￣)），原来猫着个偷电贼！\n\n猫猫祟祟，“喂！人类，你瞅啥？”\n建设路猫咖的小白，睡得好香甜，看起来好乖，做美梦居然不流口水   ￣▽￣\nCyberpunk Rainbow Bridge. 欢迎登录午夜飞艇\n租间的“拼多多”墙面，9块9我拼出了个新太阳系，这么多球可踢，这宇航员真幸福\n解释一下，隔壁那个“平行宇宙”是价值四十大洋的墙布，装了个大月亮和宿醉的阿姆斯朗，“思乡嘛人之常情~”。\n\n\n晒着阳光浴打盹的花大爷\n水の鄙视链：怡宝：“您好水，请上座。” \n农夫山泉：“你才水呢，我是大自然的馈赠！”\n\n这是我住的宿舍？？？不知道还以为是汤臣一品呢！\n分手桥相当漂亮的对称美，像是侧卧的虹桥\n\n","categories":["生活点滴","林湾村"],"tags":["林湾村","回忆"]},{"title":"设计网站集锦","url":"/2021/11/02/%E6%BC%82%E4%BA%AE%E8%AE%BE%E8%AE%A1/","content":"\n一大波资源正在来袭\n\n\n直线一个日本的网站设计赏析平台\n\nDribbleUI分享网站\n\nBehance比Drbble更全面，支持英文关键字搜索\n\nlogopond国外优秀logo分享平台\n\ninstant logo提供各大公司logo的矢量图下载\n\nlapa精美的landing page收集网站\n\nawwwards展示卓越前沿的web设计，打分评价\n\n\n","categories":["设计美学","资源素材"],"tags":["设计资源网站","UI设计"]}]