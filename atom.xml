<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nico‘s Zone</title>
  
  <subtitle>疏影横斜水清浅，暗香浮动月黄昏。</subtitle>
  <link href="https://www.lzp.zone/atom.xml" rel="self"/>
  
  <link href="https://www.lzp.zone/"/>
  <updated>2022-03-19T00:26:02.000Z</updated>
  <id>https://www.lzp.zone/</id>
  
  <author>
    <name>Nico Liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TCP三次握手、四次挥手</title>
    <link href="https://www.lzp.zone/2022/03/01/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E3%80%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>https://www.lzp.zone/2022/03/01/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E3%80%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</id>
    <published>2022-03-01T06:54:59.000Z</published>
    <updated>2022-03-19T00:26:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-协议简述"><a href="#TCP-协议简述" class="headerlink" title="TCP 协议简述"></a>TCP 协议简述</h2><p>TCP 提供面向有连接的通信传输，面向有连接是指在传送数据之前必须先建立连接，数据传送完成后要释放连接。</p><p>无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。<br>同时由于TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议，TCP是全双工模式，所以需要四次挥手关闭连接。</p><h2 id="TCP包首部"><a href="#TCP包首部" class="headerlink" title="TCP包首部"></a>TCP包首部</h2><p>网络中传输的数据包由两部分组成：一部分是协议所要用到的首部，另一部分是上一层传过来的数据。首部的结构由协议的具体规范详细定义。在数据包的首部，明确标明了协议应该如何读取数据。反过来说，看到首部，也就能够了解该协议必要的信息以及所要处理的数据。包首部就像协议的脸。</p><p>所以我们在学习TCP协议之前，首先要知道TCP在网络传输中处于哪个位置，以及它的协议的规范，下面我们就看看TCP首部的网络传输起到的作用：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzue07rhirj20mv0lfwgl.jpg"                      alt="网络数据传输过程"                ></p><p>下面的图是TCP头部的规范定义，它定义了TCP协议如何读取和解析数据：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzue0ko9t1j20jg0810t8.jpg"                      alt="TCP头部"                ></p><p>TCP首部承载这TCP协议需要的各项信息，下面我们来分析一下：</p><p><strong>TCP端口号</strong><br>TCP的连接是需要四个要素确定唯一一个连接：<br><strong>（源IP，源端口号）+ （目地IP，目的端口号）</strong><br>所以TCP首部预留了两个16位作为端口号的存储，而IP地址由上一层IP协议负责传递<br>源端口号和目地端口各占16位两个字节，也就是端口的范围是2^16=65535<br>另外1024以下是系统保留的，从1024-65535是用户使用的端口范围</p><p><strong>TCP的序号和确认号：</strong><br><strong>32位序号 seq</strong>：Sequence number 缩写seq ，TCP通信过程中某一个传输方向上的字节流的每个字节的序号，通过这个来确认发送的数据有序，比如现在序列号为1000，发送了1000，下一个序列号就是2000。<br><strong>32位确认号 ack</strong>：Acknowledge number 缩写ack，TCP对上一次seq序号做出的确认号，用来响应TCP报文段，给收到的TCP报文段的序号seq加1。</p><p><strong>TCP的标志位</strong><br>每个TCP段都有一个目的，这是借助于TCP标志位选项来确定的，允许发送方或接收方指定哪些标志应该被使用，以便段被另一端正确处理。<br>用的最广泛的标志是 SYN，ACK 和 FIN，用于建立连接，确认成功的段传输，最后终止连接。</p><p><strong>SYN</strong>：简写为<code>S</code>，同步标志位，用于建立会话连接，同步序列号；<br><strong>ACK</strong>：简写为<code>A</code>，确认标志位，对已接收的数据包进行确认；<br><strong>FIN</strong>： 简写为<code>F</code>，完成标志位，表示我已经没有数据要发送了，即将关闭连接；<br><strong>PSH</strong>：简写为<code>P</code>，推送标志位，表示该数据包被对方接收后应立即交给上层应用，而不在缓冲区排队；<br><strong>RST</strong>： 简写为<code>R</code>，重置标志位，用于连接复位、拒绝错误和非法的数据包；<br><strong>URG</strong>：简写为<code>U</code>，紧急标志位，表示数据包的紧急指针域有效，用来保证连接不被阻断，并督促中间设备尽快处理；</p><h2 id="TCP-三次握手建立连接"><a href="#TCP-三次握手建立连接" class="headerlink" title="TCP 三次握手建立连接"></a>TCP 三次握手建立连接</h2><p>所谓三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个报文。</p><p>三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。在 socket 编程中，客户端执行 connect() 时。将触发三次握手。</p><p>三次握手过程的示意图如下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzue11k9q7j209k08ct8s.jpg"                      alt="三次握手建立连接"                ></p><h3 id="第一次握手："><a href="#第一次握手：" class="headerlink" title="第一次握手："></a>第一次握手：</h3><p>客户端将TCP报文标志位SYN置为1，随机产生一个序号值seq=J，保存在TCP首部的序列号(Sequence Number)字段里，指明客户端打算连接的服务器的端口，并将该数据包发送给服务器端，发送完毕后，客户端进入<code>SYN_SENT</code>状态，等待服务器端确认。</p><h3 id="第二次握手："><a href="#第二次握手：" class="headerlink" title="第二次握手："></a>第二次握手：</h3><p>服务器端收到数据包后由标志位SYN=1知道客户端请求建立连接，服务器端将TCP报文标志位SYN和ACK都置为1，ack=J+1，随机产生一个序号值seq=K，并将该数据包发送给客户端以确认连接请求，服务器端进入<code>SYN_RCVD</code>状态。</p><h3 id="第三次握手："><a href="#第三次握手：" class="headerlink" title="第三次握手："></a>第三次握手：</h3><p>客户端收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给服务器端，服务器端检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，客户端和服务器端进入<code>ESTABLISHED</code>状态，完成三次握手，随后客户端与服务器端之间可以开始传输数据了。</p><p>注意:我们上面写的ack和ACK，不是同一个概念：</p><ul><li><p>小写的ack代表的是头部的确认号Acknowledge number， 缩写ack，是对上一个包的序号进行确认的号，ack=seq+1。</p></li><li><p>大写的ACK，则是我们上面说的TCP首部的标志位，用于标志的TCP包是否对上一个包进行了确认操作，如果确认了，则把ACK标志位设置成1。</p><p>下面我自己做实验，开一个HTTP服务，监听80端口，然后使用Tcpdump命令抓包，看一下TCP三次握手的过程：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump -n -t -S -i enp0s3  port 80 </span><br><span class="line"></span><br><span class="line">第一次握手，标志位Flags=S</span><br><span class="line">IP 10.0.2.2.51323 &gt; 10.0.2.15.80: Flags [S], seq 84689409, win 65535, options [mss 1460], length 0</span><br><span class="line">第二次握手，标志位Flags=[S.]</span><br><span class="line">IP 10.0.2.15.80 &gt; 10.0.2.2.51323: Flags [S.], seq 1893430205, ack 84689410, win 64240, options [mss 1460], length 0</span><br><span class="line">第三次握手，标志位Flags=[.]</span><br><span class="line">IP 10.0.2.2.51323 &gt; 10.0.2.15.80: Flags [.], ack 1893430206, win 65535, length 0</span><br><span class="line">建立连接后，客户端发送http请求 </span><br><span class="line">IP 10.0.2.2.51321 &gt; 10.0.2.15.80: Flags [P.], seq 1:753, ack 1, win 65535, length 752: HTTP: GET / HTTP/1.1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>tcpdump命令解析一下：<br>-i : 指定抓包的网卡是enp0s3<br>-n: 把域名转成IP显示<br>-t: 不显示时间<br>-S: 序列号使用绝对数值，不指定-S的话，序列号会使用相对的数值<br>port: 指定监听端口是80<br>host:指定监听的主机名</p></blockquote><p>我们看下实战中TCP的三次握手过程：</p><p>第一次握手，客户端51323端口号向服务器端80号端口发起连接，此时标志位flags=S，即SYN=1标志，表示向服务端发起连接的请求，同时生成序列号seq=84689409<br>第二次握手，服务端标志位flags=[S.]，即SYN+ACK标志位设置为1，表示对上一个请求连接的报文进行确认，同时设置ack=seq+1=184689410，生成序列号seq=1893430205<br>第三次握手，客户端对服务端的响应进行确认，所以此时标志位是[.]即ACK=1，同时返回对上一个报文的seq的确认号，ack=1893430206<br>至此，三次握手完成，一个TCP连接建立完成，接下来就是双端传输数据了</p><h3 id="为什么需要三次握手？"><a href="#为什么需要三次握手？" class="headerlink" title="为什么需要三次握手？"></a>为什么需要三次握手？</h3><p>我们假设client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。</p><p>本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。</p><p>假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。</p><p>所以，采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。</p><blockquote><p>TCP 三次握手跟现实生活中的人与人打电话是很类似的：</p><p>三次握手：<br>“喂，你听得到吗？”<br>“我听得到呀，你听得到我吗？”<br>“我能听到你，今天 balabala……”<br>经过三次的互相确认，大家就会认为对方对听的到自己说话，并且愿意下一步沟通，否则，对话就不一定能正常下去了。</p></blockquote><h2 id="TCP-四次挥手关闭连接"><a href="#TCP-四次挥手关闭连接" class="headerlink" title="TCP 四次挥手关闭连接"></a>TCP 四次挥手关闭连接</h2><p>四次挥手即终止TCP连接，就是指断开一个TCP连接时，需要客户端和服务端总共发送4个包以确认连接的断开。在socket编程中，这一过程由客户端或服务端任一方执行close来触发。<br>由于TCP连接是全双工的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN。首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭。</p><p>四次挥手过程的示意图如下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzue2xp20wj20jj0hlq3n.jpg"                      alt="四次挥手关闭连接"                ></p><p>挥手请求可以是Client端，也可以是Server端发起的，我们假设是Client端发起：</p><h3 id="第一次挥手："><a href="#第一次挥手：" class="headerlink" title="第一次挥手："></a>第一次挥手：</h3><p>Client端发起挥手请求，向Server端发送标志位是FIN报文段，设置序列号seq，此时，Client端进入<code>FIN_WAIT_1</code>状态，这表示Client端没有数据要发送给Server端了。</p><h3 id="第二次分手："><a href="#第二次分手：" class="headerlink" title="第二次分手："></a>第二次分手：</h3><p>Server端收到了Client端发送的FIN报文段，向Client端返回一个标志位是ACK的报文段，ack设为seq加1，Client端进入<code>FIN_WAIT_2</code>状态，Server端告诉Client端，我确认并同意你的关闭请求。</p><h3 id="第三次分手："><a href="#第三次分手：" class="headerlink" title="第三次分手："></a>第三次分手：</h3><p>Server端向Client端发送标志位是FIN的报文段，请求关闭连接，同时Client端进入<code>LAST_ACK</code>状态。</p><h3 id="第四次分手-："><a href="#第四次分手-：" class="headerlink" title="第四次分手 ："></a>第四次分手 ：</h3><p>Client端收到Server端发送的FIN报文段，向Server端发送标志位是ACK的报文段，然后Client端进入<code>TIME_WAIT</code>状态。Server端收到Client端的ACK报文段以后，就关闭连接。此时，Client端等待2MSL的时间后依然没有收到回复，则证明Server端已正常关闭，那好，Client端也可以关闭连接了。</p><h3 id="为什么连接的时候是三次握手，关闭的时候却是四次握手？"><a href="#为什么连接的时候是三次握手，关闭的时候却是四次握手？" class="headerlink" title="为什么连接的时候是三次握手，关闭的时候却是四次握手？"></a>为什么连接的时候是三次握手，关闭的时候却是四次握手？</h3><p>建立连接时因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。所以建立连接只需要三次握手。</p><p>由于TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议，TCP是全双工模式。<br>这就意味着，关闭连接时，当Client端发出FIN报文段时，只是表示Client端告诉Server端数据已经发送完毕了。当Server端收到FIN报文并返回ACK报文段，表示它已经知道Client端没有数据发送了，但是Server端还是可以发送数据到Client端的，所以Server很可能并不会立即关闭SOCKET，直到Server端把数据也发送完毕。<br>当Server端也发送了FIN报文段时，这个时候就表示Server端也没有数据要发送了，就会告诉Client端，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。</p><h3 id="为什么要等待2MSL？"><a href="#为什么要等待2MSL？" class="headerlink" title="为什么要等待2MSL？"></a>为什么要等待2MSL？</h3><p><strong>MSL</strong>：报文段最大生存时间，它是任何报文段被丢弃前在网络内的最长时间。<br>有以下两个原因：</p><ul><li>第一点：保证TCP协议的全双工连接能够可靠关闭：<br>由于IP协议的不可靠性或者是其它网络原因，导致了Server端没有收到Client端的ACK报文，那么Server端就会在超时之后重新发送FIN，如果此时Client端的连接已经关闭处于CLOESD状态，那么重发的FIN就找不到对应的连接了，从而导致连接错乱，所以，Client端发送完最后的ACK不能直接进入CLOSED状态，而要保持TIME_WAIT，当再次收到FIN的收，能够保证对方收到ACK，最后正确关闭连接。</li><li>第二点：保证这次连接的重复数据段从网络中消失<br>如果Client端发送最后的ACK直接进入CLOSED状态，然后又再向Server端发起一个新连接，这时不能保证新连接的与刚关闭的连接的端口号是不同的，也就是新连接和老连接的端口号可能一样了，那么就可能出现问题：如果前一次的连接某些数据滞留在网络中，这些延迟数据在建立新连接后到达Client端，由于新老连接的端口号和IP都一样，TCP协议就认为延迟数据是属于新连接的，新连接就会接收到脏数据，这样就会导致数据包混乱。所以TCP连接需要在TIME_WAIT状态等待2倍MSL，才能保证本次连接的所有数据在网络中消失。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TCP-协议简述&quot;&gt;&lt;a href=&quot;#TCP-协议简述&quot; class=&quot;headerlink&quot; title=&quot;TCP 协议简述&quot;&gt;&lt;/a&gt;TCP 协议简述&lt;/h2&gt;&lt;p&gt;TCP 提供面向有连接的通信传输，面向有连接是指在传送数据之前必须先建立连接，数据传送完成后</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://www.lzp.zone/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="TCP/UDP" scheme="https://www.lzp.zone/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP-UDP/"/>
    
    
    <category term="TCP" scheme="https://www.lzp.zone/tags/TCP/"/>
    
    <category term="网络编程" scheme="https://www.lzp.zone/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>TCP/UDP的区别</title>
    <link href="https://www.lzp.zone/2022/03/01/TCP-UDP%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://www.lzp.zone/2022/03/01/TCP-UDP%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-03-01T06:09:06.000Z</published>
    <updated>2022-03-19T00:24:43.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP与UDP基本区别"><a href="#TCP与UDP基本区别" class="headerlink" title="TCP与UDP基本区别"></a>TCP与UDP基本区别</h2><p>(transmission control protocol、user datagram protocol)</p><p>基于连接与无连接<br>TCP要求系统资源较多，UDP较少<br>UDP程序结构较简单<br>流模式（TCP）与数据报模式(UDP)<br>TCP保证数据正确性，UDP可能丢包<br>TCP保证数据顺序，UDP不保证</p><h2 id="UDP应用场景："><a href="#UDP应用场景：" class="headerlink" title="UDP应用场景："></a>UDP应用场景：</h2><p>面向数据报方式<br>网络数据大多为短消息<br>拥有大量Client<br>对数据安全性无特殊要求<br>网络负担非常重，但对响应速度要求高</p><h2 id="具体编程时的区别"><a href="#具体编程时的区别" class="headerlink" title="具体编程时的区别"></a>具体编程时的区别</h2><p>socket()的参数不同<br>UDP Server不需要调用listen和accept<br>UDP收发数据用sendto/recvfrom函数<br>TCP：地址信息在connect/accept时确定<br>UDP：在sendto/recvfrom函数中每次均 需指定地址信息<br>UDP：shutdown函数无效</p><h2 id="编程区别"><a href="#编程区别" class="headerlink" title="编程区别"></a>编程区别</h2><p>通常我们在说到网络编程时默认是指TCP编程，即用前面提到的socket函数创建一个socket用于TCP通讯，函数参数我们通常填为SOCK_STREAM。即socket(PF_INET, SOCK_STREAM, 0)，这表示建立一个socket用于流式网络通讯。<br>SOCK_STREAM这种的特点是面向连接的，即每次收发数据之前必须通过connect建立连接，也是双向的，即任何一方都可以收发数据，协议本身提供了一些保障机制保证它是可靠的、有序的，即每个包按照发送的顺序到达接收方。<br>而SOCK_DGRAM这种是User Datagram Protocol协议的网络通讯，它是无连接的，不可靠的，因为通讯双方发送数据后不知道对方是否已经收到数据，是否正常收到数据。<br>任何一方建立一个socket以后就可以用sendto发送数据，也可以用recvfrom接收数据。根本不关心对方是否存在，是否发送了数据。它的特点是通讯速度比较快。大家都知道TCP是要经过三次握手的，而UDP没有。</p><h2 id="编程步骤区别："><a href="#编程步骤区别：" class="headerlink" title="编程步骤区别："></a>编程步骤区别：</h2><h3 id="TCP服务器端："><a href="#TCP服务器端：" class="headerlink" title="TCP服务器端："></a>TCP服务器端：</h3><p>创建一个socket，用函数socket()；<br>设置socket属性，用函数setsockopt(); * 可选<br>绑定IP地址、端口等信息到socket上，用函数bind();<br>开启监听，用函数listen()；<br>接收客户端上来的连接，用函数accept()；<br>收发数据，用函数send()和recv()，或者read()和write();<br>关闭网络连接；<br>关闭监听；</p><h3 id="TCP客户端："><a href="#TCP客户端：" class="headerlink" title="TCP客户端："></a>TCP客户端：</h3><p>创建一个socket，用函数socket()；<br>设置socket属性，用函数setsockopt();* 可选<br>绑定IP地址、端口等信息到socket上，用函数bind();* 可选<br>设置要连接的对方的IP地址和端口等属性；<br>连接服务器，用函数connect()；<br>收发数据，用函数send()和recv()，或者read()和write();<br>关闭网络连接；</p><h3 id="UDP服务器端："><a href="#UDP服务器端：" class="headerlink" title="UDP服务器端："></a>UDP服务器端：</h3><p>创建一个socket，用函数socket()；<br>设置socket属性，用函数setsockopt();* 可选<br>绑定IP地址、端口等信息到socket上，用函数bind();<br>循环接收数据，用函数recvfrom();<br>关闭网络连接；</p><h3 id="UDP客户端："><a href="#UDP客户端：" class="headerlink" title="UDP客户端："></a>UDP客户端：</h3><p>创建一个socket，用函数socket()；<br>设置socket属性，用函数setsockopt();* 可选<br>绑定IP地址、端口等信息到socket上，用函数bind();* 可选<br>设置对方的IP地址和端口等属性;<br>发送数据，用函数sendto();<br>关闭网络连接；</p><h2 id="TCP与UDP区别总结："><a href="#TCP与UDP区别总结：" class="headerlink" title="TCP与UDP区别总结："></a>TCP与UDP区别总结：</h2><ul><li>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接</li><li>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付</li><li>TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的</li><li>UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）</li><li>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信</li><li>TCP首部开销20字节;UDP的首部开销小，只有8个字节</li><li>TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</li><li>TCP和UDP是OSI模型中的运输层中的协议。TCP提供可靠的通信传输，而UDP则常被用于让广播和细节控制交给应用的通信传输。</li><li>UDP不提供复杂的控制机制，利用IP提供面向无连接的通信服务。并且它是将应用程序发来的数据在收到的那一刻，立刻按照原样发送到网络上的一种机制。即使是出现网络拥堵的情况下，UDP也无法进行流量控制等避免网络拥塞的行为。此外，传输途中如果出现了丢包，UDO也不负责重发。甚至当出现包的到达顺序乱掉时也没有纠正的功能。如果需要这些细节控制，那么不得不交给由采用UDO的应用程序去处理。换句话说，UDP将部分控制转移到应用程序去处理，自己却只提供作为传输层协议的最基本功能。UDP有点类似于用户说什么听什么的机制，但是需要用户充分考虑好上层协议类型并制作相应的应用程序。</li><li>TCP充分实现了数据传输时各种控制功能，可以进行丢包的重发控制，还可以对次序乱掉的分包进行顺序控制。而这些在UDP中都没有。此外，TCP作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以控制通信流量的浪费。TCP通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输。</li></ul><hr><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>UDP和TCP 在使用TCP/IP 体系结构的网络通信中，这两个协议的使用频率仅次于网际层的IP协议。TCP/IP 体系结构应用层中的某些协议需要使用运输层的TCP 提供的服务，而另一些协议需要使用运输层的UDP 提供的服务，UDP 是用户数据报协议的英文缩写词，TCP 是传输控制协议的英文缩写词。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzud7evcoqj21c10k9q5w.jpg"                      alt="33eb6437b31547f687e63f280f7313b5"                ></p><h2 id="2、从是否面向连接来看"><a href="#2、从是否面向连接来看" class="headerlink" title="2、从是否面向连接来看"></a>2、从是否面向连接来看</h2><p>如下图所示，两个小电脑图标代表英特网上的两台主机，纵坐标为时间。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzud7x0mg5j211s0i3dhy.jpg"                      alt="9a4b63b4a1c8486dac13fe1decba7420"                ></p><h3 id="2-1、UDP"><a href="#2-1、UDP" class="headerlink" title="2.1、UDP"></a>2.1、UDP</h3><p>两台主机如果在运输层使用UDP协议进行通信，双方可以随时发送数据，因此UDP是无连接的。</p><h3 id="2-2、TCP"><a href="#2-2、TCP" class="headerlink" title="2.2、TCP"></a>2.2、TCP</h3><p>再来看使用TCP 协议的情况，使用TCP协议的通信，双方在进行数据传输之前必须使用三报文握手来建立TCP 连接。TCP 连接建立成功后才能进行数据传输，数据传输结束后必须使用四报文挥手来释放TCP连接。需要注意的是这里所谓的连接是指逻辑连接关系，而不是物理连接，综上所述UDP是无连接的，而TCP是面向连接的。</p><h2 id="3、从连接对象个数来看"><a href="#3、从连接对象个数来看" class="headerlink" title="3、从连接对象个数来看"></a>3、从连接对象个数来看</h2><h3 id="3-1、UDP"><a href="#3-1、UDP" class="headerlink" title="3.1、UDP"></a>3.1、UDP</h3><p>下图是某个局域网上的使用UDP协议进行通信的四台主机，其中任何一台主机都可向其他三台主机发送广播，也可以向某个多播组发送多播，还可以向某台主机发送单播。也就是说UDP支持单播多播以及广播，换句话说UDP支持一对一，一对多以及一对全的通信。</p><p>一台主机向其他三台主机发送广播：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzud8h0obsj20q10jb75h.jpg"                      alt="6d11421847b64a12a97944c2efa7a2dd"                ></p><p>向某个多播组发送多播：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzud8zy2ftj20rb0k9dh6.jpg"                      alt="ce3d3c2f8cca41ae9043d1032c673061"                ></p><p>向某台主机发送单播：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzud9chcpaj20pe0j2q3w.jpg"                      alt="a34e1481f09f496cbb20076706db7199"                ></p><h3 id="3-2、TCP"><a href="#3-2、TCP" class="headerlink" title="3.2、TCP"></a>3.2、TCP</h3><p>再来看使用TCP协议的情况。使用TCP协议的通信，双方在进行数据传输之前必须使用三报文握手来建立TCP连接。TCP连接建立成功后</p><p>，通信双方之间就好像有一条可靠的通信信道，通信双方使用这条基于TCP连接的可靠信道进行通信。很显然，TCP仅支持单播，也就是一对一的通信。</p><p>三报文握手”建立TCP连接：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzuda0kabpj20pk0ii3zl.jpg"                      alt="96849a9723544fb893017ead9db3af50"                ></p><p>基于TCP连接的可靠信道：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzudaw6svgj20pw0ihgmn.jpg"                      alt="721c00c4f0dc417cbeaed4a7ce7a5127"                ></p><h2 id="4、从对应用报文的处理来看"><a href="#4、从对应用报文的处理来看" class="headerlink" title="4、从对应用报文的处理来看"></a>4、从对应用报文的处理来看</h2><h3 id="4-1、UDP"><a href="#4-1、UDP" class="headerlink" title="4.1、UDP"></a>4.1、UDP</h3><p>先来看使用UDP协议的情况。发送方的应用进程将应用层报文交付给运输层的UDP，UDP直接给应用层报文添加一个UDP首部，使之成为UDP用户数据报，然后进行发送。需要说明的是，为了简单起见，我们忽略运输层下面的各层处理。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzudbqhkuij20qd0l1mzj.jpg"                      alt="8992e517ed4a41e5ba2bfa9d700133f6"                ></p><p>接收方的UDP收到该UDP用户数据报后，去掉UDP首部，将应用层报文交付给应用进程。也就是说，UDP对应用进程交下来的报文既不合并也不拆分，而是保留这些报文的边界。换句话说，UDP是面向应用报文的。</p><h3 id="4-2、TCP"><a href="#4-2、TCP" class="headerlink" title="4.2、TCP"></a>4.2、TCP</h3><p>再来看使用TCP协议的情况。</p><p>发送方：</p><p>1、发送方的TCP把应用进程交付下来的数据块仅仅看作是一连串的无结构的字节流，TCP并不知道这些带传送的字节流的含义。<br>2、发送方将他们编号并存储在自己的发送缓存中。<br>3、TCP根据发送策略，从发送缓存中提取一定数量的字节构建TCP报文段并发送。<br>接收方：</p><p>1、接收方的TCP一方面从所接收到的TCP报文段中取出数据载荷部分，并存储在接收缓存中，一方面将接收缓存中的一些字节交付给应用进程。</p><p>2、TCP不保证接收方应用进程所收到的数据块与发送方应用进程所发出的数据块具有对应大小的关系（例如，发送方应用进程交给发送方的TCP共10个数据块，但接收方的TCP可能只用了4个数据块，就把收到的字节流交付给了上层的应用进程，但接收方收到的字节流必须和发送方应用进程发出的字节流完全一样。）当然，接收方的应用进程必须有能力识别收到的字节流，并把它还原成有意义的应用层数据。</p><p>因此，TCP是面向字节流的，这正是TCP 实现可靠传输、流量控制以及控制的基础。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzude1fw05j20qf0l4wgj.jpg"                      alt="3e1890af984840fbad609cf5e97e0c62"                ></p><blockquote><p>需要说明的是，为了突出示意图的要点，我们只画出了一个方向的数据流。在实际网络中，基于TCP连接的两端，可以同时进行TCP 报文段的发送和接收，也就是全双工通信。另外，图中的数据部分只包含了几个字节，实际当中一个TCP报文段包含上千个字节是很常见的。</p></blockquote><h2 id="5、从向其上层提供传输服务来看"><a href="#5、从向其上层提供传输服务来看" class="headerlink" title="5、从向其上层提供传输服务来看"></a>5、从向其上层提供传输服务来看</h2><h3 id="5-1、UDP"><a href="#5-1、UDP" class="headerlink" title="5.1、UDP"></a>5.1、UDP</h3><p>TCP/IP体系结构的网际层向其上层提供的是无连接不可靠的传输服务，当运输层使用UDP协议时，向其上层提供的也是无连接不可靠的传输服务。</p><p>发送方给接收方发送UDP用户数据报，若传输过程中用户数据报受到干扰而产生误码，接收方UDP可以通过该数据报首部中的校验和字段的值检查出产生物码的情况，但仅仅丢弃该数据报其他什么也不做。</p><p>发送方给接收方发送UDP用户数据报，如果该数据报被英特网中的某个路由器丢弃了，发送方UDP不做任何处理，因为UDP向上层提供的是无连接不可靠的传输服务。</p><p>因此，对于UDP用户数据报出现的物码和丢失等问题，UDP并不关心，基于UDP的这个特点，UDP适用于实时应用，例如IP电话、视频会议等。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzudeov7i6j20qy0ka421.jpg"                      alt="e4ab47a008c648669df4f092be7c8e50"                ></p><h3 id="5-2、TCP"><a href="#5-2、TCP" class="headerlink" title="5.2、TCP"></a>5.2、TCP</h3><p>再来看使用TCP协议的情况，尽管网际层中的IP协议向上层提供的是无连接不可靠的传输服务，也就是说，IP数据报可能在传输过程中出现丢失，误码，但只要运输层使用TCP协议，就可向其上层提供面向连接的可靠传输服务。</p><p>我们可将其想象成使用TCP协议的收发，双方基于TCP连接的可靠性到进行数据传输，不会出现误码丢失、乱序以及重复等传输差错。因此，TCP适用于要求可靠传输的应用，例如文件传输。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzudfchx73j20pw0kqjv9.jpg"                      alt="b06f59d4337540429f1fc1b29b5ed9f2"                ></p><h2 id="6、从首部格式来看"><a href="#6、从首部格式来看" class="headerlink" title="6、从首部格式来看"></a>6、从首部格式来看</h2><h3 id="6-1、UDP"><a href="#6-1、UDP" class="headerlink" title="6.1、UDP"></a>6.1、UDP</h3><p>一个UDP用户数据报由首部和数据载荷两部分构成，其首部格式如下图所示：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzudg1ed1uj20o70cjq45.jpg"                      alt="3566a318d3f84c41993acdb94045e7cf"                ></p><p>仅有4个字段，每个字段长度为2个字节，由于UDP不提供可靠传输服务，它仅仅在网际层的基础上添加了用于区分应用进程的端口，因此他的首部非常简单，仅有8个字节。</p><h3 id="6-2、TCP"><a href="#6-2、TCP" class="headerlink" title="6.2、TCP"></a>6.2、TCP</h3><p>一个TCP报文段由手部和数据载荷两部分构成，其首部格式如下图所示：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzudgcwy4vj20ox0iwmzf.jpg"                      alt="f0825e82953a42019b2ab8b6c0f97c3e"                ></p><p>这比UDP用户数据报的首部复杂的多，其最小长度为20字节，最大长度为60字节，这是因为TCP要实现可靠传输、流量控制控制等服务，其首部自然会比较复杂，首部中的字段比较多，首部长度也比较长。</p><h2 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h2><h3 id="7-1、UDP和TCP对比表格："><a href="#7-1、UDP和TCP对比表格：" class="headerlink" title="7.1、UDP和TCP对比表格："></a>7.1、UDP和TCP对比表格：</h3><table><thead><tr><th>类型</th><th>是否面向连接</th><th>传输可靠性</th><th>传输形式</th><th>传输效率</th><th>所需资源</th><th>应用场景</th><th>首部字节</th></tr></thead><tbody><tr><td>TCP</td><td>是</td><td>可靠</td><td>字节流</td><td>慢</td><td>多</td><td>文件、邮件传输</td><td>20~60个字节</td></tr><tr><td>UDP</td><td>否</td><td>不可靠</td><td>数据报文段</td><td>快</td><td>少</td><td>即时通讯、域名转换</td><td>8个字节</td></tr></tbody></table><p>​                        </p><h3 id="7-2、UDP和TCP对比图："><a href="#7-2、UDP和TCP对比图：" class="headerlink" title="7.2、UDP和TCP对比图："></a>7.2、UDP和TCP对比图：</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzudh1m8xaj21320e6tb0.jpg"                      alt="03b64d67dac744aeb1e13e82b1b1f946"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TCP与UDP基本区别&quot;&gt;&lt;a href=&quot;#TCP与UDP基本区别&quot; class=&quot;headerlink&quot; title=&quot;TCP与UDP基本区别&quot;&gt;&lt;/a&gt;TCP与UDP基本区别&lt;/h2&gt;&lt;p&gt;(transmission control protocol、use</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://www.lzp.zone/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="TCP/UDP" scheme="https://www.lzp.zone/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP-UDP/"/>
    
    
    <category term="TCP" scheme="https://www.lzp.zone/tags/TCP/"/>
    
    <category term="UDP" scheme="https://www.lzp.zone/tags/UDP/"/>
    
    <category term="网络编程" scheme="https://www.lzp.zone/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java核心技术》笔记</title>
    <link href="https://www.lzp.zone/2021/11/23/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.lzp.zone/2021/11/23/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2021-11-23T12:16:59.000Z</published>
    <updated>2022-03-19T00:27:43.289Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《Java核心技术》是一套全面扎实的Java工具书，适合进阶学习，平时可以搁一本放身边随时查漏补缺，巩固基础。</p></blockquote><p>[TOC]</p><h2 id="第一章-java程序设计概述"><a href="#第一章-java程序设计概述" class="headerlink" title="第一章 java程序设计概述"></a>第一章 java程序设计概述</h2><h3 id="1-1java的关键术语"><a href="#1-1java的关键术语" class="headerlink" title="1.1java的关键术语"></a>1.1java的关键术语</h3><ul><li>简单性      </li><li>面向对象<ul><li>定义：是一种程序设计技术，重点放在数据与对象的接口上。</li><li>相比于c++，java有简单的接口概念以及元类模型</li></ul></li><li>网络技能<ul><li>有一个拓展的例程库用于处理TCP/IP，能通过URL打开访问网络上的对象</li></ul></li><li>健壮性<ul><li>与c++最大的不同在于其采用的指针模型可消除重写内存和损坏数据的可能性</li></ul></li><li>安全性</li><li>可移植性</li><li>解释性</li><li>高性能<ul><li>字节码-机器码（即时编译）</li></ul></li><li>多线程</li><li>动态性</li></ul><blockquote><p>题外话：HTML和XML<br>HTML的全称为超文本标记语言，是一种标记语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、链接等。</p><p>HTML的缺点使其交互性差，语义模糊，这些缺陷难以适应Internet飞速发展的要求，因此一个标准、简洁、结构严谨以及可高度扩展的XML就产生了。</p><p>可扩展标记语言（XML）与Access,Oracle和SQL Server等数据库不同，数据库提供了更强有力的数据存储和分析能力，例如：数据索引、排序、查找、相关一致性等，XML的宗旨传输数据的，而与其同属标准通用标记语言的HTML主要用于显示数据。事实上XML与其他数据表现形式最大的不同是：他极其简单。这是一个看上去有点琐细的优点，但正是这点使XML与众不同。</p></blockquote><h2 id="第二章-java程序设计环境"><a href="#第二章-java程序设计环境" class="headerlink" title="第二章 java程序设计环境"></a>第二章 java程序设计环境</h2><blockquote><p>小百科：<br>JDK                  开发工具箱<br>JRE                  运行java程序用户所使用的程序软件<br>SE                    用于开发桌面或者简单服务器应用的Java平台<br>EE                    用于复杂的服务器应用的Java平台<br>ME                   用于手机和其他小型设备的Java平台<br>J2                    用于命名老版的Java<br>SDK                 用于命名老版的JDK<br>u                      甲骨文公司的术语，用于发布修改的bug<br>NetBeans         甲骨文公司的集成开发环境</p></blockquote><h2 id="第三章-Java的基本程序设计结构"><a href="#第三章-Java的基本程序设计结构" class="headerlink" title="第三章 Java的基本程序设计结构"></a>第三章 Java的基本程序设计结构</h2><h3 id="3-1-一个简单的Java应用程序"><a href="#3-1-一个简单的Java应用程序" class="headerlink" title="3.1 一个简单的Java应用程序"></a>3.1 一个简单的Java应用程序</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstSample</span></span></span><br><span class="line"><span class="class">//<span class="title">public</span>这个关键字称为访问修饰符（<span class="title">access</span> <span class="title">modifier</span>），用于控制程序的其他部分对这段代码的访问级别；<span class="title">class</span>表明程序中的全部内容都包含在类之中</span></span><br><span class="line"><span class="class">//<span class="title">class</span>后面紧跟类名</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(string[] args)</span><span class="comment">//void表示这个方法没有返回值</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello Swjtu&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;```</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>==Java对程序的大小写很敏感==</li><li>类是构建所有java应用程序和applet的构建块，后者的所有内容都应该放在类中</li><li>定义类名的规则如下：<ul><li>必须以大写字母开头，后面可跟字母数字任意组合</li><li>长度没有限制</li><li>不能使用Java保留字</li><li>类名由多个单词组成时每个单词的首字母都应该大写（骆驼命名法），如CamelCase</li></ul></li><li>源代码的文件名必须与公共类相同，并使用.java作为拓展名</li><li>编译运行时，源文件将从指定类中的<code>main</code>方法（函数）开始执行，故而源文件必须包含一个<code>main</code>方法，当然用户也可以自定义一个方法放在类中，并且在<code>main</code>中调用它</li><li>回车不是语句结束的标志，多条语句可以写在同一行之中。</li><li>(.)号用于调用方法，Java的通用语句<code>object.method(paraments);</code>，这等价于函数调用</li><li>()内的叫做参数，在Java的方法之中可以没有参数，但需要空括号，例如<br><code>System.out.println();</code></li></ol><h3 id="3-2-注释"><a href="#3-2-注释" class="headerlink" title="3.2 注释"></a>3.2 注释</h3><ol><li>注释的书写方式有三种：<ul><li>用“//”,其注释的内容到本行结尾</li><li>可以用”/**/ “ 囊括一段注释，注意在java中这种注释方式不能嵌套，即如果代码本身包含了一个“*/”，就不能在两端将代码括起来</li><li>第三种注释可以用来自动生成文档，以“/*<em>”开始，以“</em>/”结束</li></ul></li></ol><h3 id="3-3-数据类型"><a href="#3-3-数据类型" class="headerlink" title="3.3 数据类型"></a>3.3 数据类型</h3><ol><li>Java是一种强类型语言，意味着必须为每一个变量声明一种类型</li><li>Java没有任何的符号类型</li><li>检测“非数值”的方法：</li></ol><p><code>if(double.isNaN(x));</code></p><ol start="4"><li><p>总共8种基本类型：4种整型+2种浮点型+1种用于表示Unicode编码的字符单元的字符类型+1种用于表示真值的boolean类型</p></li><li><p>整型（允许是负数）</p><table><thead><tr><th align="center">类型</th><th align="center">储存需求/字节</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">4</td><td align="center">约为正负二十亿</td></tr><tr><td align="center">short</td><td align="center">2</td><td align="center">-32768～32767</td></tr><tr><td align="center">long</td><td align="center">8</td><td align="center">约正负九后十六零</td></tr><tr><td align="center">byte</td><td align="center">1</td><td align="center">-128～127</td></tr></tbody></table><ul><li><p>long用于大数量，short和byte则用于特定场合</p></li><li><p>java整型的范围与机器无关，能解决很多跨平台的问</p></li></ul></li></ol><ol start="2"><li><p>浮点型</p><table><thead><tr><th align="center">类型</th><th>储存需求</th><th>取值范围</th></tr></thead><tbody><tr><td align="center">float</td><td>4</td><td>大约正负3.40282E+38F(有效位数6-7)</td></tr><tr><td align="center">double</td><td>8</td><td>大约正负1.79769E+308（有效位数15）</td></tr></tbody></table></li></ol><ul><li>double的数值精度是float的两倍，绝大多数的应用程序都采用double类型</li><li>float的精度很难满足要求，用的少，例如在快速处理单精度数据或者需要储存大量的数据时才会采用</li><li>float类型后面有个F（例如3.14F），没有后缀F的浮点数值默认是double型</li><li>所有的浮点类型的计算都遵循IEE 754规范，下面是用来表示溢出和出错情况的三个特殊的浮点数值：<ul><li>正无穷大</li><li>负无穷大</li><li>NaN(不是一个数值，计算（0/0or负数的平方根)</li></ul></li></ul><ol start="3"><li><p>char型</p><ul><li><p>char 类型原本用于表示单个字符,如今， 有些Unicode字符可以用一个char值描述， 另外一些Unicode 字符则需要两个char 值</p></li><li><p>char 类型的字面量值要用单引号括起来。例如：W 是编码值为65 所对应的字符常量。它与”A” 不同，”A” 是包含一个字符A 的字符串, char 类型的值可以表示为十六进制值，其范围从\u0000 到\Uffff。</p></li><li><p>除了转义序列\u 之外， 还有一些用于表示特殊字符的转义序列</p></li><li><p>我们强烈建议不要在程序中使用char 类型， 除非确实需要处理UTF-16 代码单元。最好将字符串作为抽象数据类型处理</p></li></ul></li></ol><p>   <img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcp8k72ij30rf06h0t8.jpg"                                     ></p><ol start="4"><li><p>boolean型</p><ul><li>boolean ( 布尔）类型有两个值： false 和true, 用来判定逻辑条件整型值和布尔值之间不能进行相互转换。</li></ul></li></ol><h3 id="3-4-变量"><a href="#3-4-变量" class="headerlink" title="3.4 变量"></a>3.4 变量</h3><ol><li>变量名必须是一个以字母开头并由字母或数字构成的序列。与大多数程序设计语言相比，Java 中“ 字母” 和“ 数字” 的范围更大。字母包括 ’A’ ~ ’Z’、 ’a‘ ~ ’z’、‘_’ ,’$’或在某种语言中表示字母的任何 Unicode 字符。变量名中所有的字符都是有意义的，并且大小写敏感。变量名的长度基本上没有限制</li><li>不能使用 Java 保留字作为变量名</li><li>可以在一行中声明多个变量：<br><code>int i, z; // both are integers</code></li><li>声明一个变量之后，必须用赋值语句对变量进行显式初始化， 千万不要使用未初始化的变量。</li><li>变量的声明尽可能地靠近变量第一次使用的地方，这是一种良好的程序编写风格。</li><li>习惯上,常量名使用全大写。</li><li>在 Java 中，经常希望某个常量可以在一个类中的多个方法中使用，通常将这些常量称为<br>类常量。可以使用关键字 static fina丨设置一个类常量。 需要注意， 类常量的定义位于 main 方法的外部。 因此， 在同一个类的其他方法中也可以使用这个常量。 而且， 如果一个常量被声明为 public， 那么其他类的方法也可以使用这个常量。 在这个示例中，Constants2.CM就是这样一个常量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consitants2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> CM=<span class="number">2</span>；</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;<span class="keyword">double</span> KE=<span class="number">3</span>；</span><br><span class="line">   System.out.println(<span class="string">&quot;RE=&quot;</span>+CM*KE) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-运算符"><a href="#3-5-运算符" class="headerlink" title="3.5 运算符"></a>3.5 运算符</h3><ol><li>当参与 / 运算的两个操作数都是整数时， 表示整数除法；否则， 表示浮点除法。 </li><li>整数的求余操作（有时称为取模)用 ％ 表示。 例如， 15/2 等于 7, 15%2 等于 1, 15.0/2 等于 7.5</li><li>整数被 0 除将会产生一个异常， 而浮点数被 0 除将会得到无穷大或 NaN 结果。</li><li>在 main 方法中的所有指令都将使用严格的浮点计算。如果将一个类标记为strictfp(如<code>public static strictfp void main(String[] args)</code>), 这个类中的所有方法都要使用严格的浮点计算。</li><li>数学函数与常量</li></ol><ul><li><p>想计算一个数值的平方根， 可以使用 sqrt 方法：</p></li><li><p>```java<br>double x = 4;<br>double y = Math.sqrt(x);<br>System.out.println(y); // prints 2.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- println 方法和 sqrt 方法存在微小的差异。println 方法处理 System.out 对象。但是，</span><br><span class="line">  Math 类中的 sqrt 方法处理的不是对象，这样的方法被称为静态方法。</span><br><span class="line"></span><br><span class="line">- 在 Java 中，没有幂运算， 因此需要借助于 Math 类的 pow 方法。语句:</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  double y = Math.pow(x, a);</span><br></pre></td></tr></table></figure></li><li><p>floorMod 方法的目的是解决一个长期存在的有关整数余数的问题。<code>floorMod(position + adjustment, 12)</code>,你总会得到一个在0-11之间的数值。</p><ul><li>Math 类提供了一些常用的三角函数：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Math,sin</span><br><span class="line">Math.cos</span><br><span class="line">Math.tan</span><br><span class="line">Math.atan</span><br><span class="line">Math.atan</span><br></pre></td></tr></table></figure><ul><li><p>指数函数以及它的反函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Math.exp</span><br><span class="line">Math.log</span><br><span class="line">Math.loglO</span><br></pre></td></tr></table></figure></li><li><p>pi 和 e 常量的近似值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.PI</span><br><span class="line">Math.E</span><br></pre></td></tr></table></figure></li><li><p>不必在数学方法名和常量名前添加前缀“ Math”， 只要在源文件的顶部加上下面这行代码就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.1ang.Math.*;</span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line">System.out.println(<span class="string">&quot;The square root of \u03C0 is &quot;</span> + sqrt(PI)) ;</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>数值类型之间的转换</li></ol><p>  <img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcp8qyfej30rf06h0t8.jpg"                      alt="image-20210831142638991"                >        </p><ul><li><p>在图 3-1 中有 6 个实心箭头，表示无信息丢失的转换； 有 3 个虚箭头， 表示可能有精度<br>损失的转换。 例如，123 456 789 是一个大整数， 它所包含的位数比 float 类型所能够表达的<br>位数多。 当将这个整型数值转换为 float 类型时， 将会得到同样大小的结果，但却失去了一定<br>的精度。</p></li><li><p>当使用上面两个数值进行二元操作时（例如 n + f， n 是整数， f 是浮点数，) 先要将两个操作数转换为同一种类型，然后再进行计算。</p><ul><li>如果两个操作数中有一个是 double 类型， 另一个操作数就会转换为 double 类型。</li><li>否则， 如果其中一个操作数是 float 类型， 另一个操作数将会转换为 float 类型。</li><li>否则， 如果其中一个操作数是 long 类型， 另一个操作数将会转换为 long 类型。</li><li>否则， 两个操作数都将被转换为 int 类型。</li></ul></li></ul><ol start="7"><li>强制类型转换</li></ol><ul><li><p>强制类型转换的语法格式是在圆括号中给出想要转换的目标类型，后面紧跟待转换的变量名。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">9.997</span>;</span><br><span class="line"><span class="keyword">int</span> nx = (<span class="keyword">int</span>) x;</span><br></pre></td></tr></table></figure></li><li><p>对浮点数进行舍人运算， 以便得到最接近的整数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">9.997</span>;</span><br><span class="line"><span class="keyword">int</span> nx = (<span class="keyword">int</span>) Math.round(x);</span><br></pre></td></tr></table></figure></li><li><p>如果试图将一个数值从一种类型强制转换为另一种类型， 而又超出了目标类型的表示范围， 结果就会截断成一个完全不同的值。 例如：（byte)300的实际值为44。</p></li><li><p>可以在赋值中使用二元运算符；java也提供了自增、 自减运算符，关系运算；</p></li></ul><p>8.==位运算符==</p><ul><li>处理整型类型时，可以直接对组成整型数值的各个位完成操作。这意味着可以使用掩码技术得到整数中的各个位。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; (&quot;与&quot;) | (&quot;或&quot;) ， ^(&quot;异或&quot;)， ~ (&quot;非&quot;)</span><br></pre></td></tr></table></figure><ul><li>另外，还有&gt;&gt;和&lt;&lt; 运算符将位模式左移或右移。 需要建立位模式来完成位掩码时， 这两个运算符会很方便</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int fourthBitFromRight = (n &amp; (1&lt;&lt; 3)) &gt;&gt; 3;</span><br></pre></td></tr></table></figure><ul><li>最后,&gt;&gt;&gt;运算符会用 0 填充高位，这与&gt;&gt;不同，它会用符号位填充高位。不存在 &lt;&lt;&lt;<br>运算符。</li></ul><ol start="9"><li>括号与运算优先级</li></ol><ul><li>与 C 或 C++ 不同，Java 不使用逗号运算符。 不过， 可以在 foi■ 语 句 的 第 1 和<br>第 3 部分中使用逗号分隔表达式列表。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpgpdlpj30wt098t9g.jpg"                      alt="image-20210831145813401"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpdf2trj30xh0aygm8.jpg"                      alt="image-20210831145844903"                ></p><ol start="10"><li>枚举类型：变量的取值只在一个有限的集合内。 变量的取值只在一个有限的集合内。 </li></ol><h3 id="3-6-字符串"><a href="#3-6-字符串" class="headerlink" title="3.6 字符串"></a>3.6 字符串</h3><ul><li>Java 没有内置的字符串类型， 而是在标准 Java 类库中提供了一个预定义类， 很自然地叫做 String。每个用双引号括起来的字符串都是 String类的一个实例</li></ul><ol><li>子串：String 类的 substring 方法可以从一个较大的字符串提取出一个子串。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String greeting = &quot;Hello&quot;;</span><br><span class="line">String s = greeting.substring（0, 3);</span><br><span class="line">//加上下面这句，就能生成一个“Help!”</span><br><span class="line">greeting = greeting.substring(0, 3) + &quot;p!&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>拼接：</p><ul><li><p>允许使用 + 号连接（拼接）两个字符串</p></li><li><p>当将一个字符串与一个非字符串的值进行拼接时，后者被转换成字符串</p></li><li><p>任何一个 Java 对象都可以转换成字符串</p></li><li><p>如果需要把多个字符串放在一起， 用一个定界符分隔，可以使用静态 join 方法：</p></li><li><p>```java<br>String all = String.join(“ / “, “S”, “M”, “L”, “XL”);// all is the string “S / H / L / XL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 不可变字符</span><br><span class="line"></span><br><span class="line">   - String 类没有提供用于修改字符串的方法 </span><br><span class="line">   - 不可变字符串却有一个优点：编译器可以让字符串共享。</span><br><span class="line"></span><br><span class="line">4. 检测字符串是否相等</span><br><span class="line"></span><br><span class="line">   - `s.equals(t)`如果字符串 s 与字符串 t 相等， 则返回 true ; 否则， 返回 false。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>//      如何判断两个字符串是否相当<br>//      输出为”The result is :true” </p><pre><code>  String d=&quot;abc&quot;;  String e=&quot;abc&quot;;  boolean result = d.equals(e);  System.out.println(&quot;The result is :&quot; + result);</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- s 与 t 可以是字符串变量， 也可以是字符串字面量，如下表达也是合法的：</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  &quot;Hello&quot;.equals(greeting)</span><br></pre></td></tr></table></figure></li><li><p>要想检测两个字符串是否相等，而不区分大小写， 可以使用 equalsIgnoreCase 方法。如下：</p></li><li><p>```<br>“Hello”.equalsIgnoreCase(“hel1o”)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   - 一定不要使用= 运算符检测两个字符串是否相等！ 这个运算符只能够确定两个字串</span><br><span class="line">     是否放置在同一个位置上。</span><br><span class="line"></span><br><span class="line">   - 如果虚拟机始终将相同的字符串共享， 就可以使用= 运算符检测是否相等。但实际上只有字符串常量是共享的，而+ 或 substring 等操作产生的结果并不是共享的。</span><br><span class="line"></span><br><span class="line">5. 空 串 与 Null 串</span><br><span class="line"></span><br><span class="line">- 空串 &quot;&quot; 是长度为 0 的字符串。空串是一个 Java 对象， 有自己的串长度（0 ) 和内容（空）。不过，String 变量还可以存放一个特殊的值， 名为null, 这表示目前没有任何对象与该变量关联</span><br><span class="line"></span><br><span class="line">6. 码点和代码单元</span><br><span class="line"></span><br><span class="line">- Java 字符串由 char 值序列组成。char 数据类型是一</span><br><span class="line">  个采用 UTF-16 编码表示 Unicode 码点的代码单元。大多数的常用 Unicode 字符使用一个代码单元就可以表示，而辅助字符需要一对代码单元表示。</span><br><span class="line"></span><br><span class="line">7. ==String API==</span><br><span class="line"></span><br><span class="line">- 每一个 API 的注释都以形如 java.lang.String 的类名开始。类名之后是一个或多个方法的名字，解释和参数描述。</span><br><span class="line"></span><br><span class="line">8. 阅读联机API文档</span><br><span class="line"></span><br><span class="line">- API文档是 JDK 的一部分， 它是HTML 格式的。 让浏览器指向安装 roK 的 docs/api/index.html 子目录， 就可以看到</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3.7 输入输出</span><br><span class="line"></span><br><span class="line">1. 读取输入</span><br><span class="line"></span><br><span class="line">- 读取“ 标准输人流” System.in 就没有那么简单了。要想通 过控制台进行输人， 首先需要构造一个 Scanner 对象， 并与“ 标准输人流” System.in 关联。如下所示：</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  Scanner in = new Scanner(System.in);</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>nextLine 方法将输入一行。</p></li><li><p>```<br>System.out.print(“What  is your name?  “);<br>String name  = in.nextLine();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在这里， 使用 nextLine 方法是因为在输人行中有可能包含空格。 要想读取一个单词（以空白 符作为分隔符 )， 就调用：</span><br><span class="line">  ```String firstName = in.nextO;```</span><br><span class="line"></span><br><span class="line">- 想要读取一个整数，就用：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>int age = in.nextlntO;<br>System.out.print(“How old are you? “)；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 与此类似， 要想读取下一个浮点数， 就调用 nextDouble 方法。</span><br><span class="line"></span><br><span class="line">- 最后， 在程序的最开始添加上一行：</span><br><span class="line">  ```import  java.util.*;```</span><br><span class="line">  Scanner 类定义在 java.util 包中。  当使用的类不是定义在基本 java.lang 包中时， 一定要使用 import 指示字将相应的包加载进来。</span><br><span class="line"></span><br><span class="line">- 因为输入是可见的，  所以  Scanner 类不适用于从控制台读取密码。 Java SE 6 特别 引入了   Console 类实现这个目的。 要想读取一个密码， 可以采用下列代码：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">Console cons = System.console();</span><br><span class="line">String username = cons.readLine(&quot;User name: &quot;)； </span><br><span class="line">cha「[] passwd = cons.readPassword(&quot;Password:&quot;);</span><br></pre></td></tr></table></figure></li><li><p>为了安全起见， 返回的密码存放在一维字符数组中，  而不是字符串中。 在对密码进 行处理之后， 应该马上用一个填充值覆盖数组元素，采用  Console 对象处理输入不如采用  Scanner 方便。 每次只能读取一行输入，  而没有 能够读取一个单词或一个数值的方法。</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpa6svbj30nn0dstao.jpg"                      alt="image-20210902090521956"                ></p><ol start="2"><li>格式化输出</li></ol><ul><li><p>可以使用  SyStem.0Ut.print(x) 将数值  x 输出到控制台上。 这条命令将以  x 对应的数据类型 所允许的最大非  0 数字位数打印输出  X。 例如：<br><code>double x  = 10000.0 / 3.0; </code></p><p><code>System.out.print(x);</code><br>打印：3333.3333333333335<br>而使用如下方式则可以用 8 个字符的宽度和小数点后两个字符的精度打印x：<br><code>System.out.printf（%8.2f, x);</code></p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcp9qcwdj30u20kkjue.jpg"                      alt="image-20210902091536575"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcph5w87j30rx0e9gn6.jpg"                      alt="image-20210902091751837"                ></p><ul><li><p>s 转换符格式化任意的对象,， 对于任意实现了 Formattable 接口的对象都<br>将调用 formatTo 方法； 否则将调用 toString 方法， 它可以将对象转换为字符串。</p></li><li><p>printf方法中日期与时间的格式化选项。 </p><ul><li><p><code>System.out.printfCXtc&quot;, new DateO);</code></p><p>这条语句将用下面的格式打印当前的日期和时间：</p><p>Mon Feb 09 18:05:19 PST 2015</p></li><li><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpbkfznj30s908emxo.jpg"                      alt="image-20210903193738764"                ></p></li><li></li><li><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpfcpjqj30p40k9tas.jpg"                      alt="image-20210903193831340"                ></p></li></ul><p>某些格式只给出了指定 丨期的部分信息 t 。例如， 只有 FI 期 或 月 份 如果需要多次对口期操作才能实现对每一部分进行格式化的 Q 的就太笨拙了为此， 可以采用一个格式化的字符串指出要被格式化的参数索引。 索引必须紧跟在 ％ 后面， 并以 $ 终止。 如</p><p><code>System.out.printf( &quot;&amp;l$s %2$tB %2$te, %2$tY&quot;, &quot;Due date:&quot;, new DateQ())；</code></p><p>打印:Due date: February 9, 2015</p><p>还可以选择使用 &lt; 标志它指示前而格式说明中的参数将被再次使川也就是说， 下列<br>语句将产生与前面语句同样的输出结果：</p><p><code>System.out .printf (&quot;%s %tB %&lt;te, %&lt;tY&quot; , &quot;Due date:&quot; , new DateO) ;</code></p></li><li><p>格式说明符的语法图。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Users/coco/Library/Application%2520Support/typora-user-images/image-20210903194406508.png"                      alt="image-20210903194406508"                ></p></li></ul><ol start="3"><li>文件的输入和输出</li></ol><ul><li><p>要想对文件进行读取， 就需要一个用 File 对象构造一个 Scanner 对象， 如下所示：</p><p><code>Scanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;) , &quot;UTF-8&quot;) ;</code></p><p>如果文件名中包含反斜杠符号，就要记住在每个反斜杠之前再加一个额外的反斜杠：<br>“ c:\mydirectory\myfile.txt” c</p></li><li><p>要想写入文件， 就需要构造一个 PrintWriter 对象。在构造器中，只需要提供文件名：</p><p><code>PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;) ;</code></p><p>如果文件不存在，创建该文件。 可以像输出到 System.out—样使用 print、 println 以及 printf<br>命令。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpck3nwj30rm0lomzj.jpg"                      alt="image-20210903200720534"                ></p><ul><li><p>如果<br>用一个不存在的文件构造一个 Scanner, 或者用一个不能被创建的文件名构造一个 PrintWriter,<br>那么就会发生异常。Java 编译器认为这些异常比“ 被零除” 异常更严重。</p></li><li><p>已经知道有可能出现“ 输人 / 输出” 异常。这需要在 main 方法中用 throws 子句标记， 如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String口 args)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(Paths.get(<span class="string">&quot;myfi1e.txt&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>) ;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpeznlaj30s10h0ac3.jpg"                      alt="image-20210903201020643"                ></p></li></ul></li></ul><h3 id="3-8-控制流"><a href="#3-8-控制流" class="headerlink" title="3.8 控制流"></a>3.8 控制流</h3><ul><li>Java没有goto语句，但break语句可以带标签，可以利用它实现从内层循环跳出的目的；还有一种变形的 for 循环， 在C或C++中没有这类循环。它有点类似于C#中的 foreach 循环。</li></ul><ol><li>块作用域<ul><li>块（即复合语句）是指由一对大括号括起来的若干条简单的 Java 语句。块确定了变量的作<br>用域。一个块可以嵌套在另一个块中。</li><li>不能在嵌套的两个块中声明同名的变量。</li></ul></li><li>条件语句</li></ol><ul><li><code>if (condition) statement</code></li><li><code>if (condition) statementi else statementi</code></li><li>else 部分是可选的。else 子句与最邻近的 if 构成一组。</li></ul><ol start="3"><li>循环语句</li></ol><ul><li><code>while &#123;condition ) statement</code></li><li><code>do statement while &#123;condition );</code></li></ul><ol start="4"><li>确定循环</li></ol><ul><li>```java<br>for (int i = 1;i &lt;= 10; i++)<br>System.out.println(i);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果在 for 语句内部定义一个变量， 这个变量就不能在循环体之外使用。 因此， 如果希望在 for 循环体之外使用循环计数器的最终值， 就要确保这个变量在循环语句的前面且在外部声明！</span><br><span class="line"></span><br><span class="line">- 另一方面，可以在各自独立的不同 for 循环中定义同名的变量：</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  for (int i = 1; i &lt;= 10; i++)&#123;..&#125;</span><br><span class="line">  for (int i = 11; i &lt;= 20; i ++) &#123;..&#125;// OK to define another variable named i</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>多重选择：switch 语句</li></ol><ul><li><p>switch语句将从与选项值相匹配的 case 标签处开始执行直到遇到 break 语句，或者执行到switch i吾句的结束处为止。如果没有相匹配的 case 标签， 而有 default 子句， 就执行这个子句。</p></li><li><p>如果你比我们更喜欢 switch 语句， 编译代码时可以考虑加上 -Xlint:fallthrough 选项，如下所示：</p><p>这样一来， 如果某个分支最后缺少一个 break 语句， 编译器就会给出一个警告消息。</p></li><li><p>```java<br>javac -Xlint:fallthrough Test.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果你确实正是想使用这种“ 直通式”（fallthrough) 行为， 可以为其外围方法加一个标注@SuppressWamings(&quot;fallthrough&quot;)。 这样就不会对这个方法生成警告了 (标注是为编译器或处理 Java 源文件或类文件的工具提供信息的一种机制。 ）</span><br><span class="line"></span><br><span class="line">- case 标签可以是：</span><br><span class="line"></span><br><span class="line">  - 类型为 char、byte、 short 或 int 的常量表达式。</span><br><span class="line"></span><br><span class="line">  - 枚举常量。</span><br><span class="line"></span><br><span class="line">  - 从 Java SE 7 开始， case 标签还可以是字符串字面量。例如：</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    String input=...;</span><br><span class="line">    switch (input.toLowerCaseO)</span><br><span class="line">    &#123;</span><br><span class="line">    case &quot;yes&quot;: // OK since Java SE 7</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">    ...&#125;</span><br></pre></td></tr></table></figure><ul><li><p>当在 switch 语句中使用枚举常量时，不必在每个标签中指明枚举名，可以由 switch 的表<br>达式值确定。例如：</p></li><li><p>```java<br>Size sz = . . .;<br>switch (sz)<br>{<br>case SMALL: // no need to use Size.SMALL<br>…<br>break;<br>…}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5. 中断控制流程语句</span><br><span class="line"></span><br><span class="line">- 与用于退出 switch 语句的 break 语句一样， 它也可以用于退出循环语句。</span><br><span class="line"></span><br><span class="line">- Java 还提供了一种带标签的 break语句， 用于跳出多重嵌套的循环语句。有时候，在嵌套很深的循环句中会发生一些不可预料的事情。此时可能更加希望跳到嵌套的所有循环语句之外。通过添加一些额外的条件判断实现各层循环的检测很不方便。</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  Scanner in = new Scanner(System.in);</span><br><span class="line">  int n;</span><br><span class="line">  read_data:</span><br><span class="line">  while (. . .) // this loop statement is tagged with the label</span><br><span class="line">  for (. . .) // this inner loop is not labeled</span><br><span class="line">  &#123;</span><br><span class="line">  Systen.out.print(&quot;Enter a number &gt;= 0: &quot;)；</span><br><span class="line">  n = in.nextlntO；</span><br><span class="line">  if (n &lt; 0) // should never happen-can’t go on</span><br><span class="line">  break read_data;</span><br><span class="line">  ...// break out of readjata loop</span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如果输入有误， 通过执行带标签的 break 跳转到带标签的语句块末尾。对于任何使用break语句的代码都需要检测循环是正常结束， 还是由 break 跳出。</p></li><li><p>最后，还有一个 continue 语句。 与 break 语句一样， 它将中断正常的控制流程。continue语句将控制转移到最内层循环的首部。</p></li><li><p>```java<br>Scanner in = new Scanner(System.in) ;<br>while (sum &lt; goal )<br>{<br>System.out.print(“Enter a number: “)；<br>n = in.nextlntO；<br>if (n &lt; 0) continue;<br>sum += n; // not executed if n &lt; 0<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  如果 n&lt;0, 则 continue语句越过了当前循环体的剩余部分， 立刻跳到循环首部。如果将 continue 语句用于 for 循环中， 就可以跳到 for 循环的“ 更新” 部分。 例如， 下面这个循环：</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  for (count = 1; count &lt;= 100; count++)</span><br><span class="line">  &#123;</span><br><span class="line">  System.out.print(&quot;Enter a number, -1 to quit: &quot;);</span><br><span class="line">  n = in.nextlntO；</span><br><span class="line">  if (n &lt; 0) continue;</span><br><span class="line">  sum += n; // not executed if n &lt; 0</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果 n&lt;0, 则 continue 语句跳到 count++ 语句。还有一种带标签的 continue 语句，将跳到与标签匹配的循环首部。</p></li></ul><h3 id="3-9-大数值"><a href="#3-9-大数值" class="headerlink" title="3.9 大数值"></a>3.9 大数值</h3><ul><li><p>如果基本的整数和浮点数精度不能够满足需求， 那么可以使用jaVa.math 包中的两个很有用的类：Biglnteger 和 BigDecimaL 这两个类可以处理包含任意长度数字序列的数值。Biglnteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。</p></li><li><p>使用静态的 valueOf 方法可以将普通的数值转换为大数值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Biglnteger a = Biglnteger.valueOf(<span class="number">100</span>);</span><br></pre></td></tr></table></figure></li><li><p>遗憾的是，不能使用人们熟悉的算术运算符（如：+ 和 *) 处理大数值。 而需要使用大数<br>值类中的 add 和 multiply 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Biglnteger c = a.add(b); <span class="comment">// c = a + b</span></span><br><span class="line">Biglnteger d = c.multiply(b.add(BigInteger.valueOf(<span class="number">2</span>))); <span class="comment">// d = c * (b + 2)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-10-数组"><a href="#3-10-数组" class="headerlink" title="3.10 数组"></a>3.10 数组</h3><ul><li><p>在声明数组变量时，需要指出数组类型（数据元素类型紧跟 [] ) 和数组变量的名字。如</p><p><code>int[] a = new int[100];//加上了初始化</code></p></li><li><p>创建一个数字数组时， 所有元素都初始化为 0。boolean 数组的元素会初始化为 false， 对象数组的元素则初始化为一个特殊值 null, 这表示这些元素（还）未存放任何对象。</p><p><code>String[] names = new String[10] ;</code>会创建一个包含 10 个字符串的数组， 所有字符串都为null。</p></li><li><p>要想获得数组中的元素个数，可以使用 array.length。例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i ++)</span><br><span class="line">System.out.println(a[i]);</span><br></pre></td></tr></table></figure></li><li><p>For each 循环</p><ul><li><p>Java 的一种功能很强的循环结构， 可以用来依次处理数组中的每个元素（其他类型的元素集合亦可）而不必为指定下标值而分心。</p><p><code>for (variable : collection) statement</code></p><p>定义一个变量用于暂存集合中的每一个元素， 并执行相应的语句（当然， 也可以是语句块)。collection 这一集合表达式必须是一个数组或者是一个实现了 Iterable 接口的类对象（例如ArrayList )。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> element : a)</span><br><span class="line">System.out.println(element):</span><br></pre></td></tr></table></figure></li></ul></li><li><p>想打印数组中的所有值利用 Arrays 类的 toString 方法更简单。 调用 Arrays.toString(a), 返回一个包含数组元素的字符串， 这些元素被放置在括号内， 并用逗号分隔， 例如，“ [2,3,5,7,11,13]”、 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(a));</span><br></pre></td></tr></table></figure></li><li><p>数组初始化以及匿名数组</p><ul><li><p>在 Java中， 提供了一种创建数组对象并同时赋予初始值的简化书写形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] small Primes = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span> &#125;;</span><br></pre></td></tr></table></figure><p>甚至还可以初始化一个匿名的数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span> &#125;</span><br><span class="line">small Primes = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span> &#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数组拷贝</p><ul><li><p>在 Java 中， 允许将一个数组变量拷贝给另一个数组变量。这时， 两个变量将引用同一 个数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] luckyNumbers = smallPrimes;</span><br><span class="line">1uckyNumbers[<span class="number">5</span>] = <span class="number">12</span>; <span class="comment">// now smallPrimes[5] is also 12</span></span><br></pre></td></tr></table></figure></li><li><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 Arrays 类的 copyOf方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] copiedLuckyNumbers = Arrays.copyOf(luckyNumbers, luckyNumbers.length) ;</span><br></pre></td></tr></table></figure><p>第 2 个参数是新数组的长度。这个方法通常用来增加数组的大小：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">luckyNumbers = Arrays.copyOf(luckyNumbers, <span class="number">2</span> * luckyNumbers.length);</span><br></pre></td></tr></table></figure><p>如果数组元素是数值型，那么多余的元素将被赋值为 0 ; 如果数组元素是布尔型， 则将赋值<br>为 false。相反， 如果长度小于原始数组的长度，则只拷贝最前面的数据元素。</p></li></ul></li><li><p>命令行参数</p><ul><li>  前面已经看到多个使用 Java 数组的示例。 每一个 Java 应用程序都有一个带 String arg[ ]参数的 main 方法。这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数.</li></ul></li><li><p>数组排序</p><ul><li><p>要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10000</span>];</span><br><span class="line">Arrays.sort(a)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>多维数组</p><ul><li><p>在 Java 中， 声明一个二维数组相当简单。 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span>[][] balances;</span><br></pre></td></tr></table></figure></li><li><p>与一维数组一样， 在调用 new 对多维数组进行初始化之前不能使用它。 在这里可以这样初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">balances = <span class="keyword">new</span> <span class="keyword">double</span>[NYEARS] [NRATES]:</span><br></pre></td></tr></table></figure><p>另外， 如果知道数组元素， 就可以不调用 new， 而直接使用简化的书写形式对多维数组<br>进行初始化。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] magicSquare =</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">16</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">13</span>&#125;，</span><br><span class="line">&#123;<span class="number">5</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">8</span>&#125;,</span><br><span class="line">(<span class="number">9</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">1</span>&#125;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>一旦数组被初始化， 就可以利用两个方括号访问每个元素， 例如，<code>balances[i][j]</code></p><p>例如使用初始余额来初始化这个数组的第一行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; balances[<span class="number">0</span>].length; j++)</span><br><span class="line">balances[<span class="number">0</span>][j] = <span class="number">10000</span>;</span><br></pre></td></tr></table></figure><p>然后， 按照下列方式计算其他行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; balances.length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; balances[i].length; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> oldBalance = balances[i - <span class="number">1</span>][j]:</span><br><span class="line"><span class="keyword">double</span> interest = . . .;</span><br><span class="line">balances[i][j] = oldBalance + interest;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>要想快速地打印一个二维数组的数据元素列表， 可以调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.deepToString(a)) ;</span><br></pre></td></tr></table></figure></li><li><p>for each 循环语句不能自动处理二维数组的每一个元素。它是按照行， 也就是一维教组处理的要想访问二维教组 a 的所有元素， 需要使用两个嵌套的循环， 如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span>[] row : a)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span> value : row)</span><br><span class="line"><span class="keyword">do</span> something with value</span><br></pre></td></tr></table></figure></li></ul></li><li><p>不规则数组</p><ul><li><p>Java 实际上没有多维数组， 只有一维数组。 多维数组被解释为“ 数组的数组。</p></li><li><p>表达式<code>balances[i]</code>引用第 i 个子数组， 也就是二维表的第 i 行。它本身也是一个组，<code>balances[i][j]</code>引用这个数组的第 j 项。由于可以单独地存取数组的某一行， 所以可以让两行交换:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doubleQ temp = balances[i]:</span><br><span class="line">balances[i] = balances[i + <span class="number">1</span>];</span><br><span class="line">balances[i + <span class="number">1</span>] = temp;</span><br></pre></td></tr></table></figure></li><li><p>还可以方便地构造一个“ 不规则” 数组， 即数组的每一行有不同的长度。</p><p>要想创建一个不规则的数组， 首先需要分配一个具有所含行数的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] odds = <span class="keyword">new</span> <span class="keyword">int</span> [NMAX + <span class="number">1</span>] [] ;</span><br></pre></td></tr></table></figure><p>接下来， 分配这些行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt;= NMAX ; n++)</span><br><span class="line">odds[n] = <span class="keyword">new</span> <span class="keyword">int</span> [n + <span class="number">1</span>] ;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h2><h3 id="4-1-面对对象程序设计概述"><a href="#4-1-面对对象程序设计概述" class="headerlink" title="4.1 面对对象程序设计概述"></a>4.1 面对对象程序设计概述</h3><ol><li>面向对象的程序是由对象组成的， 每个对象包含对用户公开的特定功能部分和隐藏的实现部分。</li><li>从根本上说， 只要对象能够满足要求， 就不必关心其功能的具体实现过程。在 OOP 中， 不必关心对象的具体实现， 只要能<br>够满足用户的需求即可。</li><li>对于一些规模较小的问题， 将其分解为过程的开发方式比较理想。而面向对象更加适用于解决规模较大的问题。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpft350j30hu0dht9w.jpg"                      alt="image-20210905155918979"                ></p><h4 id="4-1-1类"><a href="#4-1-1类" class="headerlink" title="4.1.1类"></a>4.1.1类</h4><ol><li>类（ class) 是构造对象的模板或蓝图。 由类构造 （construct) 对象的过程称为创建类的实例 （instance ) .</li><li>封装 （ encapsulation , 有时称为数据隐藏）是与对象有关的一个重要概念。 <ul><li>从形式上看，封装不过是将数据和行为组合在一个包中， 并对对象的使用者隐藏了数据的实现方式。</li><li>对象中的数据称为实例域（ instance field ), 操纵数据的过程称为方法（ method )。 </li><li>对于每个特定的类实例（对象）都有一组特定的实例域值。这些值的集合就是这个对象的当前状态 （ state )。<br>无论何时， 只要向对象发送一个消息，它的状态就有可能发生改变。</li><li>实现封装的关键在于绝对不能让类中的方法直接地访问其他类的实例域。 </li><li>程序仅通过对象的方法与对象数据进行交互。封装给对象赋予了“ 黑盒” 特征， 这是提高重用性和可靠性<br>的关键。</li></ul></li><li>有的类都源自于一个“ 神通广大的超类”，它就是 Object。</li><li>在扩展一个已有的类时， 这个扩展后的新类具有所扩展的类的全部属性和方法。在新类中， 只需提供适用于这个新类的新方法和数据域就可以了。通过扩展一个类来建立另外一个类的过程称为继承（inheritance）。</li></ol><h4 id="4-1-2对象"><a href="#4-1-2对象" class="headerlink" title="4.1.2对象"></a>4.1.2对象</h4><ol><li><p>要想使用 OOP,—定要清楚对象的三个主要特性：</p><ul><li><p>对象的行为（behavior)—可以对对象施加哪些操作，或可以对对象施加哪些方法？</p></li><li><p>对象的状态 （state)—当施加那些方法时，对象如何响应？</p></li><li><p>对象标识（identity )—如何辨别具有相同行为与状态的不同对象？</p></li></ul></li><li><hr><p>同一个类的所有对象实例， 由于支持相同的行为而具有家族式的相似性。对象的行为是用可调用的方法定义的。</p></li><li><p>每个对象都保存着描述当前特征的信息。这就是对象的状态。对象的状态可能会随着时间而发生改变，但这种改变不会是自发的。 对象状态的改变必须通过调用方法实现(如果不经过方法调用就可以改变对象状态， 只能说明封装性遭到了破坏。)</p></li><li><p>作为一个类的实例， 每个对象的标识永远是不同的， 状态常常也存在着差异。</p></li><li><p>对象的这些关键特性在彼此之间相互影响着。</p><hr></li></ol><h4 id="4-1-3-识别类"><a href="#4-1-3-识别类" class="headerlink" title="4.1.3 识别类"></a>4.1.3 识别类</h4><ol><li><p>传统的过程化程序设计， 必须从顶部的 main 函数开始编写程序。在面向对象程序设计时没有所谓的“ 顶部”。对于学习OOP 的初学者来说常常会感觉无从下手。答案是：  首先从设计类开始，然后再往每个类中添加方法。</p></li><li><p>识别类的简单规则是在分析问题的过程中寻找名词，而方法对应着动词。</p></li></ol><blockquote><p>例如， 在订单处理系统中，有这样一些名词：<br>•商品（Item )<br>•订单（Order)<br>•送货地址（Shippingaddress)<br>•付 款 ( Payment )<br>•账户（Account)</p><p>这些名词很可能成为类 Item、 Order 等。接下来， 查看动词：商品被添加到订单中， 订单被发送或取消， 订单货款被支付。对于<br>每一个动词如：“ 添加”、“ 发送”、“ 取消” 以及“ 支付”， 都要标识出主要负责完成相应动作的对象。 例如， 当一个新的商品添加到订单中时， 那个订单对象就是被指定的对象， 因为它知道如何存储商品以及如何对商品进行排序。也就是说，add 应该是 Order 类的一个方法，而 Item 对象是一个参数。</p></blockquote><h4 id="4-1-4类与类之间的关系"><a href="#4-1-4类与类之间的关系" class="headerlink" title="4.1.4类与类之间的关系"></a>4.1.4类与类之间的关系</h4><ol><li><p>最常见的关系有以下三种：</p><ul><li><p>依赖（“use-a”）</p><blockquote><p>依赖（dependence ), 即“ uses-a” 关系， 是一种最明显的、 最常见的关系。例如， Order类使用 Account 类是因为 Order 对象需要访问 Account 对象查看信用状态。但是 Item 类不依赖于 Account 类， 这是因为 Item 对象与客户账户无关。因此， 如果一个类的方法操纵另一个类的对象，我们就说一个类依赖于另一个类。</p></blockquote><ul><li>应该尽可能地将相互依赖的类减至最少。用软件工程的术语来说， 就是让类之间的耦合度最小。</li></ul></li><li><p>聚合（“has- a”）</p><blockquote><p>聚合（aggregation ), 即“ has-a” 关系， 又可称为关联，是一种具体且易于理解的关系。 例如， 一个Order 对象包含一些 Item 对象。聚合关系意味着类 A 的对象包含类 B 的对象。</p></blockquote></li><li><p>继承（“is-a”）</p><blockquote><p>继承（inheritance ), 即“ is-a” 关系， 是一种用于表示特殊与一般关系的。 例如， RushOrder类由 Order 类继承而来。 在具有特殊性的 RushOrder 类中包含了一些用于优先处理的特殊方法， 以及一个计算运费的不同方法；而其他的方法， 如添加商品、 生成账单等都是从Order 类继承来的。一般而言， 如果类 A 扩展类 B, 类 A 不但包含从类 B 继承的方法，还会拥有一些额外的功能。</p></blockquote></li></ul></li></ol><h3 id="4-2使用预定义类"><a href="#4-2使用预定义类" class="headerlink" title="4.2使用预定义类"></a>4.2使用预定义类</h3><ul><li>并不是所有的类都具有面向对象特征。 例如，Math 类。</li></ul><blockquote><p>程序中，可以使用 Math 类的方法， 如 Math.random, 并只需要知道方法名和参数 （如果有的话，) 而不必了解它的具体实现过程。这正是封装的关键所在，当然所有类都是这样。但遗憾的是， Math 类只封装了功能，它不需要也不必隐藏数据。 由于没有数据，因此也不必担心生成对象以及初始化实例域.</p></blockquote><h4 id="4-2-1对象和对象变量"><a href="#4-2-1对象和对象变量" class="headerlink" title="4.2.1对象和对象变量"></a>4.2.1对象和对象变量</h4><ol><li><p>在java之中，想要使用对象必须先构造对象，并指定其初始状态。</p><ul><li><p>使用构造器（construtor）构造新实例，构造器是一种特殊的方法，用来构造和初始化对象。</p><blockquote><p>在标准java库中包含了一个date类，它的作用是用来描述一个时间点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">december <span class="number">31</span>,<span class="number">1999</span>,<span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> GMT </span><br></pre></td></tr></table></figure></blockquote></li></ul></li><li><p>构造器的名字应该与类名相同，因此，Date类的构造器的名字就叫做Date。想要构造一个Date对象，得在构造器前面加上一个new操作符，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Date()</span><br><span class="line"><span class="comment">//这个构造器构造了一个新的对象。这个对象被初始化成了当前的日期和时间</span></span><br></pre></td></tr></table></figure><ul><li>也可将这个对象传递给一个方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="keyword">new</span> Date());</span><br></pre></td></tr></table></figure><ul><li><p>还可以将一个方法应用于刚刚创建的额对象。Date类中就有一个string方法。这个方法将返回日期的字符串描述。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> Date.toString();</span><br></pre></td></tr></table></figure></li></ul><p>在这两个例子里，对象仅仅使用了一次。通常我们希望对象可以多次使用，因此，可将对象放入一个变量之中。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date birthday = <span class="keyword">new</span> Date();</span><br></pre></td></tr></table></figure><p>==对象与对象变量之间的区别==</p><ul><li><p><code>Date deadline;</code>定义了一个对象deadline，它可以引用date类型的对象。但是，==一定要认识到，变量deadline不是一个变量，实际上也没有引用对象。此时不能把任何的Date方法应用在这个变量上。==例如下面这个语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s= deadline.toString();</span><br></pre></td></tr></table></figure><p>将产生编译错误。</p><p>必须要先初始化变量deadline，这里有两个选择：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deadline = <span class="keyword">new</span> Date();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deadline = birthday;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpd1xahj30c2061q36.jpg"                      alt="image-20210905193827965"                ></p></li><li><p>在Java中，任何对象变量的值都是对储存在另一个地方的一个对象的引用。</p></li><li><p>局部变量不会自动地初始化为null，而必须通过调用new或者将它们设置为null进行初始化。</p></li></ul></li></ol><h4 id="4-2-2Java类库中的LocalDate类"><a href="#4-2-2Java类库中的LocalDate类" class="headerlink" title="4.2.2Java类库中的LocalDate类"></a>4.2.2Java类库中的LocalDate类</h4><ol><li><p>类库设计者决定将保存时间与给时间点命名分开。所以标准 Java 类库分别包含了两个类：一个是用来表示时间点的 Date 类；另一个是用来表示大家熟悉的日历表示法的 LocalDate 类。</p></li><li><p>不要使用构造器来构造 LocalDate 类的对象。实际上，应当使用静态工厂方法 (factory method) 代表你调用构造器。下面的表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDate.now()</span><br></pre></td></tr></table></figure><p>会构造一个新对象，表示构造这个对象时的日期。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpc0t10j30ji0cy0ul.jpg"                      alt="image-20210905195854572"                ></p></li></ol><h4 id="4-2-3更改器方法与访问器方法"><a href="#4-2-3更改器方法与访问器方法" class="headerlink" title="4.2.3更改器方法与访问器方法"></a>4.2.3更改器方法与访问器方法</h4><ol><li>只 访 问 对 象 而 不 修 改 对 象 的 方 法 有 时 称 为 访 问 器 方 法 </li></ol><h3 id="4-3用户自定义类"><a href="#4-3用户自定义类" class="headerlink" title="4.3用户自定义类"></a>4.3用户自定义类</h3><h4 id="4-3-1-最简单的定义形式是："><a href="#4-3-1-最简单的定义形式是：" class="headerlink" title="4.3.1 最简单的定义形式是："></a>4.3.1 最简单的定义形式是：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">field1</span><br><span class="line">field2</span><br><span class="line">...</span><br><span class="line">construct1</span><br><span class="line">construct2</span><br><span class="line">...</span><br><span class="line">method1</span><br><span class="line">method2</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如下面这段代码所演示的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//instance field</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">  <span class="keyword">private</span> Date hireDay;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//constrator</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n,<span class="keyword">double</span> s,<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    name = n;</span><br><span class="line">    salary = s;</span><br><span class="line">    GregrorianCalendar calendar=<span class="keyword">new</span> GregrorianCalendar(year,month-<span class="number">1</span>,day);</span><br><span class="line">    hireday = <span class="function">calandar <span class="title">gettime</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//a method</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getname</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//more method</span></span><br><span class="line">  .....</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一个源文件里只能有一个公共类，但是可以有任意数目的非公有类。</p><h4 id="4-3-2-多个源文件的使用"><a href="#4-3-2-多个源文件的使用" class="headerlink" title="4.3.2 多个源文件的使用"></a>4.3.2 多个源文件的使用</h4><ul><li>如果习惯将每一个类都放在一个单独的源文件之中，那么可以有两种编译源程序的方法：<ul><li>一种是使用通配符调用java编译器：<code>javac Employee*.java</code>,所有与通配符相匹配的源文件都将被编译成类文件。</li><li>或者键入<code>jacac.EmployeeTest.java</code></li></ul></li></ul><h4 id="4-3-3剖析Employee类"><a href="#4-3-3剖析Employee类" class="headerlink" title="4.3.3剖析Employee类"></a>4.3.3剖析Employee类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n,<span class="keyword">double</span> s,<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getHireDay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span></span></span><br></pre></td></tr></table></figure><p>这个类的所有方法都被标记为public,这就意味着任何类的任何方法都能调用这些方法。接下来需要注意的是，Employee类的实例中有三个实例域用来存放将被操作的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"><span class="keyword">private</span> Date hireDay;</span><br></pre></td></tr></table></figure><blockquote><p>private能保证只有Employee类自身的方法才能访问这些实例域，而其他的方法则不能读写这些域。</p><p>对此相对比的是，极不推荐使用public来来标记实例域，因为这样做任何的方法都能读写修改该实例域中的数据，这也就破坏了封装。</p></blockquote><h4 id="4-3-4从构造器开始"><a href="#4-3-4从构造器开始" class="headerlink" title="4.3.4从构造器开始"></a>4.3.4从构造器开始</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n,<span class="keyword">double</span> s,<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  name=n;</span><br><span class="line">  salary=s;</span><br><span class="line">  GregrorianCalendar calendar = <span class="keyword">new</span> GregroCalendar(year,month-<span class="number">1</span>,day);</span><br><span class="line">  hireDay=calendar.getTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到，构造器类的名称相同。在构造Employee类的对象时，构造器会运行，以便将实例域初始化成所希望的状态。例如在这条代码<code>new Employee(&quot;James Bond&quot;，10000，1950，1，1)</code>创建Employee类实例时会把实例域设置成：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = James Bond;</span><br><span class="line">salary = <span class="number">10000</span>;</span><br><span class="line">hireDay = january <span class="number">1</span>,<span class="number">1950</span>;</span><br></pre></td></tr></table></figure><p>构造器和其他方法的不同之处在于，它的调用总是伴随着new操作符的执行，而不能使用构造器对一个已经存在的对象进行操作来达到重新设置实例域的目的，否则的话会出现编译错误。</p><blockquote><p>记忆要点</p><ol><li>构造器与类同名；</li><li>每个类可以有一个以上的构造器；</li><li>构造器可以有0个，1个或者多个参数；</li><li>构造器没有返回值；</li><li>构造期总是伴随着new操作符一起使用</li></ol></blockquote><h4 id="4-3-5隐式参数和显式参数"><a href="#4-3-5隐式参数和显式参数" class="headerlink" title="4.3.5隐式参数和显式参数"></a>4.3.5隐式参数和显式参数</h4><p>例如代码段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">double</span> raise = salary*byPercent/<span class="number">100</span>;</span><br><span class="line">  salary+=raise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将调用这个方法的对象的salary的实例域设置成新值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">number007.raiseSalary(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><ul><li>在方法名后面的括号里面的值就是一个显式参数</li><li>出现在方法名前的Employee类对象就是隐式参数</li><li>可以看到，显式参数是明显直白的出现在方法的声明之中的，而隐式参数没有出现在方法的声明之中；在每一个方法中，this表示隐式参数，例如可以把上述代码块的<code>salary</code>统统改成<code>this.salary</code>,可以明显地将实例域和局部变量区别开来。</li><li>在java中，所有方法都必须在类的内部进行定义，但并不代表它们就是内联方法。</li></ul><h4 id="4-3-6-封装的优点"><a href="#4-3-6-封装的优点" class="headerlink" title="4.3.6 封装的优点"></a>4.3.6 封装的优点</h4><ul><li><p>有些时候需要获取或者设置实例域的值，应该提供下面三个内容：</p><ul><li>一个私有的数据域</li><li>一个公有域的访问器方法</li><li>一个公有域的更改器方法</li></ul><p>有以下两点好处：</p><ol><li>可以改变内部实现，除了该类的方法之外不会影响其他代码；</li><li>更改器方法可以执行错误检查。</li></ol></li><li><p>注意不要编写返回引用可变对象的访问器方法。如果需要返回一个可变对象的引用，应该首先对它进行克隆，对象克隆是指存放在另外一个位置上的对象副本。</p></li></ul><h4 id="4-3-7基于类的访问权限"><a href="#4-3-7基于类的访问权限" class="headerlink" title="4.3.7基于类的访问权限"></a>4.3.7基于类的访问权限</h4><ul><li>一个方法可以访问同一个类下面所属的所有对象的数据，例如</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Employee other)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name.equals(other name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-8-私有方法"><a href="#4-3-8-私有方法" class="headerlink" title="4.3.8 私有方法"></a>4.3.8 私有方法</h4><ul><li>有时我们可能希望一个计算机代码分成若干个独立的辅助方法，通常这些方法不应该成为公有接口的一部分，这是由于他们往往与当前的实现机制非常紧密，或者需要一个特别的歇息以及一个特别的调用次序。</li><li>实现方法：只需要将关键字public改为private即可</li></ul><p>4.3.9 final实例域</p><ul><li>可以将实例域定义成final，构建对象时必须初始化这样的域，且后续不能再对它进行修改。</li><li>final修饰符大都应用于基本类型域，或者不可变类的域。</li></ul><h3 id="4-4静态域和静态方法"><a href="#4-4静态域和静态方法" class="headerlink" title="4.4静态域和静态方法"></a>4.4静态域和静态方法</h3><h4 id="4-4-1-静态域"><a href="#4-4-1-静态域" class="headerlink" title="4.4.1 静态域"></a>4.4.1 静态域</h4><ul><li>如果把域定义成static，每个类中只有一个这样的域，而每个一个对象对于所有的实例域却都有自己的拷贝。</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">id = nextId;</span><br><span class="line">nextId++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设为Harry设定雇员标识码：</p><p>Harry.setId();</p><p>Harry的id域被设置为静态域nextId当前的值，并且静态域的值加1。</p></blockquote><h4 id="4-4-2-静态常量"><a href="#4-4-2-静态常量" class="headerlink" title="4.4.2 静态常量"></a>4.4.2 静态常量</h4><ul><li><p>静态变量使用较少，静态常量使用的却比较多，例如PI：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI =  <span class="number">3.14159265358979323846</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在程序中可以采用<code>Math.PI</code>的形式来获得这个常量。</p></li><li><p>前面提到最好不要将域设置成public，但公有常量却没问题，因为out被设置为final，故不允许将其他打印流赋值给它。</p></li></ul><h4 id="4-4-3-静态方法"><a href="#4-4-3-静态方法" class="headerlink" title="4.4.3 静态方法"></a>4.4.3 静态方法</h4><ul><li><p>静态方法是一种不能向对象实时操作的方法。例如<code>Math.pow(x,a)</code>,在运算时，不使用任何Math对象，换句话说就是没有隐式参数。</p></li><li><p>可以认为静态方法是没有this参数的方法（在一个非静态的方法中，this参数表示这个方法的隐式参数）</p></li><li><p>Employee类的静态方法不能访问Id实例域，因为它不能操作对象。</p></li><li><p>静态方法可以访问自身类中的静态域：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNextId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> nextId;</span><br><span class="line">&#125;</span><br><span class="line">可以通过类名调用这个方法：</span><br><span class="line">  <span class="keyword">int</span> n = Employee.getNext();</span><br></pre></td></tr></table></figure></li><li><p>在下面两种情况下使用静态方法：</p><ul><li>一个方法不需要访问对象状态，其所需的参数都是通过显式参数提供的（例如：<code>Employee.getNextID</code>）</li><li>一个方法只需要访问类中的静态域（例如：Employee.getNextId）。</li></ul><h4 id="4-4-4-工厂方法"><a href="#4-4-4-工厂方法" class="headerlink" title="4.4.4 工厂方法"></a>4.4.4 工厂方法</h4><ul><li>静态方法还有另外一种常见的用途，类似于LocalDate和NumberFormat的类使用静态工厂方法来构造对象。例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance();</span><br><span class="line">NumberFormat percentFormatter = NumberFormat.getpercentInstance();</span><br><span class="line"><span class="keyword">double</span> x = <span class="number">0.1</span>;</span><br><span class="line">system.out.println(currencyFormatter.format(x));</span><br><span class="line">system.out.println(percentFormatter.format(x));</span><br></pre></td></tr></table></figure><blockquote><p>为什么NumberFormat类不利用构造器来完成这些操作呢？主要有以下两个原因：</p><ul><li>无法命名构造器。构造器的名字必须与类名相同，但是，这里希望将得到的货币实例和百分比实例采用不同的名字。</li><li>当使用构造器时，无法改变所构造对象的类型。而Factory方法将返回一个DecimalFormat类对象，这是NumberFormat的子类。</li></ul></blockquote><h4 id="4-4-5-main方法"><a href="#4-4-5-main方法" class="headerlink" title="4.4.5 main方法"></a>4.4.5 main方法</h4><ul><li>不需要使用对象调用静态方法。main就是个静态方法。</li><li>main方法不对任何对象进行才做，事实上，在启动程序时还没有任何一个对象，静态的main方法将执行并创建程序所需要的对象。</li></ul><blockquote><p>每一个类可以有一个main方法，这是一个常用于对类进行单元测试的技巧，例如可以在Employee类中添加一个main方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line"><span class="function">publlic <span class="title">employee</span><span class="params">(String n,<span class="keyword">double</span> s,<span class="keyword">int</span> year,<span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function">&#125;</span>&#123;</span><br><span class="line">...</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> Employee e = <span class="keyword">new</span> Employee(<span class="string">&quot;ROmeo&quot;</span>,<span class="number">50000</span>,<span class="number">2003</span>,<span class="number">3</span>,<span class="number">31</span>);</span><br><span class="line"> e.raiseSalary(<span class="number">10</span>);</span><br><span class="line"> system.out.println(e.getName()+<span class="string">&quot; &quot;</span>+e.getSalary());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果想要独立地运行测试Employee类，只需要执行：`java Employee`</span></span><br><span class="line"><span class="comment">//如果该类是一个更大型程序的一部分，就可以使用以下的语句来运行程序：</span></span><br><span class="line"><span class="comment">//`java Application`</span></span><br><span class="line"><span class="comment">//Employee类的main方法永远不会执行</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="4-5方法参数"><a href="#4-5方法参数" class="headerlink" title="4.5方法参数"></a>4.5方法参数</h3><blockquote><p>回顾一下有关参数传递给方法的一些专业术语：</p><ol><li>按值调用：表示方法接受的是调用者提供的值。</li><li>按引用调用：表示方法接受的是调用者提供的变量地址</li></ol><p>一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。</p></blockquote><ul><li><p>==java程序设计语言总是采用按值调用，不是引用调用。也就是说，方法得到的是所有参数值的一个拷贝，方法不能修改传递给它的任何参数变量的内容。==</p></li><li><p>方法参数的两种类型：</p><ul><li>基本数据类型（数字，布尔值）</li><li>对象引用</li></ul></li><li><p>==一个方法不可能修改一个基本数据类型的参数==，而对象引用作为参数则不一样了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tripleSalary</span><span class="params">(Employee x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x.raiseSalary(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    当调用时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">harry = <span class="keyword">new</span> Employee(...);</span><br><span class="line">tripleSalary(harry);</span><br></pre></td></tr></table></figure><p>具体的执行过程为：</p><figure class="highlight mk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. x被初始化为harry的拷贝，这里是一个对象的引用。</span><br><span class="line">2. raiseSalary方法引用与这个对象引用。x和harry同时引用的那个Employee对象的薪资提高了两倍。</span><br><span class="line">3. 方法结束之后，参数变量x不再使用。当然对象变量harry继续引用那个薪资增至三倍的固原对象。</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpefz4zj30j80azgmn.jpg"                      alt="image-20210914162110845"                ></p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpas0j1j30jk0f1gn1.jpg"                      alt="image-20210914162402773"                ></p><h3 id="4-6对象构造"><a href="#4-6对象构造" class="headerlink" title="4.6对象构造"></a>4.6对象构造</h3><h4 id="4-6-1-重载"><a href="#4-6-1-重载" class="headerlink" title="4.6.1 重载"></a>4.6.1 重载</h4><ul><li><p>定义：有些类有多个构造器，例如可以构造一个空的<code>StringBuilder</code>对象：</p><p><code>Stringbuilder messages = new Stringbuider();</code></p><p>亦可指定一个初始字符串：</p><p><code>StringBuilder todolist = new StringBuilder(&quot;To do:\n&quot;);</code></p><p>这种特征就叫做重载，即如果多个方法有相同的名字，不同的参数，便产生了重载。</p><blockquote><p>编译器必须挑选出具体执行哪个方法，它通过用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出相应的方法。</p><p>如果编译器找不到匹配的参数，就会产生编译时错误，因为根本不存在匹配，或者没有一个比其他的更好，这个过程叫做重载解析。</p></blockquote><ul><li><p>Java允许重载任何方法，而不只是构造器方法。因此要完整地描述一个方法，需要指出方法名以及参数类型，这叫做方法的签名。例如<code>String</code>类有四个成为indexOf的公有方法，他们的签名是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">indexOf(<span class="keyword">int</span>)</span><br><span class="line">indexOf(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line">indexOf(String)</span><br><span class="line">indexOf(String,<span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><p>返回类型不是方法签名的一部分，也就是说，不能有两个名字相同，参数类型也相同却返回不同类型值的方法。</p></li></ul><h4 id="4-6-2-默认域初始化"><a href="#4-6-2-默认域初始化" class="headerlink" title="4.6.2 默认域初始化"></a>4.6.2 默认域初始化</h4><ul><li>如果在构造器中没有显式地给域赋予初值，那么就会被自动得赋予初值：数值为0，布尔值为false，对象引用为null。</li></ul><blockquote><p>这也是域和局部变量的主要不同点，必须明确地初始化方法中的局部变量。但是，如果没有初始化类中的域，将会自动得初始化为默认值。</p></blockquote><ul><li>最好在使用之前初始化域。</li></ul><h4 id="4-6-3-无参数的构造器"><a href="#4-6-3-无参数的构造器" class="headerlink" title="4.6.3 无参数的构造器"></a>4.6.3 无参数的构造器</h4><ul><li>如果在编写一个类时没有编写构造器,那么系统就会提供一个无参数构造器。这个构造器将所有的实例域设置成默认值。于是，实例域中的数值型数据设置成0，布尔型数据设置成false，所有对象变量设置成null。</li><li>如果类中提供了至少一个构造器，但是没有提供无参数的构造器，则在构造对象时如果没有提供参数就会被视为不合法。</li></ul><h4 id="4-6-4-显式域初始化"><a href="#4-6-4-显式域初始化" class="headerlink" title="4.6.4 显式域初始化"></a>4.6.4 显式域初始化</h4><ul><li>通过重载类的构造器方法，可以采用多种形式设置类的实例域的初始状态。</li><li>在执行构造器之前，先执行赋值操作。当一个类的所有构造器都希望把相同的值赋予给某个特定的实例域时，这种方式特别有用。</li><li>初始值不一定是常量值，也可以调用方法对域进行初始化。</li></ul><h4 id="4-6-5-参数名"><a href="#4-6-5-参数名" class="headerlink" title="4.6.5 参数名"></a>4.6.5 参数名</h4><ul><li><p>在编写很小的构造器时，常常在参数命名上出现错误。例如用单个字符，但这样只有阅读代码才能晓得参数的含义.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n,<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  name=n;</span><br><span class="line">  salary=s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>另外一个技巧就是在每个参数前面加上一个前缀“a”，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String aName,<span class="keyword">double</span> aSalary)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  name=aName;</span><br><span class="line">  salary=aSalary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还有一个常用的技巧，基于这样的现实：参数变量用同样的名字将实例域屏蔽起来。例如，将参数命名成salary，salary将引用这个参数，而不是实例域。但是可以采用this.salary的形式访问实例域。回想一下，this指示隐式参数，也就是所构造的对象。</p></li></ul><h4 id="4-6-6-调用另外一个构造器"><a href="#4-6-6-调用另外一个构造器" class="headerlink" title="4.6.6 调用另外一个构造器"></a>4.6.6 调用另外一个构造器</h4><ul><li><p>关键字this引用方法的隐式参数，但它还有另外一个含义，如果构造器的第一个语句形如this(….),这个构造器将调用同一个类的另一个构造器，下面是个典型例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//calls Employee(String double)</span></span><br><span class="line">  <span class="keyword">this</span>(<span class="string">&quot;Employee #&quot;</span>+nextId s);</span><br><span class="line">  nextId++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用new Employee(60000)时，Employee(double)构造器将调用Employee（String,double）。采用这种方式使用this关键字非常有用，这样对公共的构造器代码部分只编写一次即可。</p></li></ul></li></ul><h4 id="4-6-7-初始化块"><a href="#4-6-7-初始化块" class="headerlink" title="4.6.7 初始化块"></a>4.6.7 初始化块</h4><ul><li><p>前文中有两种初始化数据域的方法：</p><ul><li>在构造器中设置值</li><li>在声明中赋值</li></ul><p>实际上还存在第三种机制，成为“初始化块”。在一个类的声明中，可以包含多个代码块，只要构造类的对象，这些块就会被执行。</p></li><li><p>由于初始化数据域有多种途径，所以列出构造过程的所有路径可能相当混乱。下面是调用构造器的具体处理步骤：</p><ol><li>所有数据域被初始化为默认值</li><li>按照在类声明中出现的次序，依次执行所有域初始化语句和初始化块</li><li>如果构造器第一行调用量第二个构造器，则执行第二个构造器主体</li><li>执行这个构造器的主体</li></ol><p>编写代码时我们应当精心组织好初始化代码，有利于其他人理解。</p></li><li><p>如果对类的静态域进行初始化的代码比较复杂，你们可以使用静态的初始化块。将代码放在一个块中，并标记关键字static。</p></li></ul><h4 id="4-6-8-对象析构与finalize方法"><a href="#4-6-8-对象析构与finalize方法" class="headerlink" title="4.6.8 对象析构与finalize方法"></a>4.6.8 对象析构与finalize方法</h4><ul><li>Java中有自动的垃圾回收器，不需要人工回收内存，故而Java不支持析构器</li></ul><blockquote><p>析构器：<a class="link"   href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/4456504" >计算机语言<i class="fas fa-external-link-alt"></i></a>中的<a class="link"   href="https://baike.baidu.com/item/%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/9483718" >析构函数<i class="fas fa-external-link-alt"></i></a>，当一个对象在消亡的时候，由<a class="link"   href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8/8853067" >编译器<i class="fas fa-external-link-alt"></i></a>自动调用，主要用来释放内存。</p></blockquote><h3 id="4-7-包"><a href="#4-7-包" class="headerlink" title="4.7 包"></a>4.7 包</h3><ul><li>Java允许使用包将类组织起来，借助于宝可以方便地组织自己的代码，并将自己的代码与别人提供的代码库分开管理。</li><li>标准的Java类库分布在多个包中，包括java.lang,java.util和java.net等。</li><li>标准的java包具有一个层次结构，也可以使用嵌套层次组织包。所有标准的java包都处在java和javax包层次中。</li><li>使用包的主要原因是确保类名的唯一性，同名的类放在不同的包中，不会产生冲突；为了保证包名的绝对唯一性，建议将域名以逆序的形式作为包名，如<code>com.horstman</code>，还能进一步地划分为子包，如<code>com.horstman.corejava</code>。</li><li>从编译器的角度来看，嵌套的包没有任何关系。</li></ul><h4 id="4-7-1-类的导入"><a href="#4-7-1-类的导入" class="headerlink" title="4.7.1 类的导入"></a>4.7.1 类的导入</h4><ul><li><p>一个类可以使用所属包的所有类，以及其他包中的共有类。采用两种方式访问另一个包中的公有类：</p><ul><li><p>第一种方式是在每个类名之前添加完整的包名。较为的繁琐，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.time.LocalDate today = java.time.LocalDate.now()；</span><br></pre></td></tr></table></figure></li><li><p>简单常用的另外一种是使用import语句，import语句是一种引用包含在包中的类的简明描述。一旦使用了import语句，在使用类时，就不必写出包的全名了。</p></li><li><p>可以使用import语句导入一个特定的类或者整个包。该语句应该位于源文件的顶部。</p></li><li><p>在多数情况下，只导入需要的包，不必过多得注意它们，但是如果发生命名冲突时，就需要注意他们的名字了。</p><blockquote><p>例如，<code>java.util</code>和<code>java.sql</code>中都有日期(Date)类,导入 如下两个包时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br></pre></td></tr></table></figure><p>当程序在使用Date类时，编译就会出现以下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date today; <span class="comment">// Error java.util.Date or java.sql.Date?</span></span><br></pre></td></tr></table></figure><p>因为此时编译器无法确定是使用哪个Date类，此时应该在导入处写明具体是哪个包中的Date类；如果都需要使用时那么在使用处应该标明完整的包名。</p></blockquote></li></ul></li></ul><h4 id="4-7-2-静态导入"><a href="#4-7-2-静态导入" class="headerlink" title="4.7.2 静态导入"></a>4.7.2 静态导入</h4><ul><li><p>import不仅可以导入类，还可以导入静态方法和静态域</p><blockquote><p>例如，在源文件的顶部，增加一条这样的指令：<code>import static java lang.system.*;</code></p><p>就可以使用system的静态方法和静态域的时候，不加类名前缀：</p><p><code>out.println(&quot;Hello World&quot;);</code></p><p><code>exit(0);</code></p></blockquote></li><li><p>这种方式可以让代码美观：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqrt(pow(x,<span class="number">2</span>)+pow(y,<span class="number">2</span>));<span class="comment">//美观</span></span><br><span class="line">Math.sqrt(Math.pow(x,<span class="number">2</span>)+Math.pow(y,<span class="number">2</span>));<span class="comment">//繁杂</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-7-3-将类放入包中"><a href="#4-7-3-将类放入包中" class="headerlink" title="4.7.3 将类放入包中"></a>4.7.3 将类放入包中</h4><ul><li><p>想要将一个类放入一个包中，就必须将包的的名字放在源文件的开头，定义类的代码之前。</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horstman.corejava;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>如果没有在源文件中放置package语句，这个源文件中的类会被放置在一个默认的包中（defaulf package）中。</p></li></ul><h4 id="4-7-4-包作用域"><a href="#4-7-4-包作用域" class="headerlink" title="4.7.4 包作用域"></a>4.7.4 包作用域</h4><ul><li>包不是一个封装的实体。也就是说，任何人都可以向包中添加更多的类。</li></ul><h4 id="4-8类路径"><a href="#4-8类路径" class="headerlink" title="4.8类路径"></a>4.8类路径</h4><ul><li><p>类储存文件系统的子目录中，类的路径必须与包名匹配，另外，类文件也可以储存在JAR（java归档）文件中。</p></li><li><p>为了使类能够被多个程序共享，需要一下几点：</p><ul><li>把类放在一个目录中，这个目录是包树状结构的基目录。</li><li>将JAR文件放在一个目录中</li><li>设置类路径（class path）</li></ul><p>在UNIX环境中，类路径的不同项目之间采用冒号(;)分隔；而在Windows系统中，则以分号（;）分隔。</p></li><li><p>类路径所列出的目录和归档文件是搜寻类的起始点。</p></li><li><p>编译器定位文件比虚拟机复杂的多。如果引用一个类，而没有指出这个类所爱的包，那么编译器将首先查找包含着这个类的包，并查询所有的import指令，确定其中是否包含被引用的类。</p></li></ul><h4 id="4-8-1-设置类路径"><a href="#4-8-1-设置类路径" class="headerlink" title="4.8.1 设置类路径"></a>4.8.1 设置类路径</h4><ul><li>最好采用<code>-classpath（或者-cp）</code>选项指定类路径。</li><li>整个指令应该书写在一行中。将这样一个长的命令行放在一个shell脚本或者一个批处理文件中是一个不错的主意。</li><li>利用 -dasspath 选项设置类路径是首选的方法， 也可以通过设置 CLASSPATH 环境变量 完成这个操作。</li></ul><h3 id="4-9文档注释"><a href="#4-9文档注释" class="headerlink" title="4.9文档注释"></a>4.9文档注释</h3><ul><li>如果在源代码中添加以专用的定界符 /** 开始的注释， 那么可以很容易地生成一个看上 去具有专业水准的文档。这是一种很好的方式， 因为这种方式可以将代码与注释保存在一个 地方。如果将文档存人一个独立的文件中， 就有可能会随着时间的推移， 出现代码和注释不 一致的问题。 然而， 由于文档注释与源代码在同一个文件中， 在修改源代码的同时， 重新运 行 javadoc 就可以轻而易举地保持两者的一致性。</li></ul><h4 id="4-9-1-注释的插入"><a href="#4-9-1-注释的插入" class="headerlink" title="4.9.1 注释的插入"></a>4.9.1 注释的插入</h4><ul><li>应该编写注释的部分：<ul><li>包</li><li>共有类与接口</li><li>共有的和受保护的构造器以及方法</li><li>共有的和受保护的域</li></ul></li><li>注释应该放置在所描述的特性前面，每个/***…..*/文档注释在标记之后紧跟着“自由格式文本”，标记以@开始，如<code>@author</code>,<code>@param</code>。</li><li>自由格式文本的第一句应该是一个概要性的句子，javadoc实用程序将自动得将这些句子抽取出来形成概要页。</li><li>在自由格式文本中，可以使用HTML修饰符。</li></ul><h4 id="4-9-2-类注释"><a href="#4-9-2-类注释" class="headerlink" title="4.9.2 类注释"></a>4.9.2 类注释</h4><ul><li>类注释必须放在import语句之后，类定义之前。</li></ul><h4 id="4-9-3-方法注释"><a href="#4-9-3-方法注释" class="headerlink" title="4.9.3 方法注释"></a>4.9.3 方法注释</h4><ul><li><p>每一个方法注释必须放在所描述方法之前。除了通用的标记之外，还可以使用下面的标记：</p><ul><li><p>@param 变量描述</p><p>这个标记将对当前方法的“ param” (参数)部分添加一个条目。这个描述可以占据多</p><p>行， 并可以使用 HTML 标记。一个方法的所有 @param 标记必须放在一起。</p></li><li><p>return 描述</p><p>这个标记将对当前方法添加“ return” (返回)部分。这个描述可以跨越多行， 并可以</p><p>使用 HTML 标记。</p></li><li><p>throws类描述</p><p>这个标记将添加一个注释， 用于表示这个方法有可能抛出异常。</p></li></ul></li></ul><h4 id="4-9-4-域注释"><a href="#4-9-4-域注释" class="headerlink" title="4.9.4 域注释"></a>4.9.4 域注释</h4><ul><li>只需要对公有域（通常是指静态变量）建立文档。</li></ul><h4 id="4-9-5-通用注释"><a href="#4-9-5-通用注释" class="headerlink" title="4.9.5 通用注释"></a>4.9.5 通用注释</h4><p>下面的标记可以用在类文档的注释中：</p><ul><li><p>eauthor 姓名</p><p>这个标记将产生一个 ** author” ( 作者)条目。可以使用多个 @aUthor 标记， 每个 @</p><p>author 标记对应一个作者</p></li><li><p>©version</p><p>这个标记将产生一个“ version ”(版本)条目。 这里的文本可以是对当前版本的任何描</p><p>述。</p></li></ul><p>下面的标记可以用于所有的文档注释中：</p><ul><li><p>@sinee文本</p><p>这个标记将产生一个“ since” (始于)条目。这里的 text 可以是对引人特性的版本描 述 例如 ©since version 1.7.10。</p></li><li><p>@deprecated</p><p>这个标记将对类、方法或变量添加一个不再使用的注释。 文本中给出了取代的建议。 例如，</p><p>@deprecated Use <code> setVIsible(true) </code> instead</p><p>通过 @see 和 @link 标记， 可以使用超级链接， 链接到 javadoc 文档的相关部分或外</p><p>部文档。</p></li><li><p>see引用</p><p>这个标记将在“ see also” 部分增加一个超级链接。它可以用于类中， 也可以用于方 法中。 这里的引用可以选择下列情形之一:</p><p>package, class#feature label</p><p> <a href=" ..">label/a&gt;</p><p>“Text”</p><p>第一种情况是最常见的。 只要提供类、方法或变量的名字，javadoc 就在文档中插入 一个超链接。 例如，<br> @see com.horstraann.corejava.Employee#raiseSalary(double)</p><p>建立一个链接到 com.horstmann.corejava.Employee 类的 raiseSalary(double) 方法的超 链接。 可以省略包名， 甚至把包名和类名都省去， 此时， 链接将定位于当前包或当前类。</p><p>如果 @see 标记后面有一个 &lt; 字符， 就需要指定一个超链接。</p><p>如果 @see 标记后面有一个双引号(“)字符， 文本就会显示在 “ see also” 部分。</p></li><li><p>如果愿意的话， 还可以在注释中的任何位置放置指向其他类或方法的超级链接， 以及</p><p>插人一个专用的标记， 例如，</p><p>{@}ink package.class#ifeature label} </p><p>这里的特性描述规则与 @see 标记规则一样。</p></li></ul><p>4.9.6 包域概述注释</p><ul><li>要想产生包注释， 就需要在每一个包目录中添加一个单独的文件。可以 有如下两个选择:<ul><li>提供一个以 package.html 命名的 HTML 文件。在标记 <body>…</body> 之间的所有 文本都会被抽取出来。</li><li>提供一个以 package-info.java 命名的 Java 文件。 这个文件必须包含一个初始的以 /** 和 */ 界定的 Javadoc 注释， 跟随在一个包语句之后。它不应该包含更多的代码或注释。</li><li>还可以为所有的源文件提供一个概述性的注释。 这个注释将被放置在一个名为 overview, html 的文件中， 这个文件位于包含所有源文件的父目录中。标记 <body>… </body> 2间的所 有文本将被抽取出来。 当用户从导航栏中选择“ Overview ” 时， 就会显示出这些注释内容。</li></ul></li></ul><h4 id="4-9-7-注释的抽取"><a href="#4-9-7-注释的抽取" class="headerlink" title="4.9.7 注释的抽取"></a>4.9.7 注释的抽取</h4><ul><li>可以使用多种形式的命令行选项对 javadoc 程序进行调整。 </li><li>-version 选项在文档中包含 @author 和 @version 标记 (默认情况下， 这些标记会被省 略)。另一个很有用的选项是-link, 用来为标准类添加超链接。</li></ul><h3 id="4-10类设计技巧"><a href="#4-10类设计技巧" class="headerlink" title="4.10类设计技巧"></a>4.10类设计技巧</h3><p>使设计出来的类更具有 OOP 的专业水准的技巧：</p><ol><li><p>一定要保证数据私有</p><p>绝对不要破坏封装性，数据的表现形式很可能会发生改变，但是它们的使用方式不会经常改变。</p></li><li><p>一定要对数据初始化</p><p>java不会对局部变量进行初始化，但会对对象的实例域进行初始化，最好不要依赖于系统的默认值，应该显式地初始化所有的数据。</p></li><li><p>不要再类中使用过多的基本类型</p><p>用其他的类代替多个相关的基本类型的使用。</p></li><li><p>不是所有的域都需要独立的域访问器和域更改器</p></li><li><p>将职责过多的类进行分解</p></li><li><p>类名和方法名要能够体现它们的职责</p></li><li><p>优先使用不可变的类</p></li></ol><h2 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h2><h3 id="5-1-类，超类和子类"><a href="#5-1-类，超类和子类" class="headerlink" title="5.1 类，超类和子类"></a>5.1 类，超类和子类</h3><ul><li>“is-a”关系是继承的一个明显特征</li><li>在Java中，所有继承都是公有继承，没有c++中的私有继承和保护继承</li></ul><h4 id="5-1-1-定义子类"><a href="#5-1-1-定义子类" class="headerlink" title="5.1.1 定义子类"></a>5.1.1 定义子类</h4><ul><li><p>关键字<code>extends</code>表示继承</p><blockquote><p>下面由继承Employee类来定义Manager类的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...<span class="comment">//添加方法与域，例如：</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> bonus;</span><br><span class="line">...</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setbonus</span><span class="params">(<span class="keyword">double</span> bonus )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpdw2zhj30ja05bmy2.jpg"                      alt="image-20210923103914943"                ></p></blockquote></li><li><p>再通过拓展定义子类的时候，仅需要指出子类和超类的不同指出。因此在设计类的时候，应该将通用的方法放在超类中，而将具有特殊用途的方法放在子类中。</p></li></ul><h4 id="5-1-2-覆盖方法"><a href="#5-1-2-覆盖方法" class="headerlink" title="5.1.2 覆盖方法"></a>5.1.2 覆盖方法</h4><ul><li>```java<br>public double getSalary()<br>{<br>  return salary + bonus;//不能工作<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ==问题在于Managerer类的getSalary方法不能直接地访问超类的私有域,也就是说尽管每个Manager对象都有一个名为salary的域,但在Manager类的getSalary方法中并不能够直接地访问salary域,只有Employee类的方法才能够访问私有部分, 如果 Manager 类的方法一定要访问私有域， 就必须借助于公有的接口， Employee 类中的 公有方法 getSalary 正是这样一个接口。</span><br><span class="line"></span><br><span class="line">- 在子类中可以增加域,增加方法或者覆盖类的方法,然而绝对不能删除继承的任何域和方法.</span><br><span class="line"></span><br><span class="line">#### 5.1.3 子类构造器</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public Manager(String name,double salary,int year,int day)</span><br><span class="line">&#123;</span><br><span class="line">  super (name,salary,year,month,day);</span><br><span class="line">  bonus = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这里的关键字super有着不一样的含义，语句<code>super(n,s,year,month,day)</code>是”调用超类Employee中含有n，s，year，month和day参数的构造器“的简写模式。</p></blockquote><ul><li>使用super调用构造器的语句必须是子类构造器的第一条语句。</li></ul><blockquote><p>this关键字的两个用途：</p><ul><li>一是引用隐式参数</li><li>二是带哦用该类的其他构造器</li></ul><p>对比之下，super也有两个用途：</p><ul><li>一是调用超类的方法</li><li>二是调用超类的构造器</li></ul><p>注意点：在调用构造器的时候， 这两个关键字的使用方式很相似。调用构造器的语句只能作为另 一个构造器的第一条语句出现。构造参数既可以传递给本类(this) 的其他构造器，也可 以传递给超类(super) 的构造器。</p></blockquote><ul><li>一个对象变量可以指示多种实际类型的现象被称为==多态==</li><li>在运行时能够自动地选择调用哪个方法的现象被称为动态绑定。</li></ul><h4 id="5-1-4-继承层次"><a href="#5-1-4-继承层次" class="headerlink" title="5.1.4 继承层次"></a>5.1.4 继承层次</h4><ul><li>继承并不只限于一个层次</li><li>由一个公共超类派生出来的所有类的集合被称为继承层次</li><li>在继承层次中，从某个特定的类到其祖先的路径被称为该累的继承链</li><li>一个祖先类可以拥有多个子孙继承链</li><li>java不支持多继承</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpg98fij30du0dn756.jpg"                      alt="image-20210925190015571"                ></p><h4 id="5-1-5-多态"><a href="#5-1-5-多态" class="headerlink" title="5.1.5 多态"></a>5.1.5 多态</h4><ul><li><p>判断是否应该设计成继承关系的简单规则，就是”is-a“guize，它表明子类的每个对象也是超类的对象。例如，每个经理都是雇员。</p></li><li><p>”is-a“规则的另一种表述法是置换法则，它表明程序中出现超类对象的任何地方都可以用子类对象替换。</p><p>例如，将一个子类对象赋值给超类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Employee e:</span><br><span class="line">e = <span class="keyword">new</span> Employee(...);</span><br><span class="line">e = <span class="keyword">new</span> Manager(...);</span><br></pre></td></tr></table></figure></li><li><p>对象变量是多态的，存在一个变量即可以同时引用父子类的对象</p></li><li><p>在JAVA中，子类数组的引用可以转换成超类数组的引用，而不需要采用强制类型转换</p></li></ul><h4 id="5-1-6-理解方法调用"><a href="#5-1-6-理解方法调用" class="headerlink" title="5.1.6 理解方法调用"></a>5.1.6 理解方法调用</h4><ul><li><p>调用过程的详细描述</p><ul><li><p>编译器查看对象的声明类型和方法名</p></li><li><p>编译器将查看调用方法时提供的参数类型</p><blockquote><p>调用<code>x.f(param)</code>，在列举完类中所有名为f 的方法之后，其中存在一个与提供的参数类型完全匹配的，就选择调用这个方法，这个过程被称为重载解析。</p></blockquote></li><li><p>如果没有找到一个与参数类型相匹配的方法，或者发现经过类型转换之后有多个方法与只匹配，就会报错。</p></li><li><p>至此，编译器已获得需要调用的方法名字和参数类型</p></li></ul></li><li><p>如果是private方法，static方法，final方法或者构造器，那么编译器将可以准确的知道该调用哪个方法，我们将这种调用方式成为静态绑定。</p></li><li><p>当程序运行时，并且采用动态绑定调用方法时，虚拟机一定调用与x所引用对象的实际类型最合适的那个类的方法。</p></li><li><p>动态绑定由一个非常重要的特性，就是无需对现存的代码进行修改，就可以对程序进行拓展。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcphmavmj30lc02lq37.jpg"                      alt="image-20210926145056863"                ></p></li></ul><h4 id="7-1-7-阻止继承：final类和方法"><a href="#7-1-7-阻止继承：final类和方法" class="headerlink" title="7.1.7 阻止继承：final类和方法"></a>7.1.7 阻止继承：final类和方法</h4><ul><li>不允许拓展的类被称为final类。例如，人民希望阻止定义Excutive类的子类，就可以在定义这个类的时候使用final修饰符声明。</li><li>将方法和类声明为final的主要目的是：确保他们不会在子类中改变语义。</li></ul><h3 id="5-2-所有类的超类"><a href="#5-2-所有类的超类" class="headerlink" title="5.2 所有类的超类"></a>5.2 所有类的超类</h3><h3 id="5-3-泛型数组列表"><a href="#5-3-泛型数组列表" class="headerlink" title="5.3 泛型数组列表"></a>5.3 泛型数组列表</h3><h3 id="5-4-对象包装器与自动装箱"><a href="#5-4-对象包装器与自动装箱" class="headerlink" title="5.4 对象包装器与自动装箱"></a>5.4 对象包装器与自动装箱</h3><h3 id="5-5-参数数量可变的方法"><a href="#5-5-参数数量可变的方法" class="headerlink" title="5.5 参数数量可变的方法"></a>5.5 参数数量可变的方法</h3><h3 id="5-6-枚举类"><a href="#5-6-枚举类" class="headerlink" title="5.6 枚举类"></a>5.6 枚举类</h3><h3 id="5-7-反射"><a href="#5-7-反射" class="headerlink" title="5.7 反射"></a>5.7 反射</h3><h3 id="5-8-继承的设计技巧"><a href="#5-8-继承的设计技巧" class="headerlink" title="5.8 继承的设计技巧"></a>5.8 继承的设计技巧</h3><h2 id="第六章-接口，lambda表达式与内部类"><a href="#第六章-接口，lambda表达式与内部类" class="headerlink" title="第六章 接口，lambda表达式与内部类"></a>第六章 接口，lambda表达式与内部类</h2><blockquote><p>待更……</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;《Java核心技术》是一套全面扎实的Java工具书，适合进阶学习，平时可以搁一本放身边随时查漏补缺，巩固基础。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;第一章-java程序设计概述&quot;&gt;&lt;a href=&quot;#第一章</summary>
      
    
    
    
    <category term="Java" scheme="https://www.lzp.zone/categories/Java/"/>
    
    
    <category term="java" scheme="https://www.lzp.zone/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>优雅永不过时</title>
    <link href="https://www.lzp.zone/2021/11/05/%E4%BC%98%E9%9B%85%E6%B0%B8%E4%B8%8D%E8%BF%87%E6%97%B6/"/>
    <id>https://www.lzp.zone/2021/11/05/%E4%BC%98%E9%9B%85%E6%B0%B8%E4%B8%8D%E8%BF%87%E6%97%B6/</id>
    <published>2021-11-05T11:44:13.000Z</published>
    <updated>2022-03-13T09:55:20.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="K3键盘（keychron-amp-少数派联名款）"><a href="#K3键盘（keychron-amp-少数派联名款）" class="headerlink" title="K3键盘（keychron&amp;少数派联名款）"></a>K3键盘（keychron&amp;少数派联名款）</h2><p>keychron家号称Mac最适配的机械键盘，联名款纯白点缀红 ”π“ 的 ”龙睛“，</p><p>实力与颜值并存，实测下：能扛（看）能打！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h088hxs9m1j20xc0p0n14.jpg"                      alt="379907324"                ></p><h2 id="小米台灯"><a href="#小米台灯" class="headerlink" title="小米台灯"></a>小米台灯</h2><p>窈窕可爱的身姿，加上”柔情似水“的”目光“，大爱！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0887a12mzj20qo0k0gn8.jpg"                      alt="image-20220313141246972"                ></p><h2 id="MacBook"><a href="#MacBook" class="headerlink" title="MacBook"></a>MacBook</h2><p>给MacBook扩容换电池，见识到了其优雅紧凑的布局：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4imgdtm1j30qo0k040o.jpg"                      alt="QQ20211105-0"                ></p><p>还有这“性感”的翘臀</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4infnyhyj30qo0k0jsx.jpg"                      alt="image-20211105195050560"                ></p><h2 id="SHP9500"><a href="#SHP9500" class="headerlink" title="SHP9500"></a>SHP9500</h2><p>SHP9500声场开阔，有着硬朗中正的外观个性，不错的卡扣阻尼，质感相当不错！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4itcvt6rj30k00qognz.jpg"                      alt="image-20211105195631518"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4iu5alpzj30qo0k0tb1.jpg"                      alt="image-20211105195718169"                ></p><h2 id="软卡抄"><a href="#软卡抄" class="headerlink" title="软卡抄"></a>软卡抄</h2><p>钟爱的一组软卡抄，素雅的外观配上磨砂质感，抚摸间仿佛沁着花香~</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4iox4nnoj30k00qo418.jpg"                      alt="image-20211105195216589"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;K3键盘（keychron-amp-少数派联名款）&quot;&gt;&lt;a href=&quot;#K3键盘（keychron-amp-少数派联名款）&quot; class=&quot;headerlink&quot; title=&quot;K3键盘（keychron&amp;amp;少数派联名款）&quot;&gt;&lt;/a&gt;K3键盘（keychr</summary>
      
    
    
    
    <category term="设计美学" scheme="https://www.lzp.zone/categories/%E8%AE%BE%E8%AE%A1%E7%BE%8E%E5%AD%A6/"/>
    
    <category term="工业品" scheme="https://www.lzp.zone/categories/%E8%AE%BE%E8%AE%A1%E7%BE%8E%E5%AD%A6/%E5%B7%A5%E4%B8%9A%E5%93%81/"/>
    
    
    <category term="工业品" scheme="https://www.lzp.zone/tags/%E5%B7%A5%E4%B8%9A%E5%93%81/"/>
    
    <category term="优雅设计" scheme="https://www.lzp.zone/tags/%E4%BC%98%E9%9B%85%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="简而美" scheme="https://www.lzp.zone/tags/%E7%AE%80%E8%80%8C%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>MySQL语法第三弹</title>
    <link href="https://www.lzp.zone/2021/11/05/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%B8%89%E5%BC%B9/"/>
    <id>https://www.lzp.zone/2021/11/05/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%B8%89%E5%BC%B9/</id>
    <published>2021-11-05T08:41:21.000Z</published>
    <updated>2022-03-19T00:28:23.937Z</updated>
    
    <content type="html"><![CDATA[<p>待更…..</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;待更…..&lt;/p&gt;
</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.lzp.zone/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://www.lzp.zone/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://www.lzp.zone/tags/MySQL/"/>
    
    <category term="数据库" scheme="https://www.lzp.zone/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="SQL" scheme="https://www.lzp.zone/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL语法第二弹</title>
    <link href="https://www.lzp.zone/2021/11/05/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%BA%8C%E5%BC%B9/"/>
    <id>https://www.lzp.zone/2021/11/05/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%BA%8C%E5%BC%B9/</id>
    <published>2021-11-05T08:18:05.000Z</published>
    <updated>2022-03-19T00:28:13.732Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>根据老杜MySQL教学视频整理</p></blockquote><h2 id="1、关于查询结果集的去重"><a href="#1、关于查询结果集的去重" class="headerlink" title="1、关于查询结果集的去重?"></a>1、关于查询结果集的去重?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select distinct job from emp; // distinct关键字去除重复记录。</span><br><span class="line">+-----------+</span><br><span class="line">| job       |</span><br><span class="line">+-----------+</span><br><span class="line">| CLERK     |</span><br><span class="line">| SALESMAN  |</span><br><span class="line">| MANAGER   |</span><br><span class="line">| ANALYST   |</span><br><span class="line">| PRESIDENT |</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure><p><code>mysql&gt; select ename,distinct job from emp; </code></p><p>以上的sql语句是错误的。 记住:</p><p><code>distinct</code>只能出现在所有字段的最前面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select distinct deptno,job from emp;</span><br><span class="line">+--------+-----------+</span><br><span class="line">| deptno | job       |</span><br><span class="line">+--------+-----------+</span><br><span class="line">|     20 | CLERK     |</span><br><span class="line">|     30 | SALESMAN  |</span><br><span class="line">|     20 | MANAGER   |</span><br><span class="line">|     30 | MANAGER   |</span><br><span class="line">|     10 | MANAGER   |</span><br><span class="line">|     20 | ANALYST   |</span><br><span class="line">|     10 | PRESIDENT |</span><br><span class="line">|     30 | CLERK     |</span><br><span class="line">|     10 | CLERK     |</span><br><span class="line">+--------+-----------+</span><br></pre></td></tr></table></figure><p>   案例:统计岗位的数量?</p><p><code>select count(distinct job) from emp;</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+---------------------+</span><br><span class="line">| count(distinct job) |</span><br><span class="line">+---------------------+ </span><br><span class="line">|5                    |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><h2 id="2、连接查询"><a href="#2、连接查询" class="headerlink" title="2、连接查询"></a>2、连接查询</h2><h3 id="2-1、什么是连接查询"><a href="#2-1、什么是连接查询" class="headerlink" title="2.1、什么是连接查询?"></a>2.1、什么是连接查询?</h3><p>在实际开发中，大部分的情况下都不是从单表中查询数据，一般都是多张表联合查询取出最终的结果。在实际开发中，一般一个业务都会对应多张表，比如:学生和班级，起码两张表。学生和班级信息存储到一张表中，结果就像上面一样，数据会存在大量的重复，导致数据的冗余。</p><h3 id="2-2、连接查询的分类"><a href="#2-2、连接查询的分类" class="headerlink" title="2.2、连接查询的分类?"></a>2.2、连接查询的分类?</h3><p>根据语法出现的年代来划分的话，包括:</p><ul><li><p>SQL92(一些老的DBA可能还在使用这种语法。DBA:DataBase Administrator，数据库管理员)</p></li><li><p>SQL99(比较新的语法)</p></li></ul><p> 根据表的连接方式来划分，包括:</p><ol><li><p>内连接:</p><ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li><p>外连接:</p><ul><li><p>左外连接(左连接)</p></li><li><p>右外连接(右连接)</p></li></ul></li></ol><p>3 .全连接(这个不讲，很少用!)</p><h3 id="2-3、笛卡尔积现象-笛卡尔乘积现象"><a href="#2-3、笛卡尔积现象-笛卡尔乘积现象" class="headerlink" title="2.3、笛卡尔积现象(笛卡尔乘积现象)"></a>2.3、笛卡尔积现象(笛卡尔乘积现象)</h3><p>笛卡尔积现象:当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询结果条数<br>是两张表记录条数的乘积。</p><p>关于表的别名:<code>select e.ename,d.dname from emp e,dept d;</code></p><p>表的别名有什么好处?</p><ul><li>第一:执行效率高。</li><li>第二:可读性好。</li></ul><h3 id="2-4、怎么避免笛卡尔积现象"><a href="#2-4、怎么避免笛卡尔积现象" class="headerlink" title="2.4、怎么避免笛卡尔积现象?"></a>2.4、怎么避免笛卡尔积现象?</h3><p>当然是加条件进行过滤。</p><p> 思考:避免了笛卡尔积现象，会减少记录的匹配次数吗?</p><p>不会，次数还是56次。只不过显示的是有效记录。</p><p>案例:找出每一个员工的部⻔名称，要求显示员工名和部⻔名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">                 e.ename,d.dname</span><br><span class="line"></span><br><span class="line">from where</span><br><span class="line"></span><br><span class="line">                  emp e , dept d</span><br></pre></td></tr></table></figure><p><code>e.deptno = d.deptno; //SQL92，以后不用。</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+</span><br><span class="line">| ename  | dname      |</span><br><span class="line">+--------+------------+</span><br><span class="line">| CLARK  | ACCOUNTING |</span><br><span class="line">| KING   | ACCOUNTING |</span><br><span class="line">| MILLER | ACCOUNTING |</span><br><span class="line">| SMITH  | RESEARCH   |</span><br><span class="line">| JONES  | RESEARCH   |</span><br><span class="line">| SCOTT  | RESEARCH   |</span><br><span class="line">| ADAMS  | RESEARCH   |</span><br><span class="line">| FORD   | RESEARCH   |</span><br><span class="line">| ALLEN  | SALES      |</span><br><span class="line">| WARD   | SALES      |</span><br><span class="line">| MARTIN | SALES      |</span><br><span class="line">| BLAKE  | SALES      |</span><br><span class="line">| TURNER | SALES      |</span><br><span class="line">| JAMES  | SALES      |</span><br><span class="line">+--------+------------+</span><br></pre></td></tr></table></figure><h3 id="2-5、内连接之等值连接"><a href="#2-5、内连接之等值连接" class="headerlink" title="2.5、内连接之等值连接"></a>2.5、内连接之等值连接</h3><p>最大特点是:条件是等量关系。</p><p>案例:查询每个员工的部⻔名称，要求显示员工名和部⻔名。</p><p>SQL92:(太老，不用了) </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e, dept d</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure><p>SQL99:(常用的) </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">inner</span>可以省略的，带着<span class="keyword">inner</span>目的是可读性好一些。</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">A</span><br><span class="line">join</span><br><span class="line">B</span><br><span class="line">on</span><br><span class="line">连接条件</span><br><span class="line">where</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>SQL99语法结构更清晰一些:表的连接条件和后来的where条件分离了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+</span><br><span class="line">| ename  | dname      |</span><br><span class="line">+--------+------------+</span><br><span class="line">| CLARK  | ACCOUNTING |</span><br><span class="line">| KING   | ACCOUNTING |</span><br><span class="line">| MILLER | ACCOUNTING |</span><br><span class="line">| SMITH  | RESEARCH   |</span><br><span class="line">| JONES  | RESEARCH   |</span><br><span class="line">| SCOTT  | RESEARCH   |</span><br><span class="line">| ADAMS  | RESEARCH   |</span><br><span class="line">| FORD   | RESEARCH   |</span><br><span class="line">| ALLEN  | SALES      |</span><br><span class="line">| WARD   | SALES      |</span><br><span class="line">| MARTIN | SALES      |</span><br><span class="line">| BLAKE  | SALES      |</span><br><span class="line">| TURNER | SALES      |</span><br><span class="line">| JAMES  | SALES      |</span><br><span class="line">+--------+------------+</span><br></pre></td></tr></table></figure><h3 id="2-6、内连接之非等值连接"><a href="#2-6、内连接之非等值连接" class="headerlink" title="2.6、内连接之非等值连接"></a>2.6、内连接之非等值连接</h3><p>最大的特点是:连接条件中的关系是非等量关系。</p><p>案例:找出每个员工的工资等级，要求显示员工名、工资、工资等级。</p><p><code>mysql&gt; select ename,sal from emp; e</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+---------+</span><br><span class="line">|ename |sal        | </span><br><span class="line">+--------+---------+</span><br><span class="line">| SMITH  |  800.00 |</span><br><span class="line">| ALLEN  | 1600.00 |</span><br><span class="line">| WARD   | 1250.00 |</span><br><span class="line">| JONES  | 2975.00 |</span><br><span class="line">| MARTIN | 1250.00 |</span><br><span class="line">| BLAKE  | 2850.00 |</span><br><span class="line">| CLARK  | 2450.00 |</span><br><span class="line">| SCOTT  | 3000.00 |</span><br><span class="line">| KING   | 5000.00 |</span><br><span class="line">| TURNER | 1500.00 |</span><br><span class="line">| ADAMS  | 1100.00 |</span><br><span class="line">| JAMES  |  950.00 |</span><br><span class="line">| FORD   | 3000.00 |</span><br><span class="line">| MILLER | 1300.00 |</span><br><span class="line">+--------+---------+</span><br></pre></td></tr></table></figure><p><code>mysql&gt; select * from salgrade; s</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------+-------+-------+</span><br><span class="line">| GRADE | LOSAL | HISAL |</span><br><span class="line">+-------+-------+-------+</span><br><span class="line">| 1     |    700|   1200|</span><br><span class="line">| 2     |   1201|   1400|</span><br><span class="line">| 3     |   1401|   2000|</span><br><span class="line">| 4     |   2001|   3000|</span><br><span class="line">| 5     |   3001|   9999|</span><br><span class="line">+-------+-------+-------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,e.sal,s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">inner</span>可以省略</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,e.sal,s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+---------+-------+</span><br><span class="line">| ename  | sal     | grade |</span><br><span class="line">+--------+---------+-------+</span><br><span class="line">| SMITH  |  800.00 |     1 |</span><br><span class="line">| ALLEN  | 1600.00 |     3 |</span><br><span class="line">| WARD   | 1250.00 |     2 |</span><br><span class="line">| JONES  | 2975.00 |     4 |</span><br><span class="line">| MARTIN | 1250.00 |     2 |</span><br><span class="line">| BLAKE  | 2850.00 |     4 |</span><br><span class="line">| CLARK  | 2450.00 |     4 |</span><br><span class="line">| SCOTT  | 3000.00 |     4 |</span><br><span class="line">| KING   | 5000.00 |     5 |</span><br><span class="line">| TURNER | 1500.00 |     3 |</span><br><span class="line">| ADAMS  | 1100.00 |     1 |</span><br><span class="line">| JAMES  |  950.00 |     1 |</span><br><span class="line">| FORD   | 3000.00 |     4 |</span><br><span class="line">| MILLER | 1300.00 |     2 |</span><br><span class="line">+--------+---------+-------+</span><br></pre></td></tr></table></figure><h3 id="2-7、自连接"><a href="#2-7、自连接" class="headerlink" title="2.7、自连接"></a>2.7、自连接</h3><p>最大的特点是:一张表看做两张表。自己连接自己。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">案例:找出每个员工的上级领导，要求显示员工名和对应的领导名。</span><br></pre></td></tr></table></figure><p><code>mysql&gt; select empno,ename,mgr from emp; </code></p><p>emp a 员工表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+-------+--------+------+</span><br><span class="line">| empno | ename  | mgr  |</span><br><span class="line">+-------+--------+------+</span><br><span class="line">|  7369 | SMITH  | 7902 |</span><br><span class="line">|  7499 | ALLEN  | 7698 |</span><br><span class="line">|  7521 | WARD   | 7698 |</span><br><span class="line">|  7566 | JONES  | 7839 |</span><br><span class="line">|  7654 | MARTIN | 7698 |</span><br><span class="line">|  7698 | BLAKE  | 7839 |</span><br><span class="line">|  7782 | CLARK  | 7839 |</span><br><span class="line">|  7788 | SCOTT  | 7566 |</span><br><span class="line">|  7839 | KING   | NULL |</span><br><span class="line">|  7844 | TURNER | 7698 |</span><br><span class="line">|  7876 | ADAMS  | 7788 |</span><br><span class="line">|  7900 | JAMES  | 7698 |</span><br><span class="line">|  7902 | FORD   | 7566 |</span><br><span class="line">|  7934 | MILLER | 7782 |</span><br><span class="line">+-------+--------+------+</span><br></pre></td></tr></table></figure><p>emp b 领导表 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-------+--------+</span><br><span class="line">| empno | ename  |</span><br><span class="line">+-------+--------+</span><br><span class="line">|  7566 | JONES  |</span><br><span class="line">|  7698 | BLAKE  |</span><br><span class="line">|  7782 | CLARK  |</span><br><span class="line">|  7788 | SCOTT  |</span><br><span class="line">|  7839 | KING   |</span><br><span class="line">|  7902 | FORD   |</span><br><span class="line">+-------+--------+</span><br></pre></td></tr></table></figure><p>员工的领导编号 = 领导的员工编号 select</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="keyword">as</span> <span class="string">&#x27;员工名&#x27;</span>,b.ename <span class="keyword">as</span> <span class="string">&#x27;领导名&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+--------+--------+</span><br><span class="line">| 员工名  | 领导名  |</span><br><span class="line">+--------+--------+</span><br><span class="line">| SMITH  | FORD   |</span><br><span class="line">| ALLEN  | BLAKE  |</span><br><span class="line">| WARD   | BLAKE  |</span><br><span class="line">| JONES  | KING   |</span><br><span class="line">| MARTIN | BLAKE  |</span><br><span class="line">| BLAKE  | KING   |</span><br><span class="line">| CLARK  | KING   |</span><br><span class="line">| SCOTT  | JONES  |</span><br><span class="line">| TURNER | BLAKE  |</span><br><span class="line">| ADAMS  | SCOTT  |</span><br><span class="line">| JAMES  | BLAKE  |</span><br><span class="line">| FORD   | JONES  |</span><br><span class="line">| MILLER | CLARK  |</span><br><span class="line">+--------+--------+</span><br></pre></td></tr></table></figure><h3 id="2-8、外连接"><a href="#2-8、外连接" class="headerlink" title="2.8、外连接"></a>2.8、外连接</h3><p>什么是外连接，和内连接有什么区别?</p><ol><li>内连接:</li></ol><p>假设A和B表进行连接，使用内连接的话，凡是A表和B表能够匹配上的 记录查询出来，这就是内连接。</p><p>AB两张表没有主副之分，两张表是平等的。 </p><ol start="2"><li>外连接:</li></ol><p>假设A和B表进行连接，使用外连接的话，AB两张表中有一张表是主 表，一张表是副表，主要查询主表中</p><p>的数据，捎带着查询副表，当副表中的数据没有和主表中的数据匹配 上，副表自动模拟出NULL与之匹配。</p><p>外连接的分类?</p><ul><li>左外连接(左连接):表示左边的这张表是主表。</li><li>(右连接):表示右边的这张表是主表。</li><li>左连接有右连接的写法，右连接也会有对应的左连接的写法。</li></ul><p>案例:找出每个员工的上级领导?(所有员工必须全部查询出来)</p><p>emp a 员工表 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+-------+--------+------+</span><br><span class="line">| empno | ename  | mgr  |</span><br><span class="line">+-------+--------+------+</span><br><span class="line">|  7369 | SMITH  | 7902 |</span><br><span class="line">|  7499 | ALLEN  | 7698 |</span><br><span class="line">|  7521 | WARD   | 7698 |</span><br><span class="line">|  7566 | JONES  | 7839 |</span><br><span class="line">|  7654 | MARTIN | 7698 |</span><br><span class="line">|  7698 | BLAKE  | 7839 |</span><br><span class="line">|  7782 | CLARK  | 7839 |</span><br><span class="line">|  7788 | SCOTT  | 7566 |</span><br><span class="line">|  7839 | KING   | NULL |</span><br><span class="line">|  7844 | TURNER | 7698 |</span><br><span class="line">|  7876 | ADAMS  | 7788 |</span><br><span class="line">|  7900 | JAMES  | 7698 |</span><br><span class="line">|  7902 | FORD   | 7566 |</span><br><span class="line">|  7934 | MILLER | 7782 |</span><br><span class="line">+-------+--------+------+</span><br></pre></td></tr></table></figure><p>emp b 领导表 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-------+--------+</span><br><span class="line">| empno | ename  |</span><br><span class="line">+-------+--------+</span><br><span class="line">|  7566 | JONES  |</span><br><span class="line">|  7698 | BLAKE  |</span><br><span class="line">|  7782 | CLARK  |</span><br><span class="line">|  7788 | SCOTT  |</span><br><span class="line">|  7839 | KING   |</span><br><span class="line">|  7902 | FORD   |</span><br><span class="line">+-------+--------+</span><br></pre></td></tr></table></figure><p>内连接:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure><p>外连接:(左外连接/左连接) </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">outer</span>是可以省略的。</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure><p>外连接:(右外连接/右连接) </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">outer</span>可以省略。</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+-------+</span><br><span class="line">| 员工    | 领导  |</span><br><span class="line">+--------+-------+</span><br><span class="line">| SMITH  | FORD  |</span><br><span class="line">| ALLEN  | BLAKE |</span><br><span class="line">| WARD   | BLAKE |</span><br><span class="line">| JONES  | KING  |</span><br><span class="line">| MARTIN | BLAKE |</span><br><span class="line">| BLAKE  | KING  |</span><br><span class="line">| CLARK  | KING  |</span><br><span class="line">| SCOTT  | JONES |</span><br><span class="line">| KING   | NULL  |</span><br><span class="line">| TURNER | BLAKE |</span><br><span class="line">| ADAMS  | SCOTT |</span><br><span class="line">| JAMES  | BLAKE |</span><br><span class="line">| FORD   | JONES |</span><br><span class="line">| MILLER | CLARK |</span><br><span class="line">+--------+-------+</span><br></pre></td></tr></table></figure><p><strong>外连接最重要的特点是：主表的数据无条件的全部查询出来。</strong></p><p>案例:找出哪个部⻔没有员工? </p><p>EMP表:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |</span><br><span class="line">|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |</span><br><span class="line">|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |</span><br><span class="line">|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |</span><br><span class="line">|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |</span><br><span class="line">|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |</span><br><span class="line">|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |</span><br><span class="line">|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |</span><br><span class="line">|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |</span><br><span class="line">|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |</span><br><span class="line">|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |</span><br><span class="line">|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |</span><br><span class="line">|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |</span><br><span class="line">|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br></pre></td></tr></table></figure><p>DEPT表:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+----------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">d.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">e.empno <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+--------+</span><br><span class="line">| DEPTNO | DNAME      | LOC    |</span><br><span class="line">+--------+------------+--------+</span><br><span class="line">|     40 | OPERATIONS | BOSTON |</span><br><span class="line">+--------+------------+--------+</span><br></pre></td></tr></table></figure><h3 id="2-9、三张表怎么连接查询"><a href="#2-9、三张表怎么连接查询" class="headerlink" title="2.9、三张表怎么连接查询?"></a>2.9、三张表怎么连接查询?</h3><p>案例:找出每一个员工的部⻔名称以及工资等级。</p><p>EMP e:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+-------+--------+---------+--------+</span><br><span class="line">| empno | ename  | sal     | deptno |</span><br><span class="line">+-------+--------+---------+--------+</span><br><span class="line">|  7369 | SMITH  |  800.00 |     20 |</span><br><span class="line">|  7499 | ALLEN  | 1600.00 |     30 |</span><br><span class="line">|  7521 | WARD   | 1250.00 |     30 |</span><br><span class="line">|  7566 | JONES  | 2975.00 |     20 |</span><br><span class="line">|  7654 | MARTIN | 1250.00 |     30 |</span><br><span class="line">|  7698 | BLAKE  | 2850.00 |     30 |</span><br><span class="line">|  7782 | CLARK  | 2450.00 |     10 |</span><br><span class="line">|  7788 | SCOTT  | 3000.00 |     20 |</span><br><span class="line">|  7839 | KING   | 5000.00 |     10 |</span><br><span class="line">|  7844 | TURNER | 1500.00 |     30 |</span><br><span class="line">|  7876 | ADAMS  | 1100.00 |     20 |</span><br><span class="line">|  7900 | JAMES  |  950.00 |     30 |</span><br><span class="line">|  7902 | FORD   | 3000.00 |     20 |</span><br><span class="line">|  7934 | MILLER | 1300.00 |     10 |</span><br><span class="line">+-------+--------+---------+--------+</span><br></pre></td></tr></table></figure><p>DEPT d:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+----------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br></pre></td></tr></table></figure><p>SALGRADE s:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------+-------+-------+</span><br><span class="line">| GRADE | LOSAL | HISAL |</span><br><span class="line">+-------+-------+-------+</span><br><span class="line">|     1 |   700 |  1200 |</span><br><span class="line">|     2 |  1201 |  1400 |</span><br><span class="line">|     3 |  1401 |  2000 |</span><br><span class="line">|     4 |  2001 |  3000 |</span><br><span class="line">|     5 |  3001 |  9999 |</span><br><span class="line">+-------+-------+-------+</span><br></pre></td></tr></table></figure><blockquote><p>注意，解释一下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">A</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">B</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">C</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>表示：A表和B表先进行表连接，连接之后A表继续和C表进行连接。</p></blockquote><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,d.dname,s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+-------+</span><br><span class="line">| ename  | dname      | grade |</span><br><span class="line">+--------+------------+-------+</span><br><span class="line">| SMITH  | RESEARCH   |     1 |</span><br><span class="line">| ALLEN  | SALES      |     3 |</span><br><span class="line">| WARD   | SALES      |     2 |</span><br><span class="line">| JONES  | RESEARCH   |     4 |</span><br><span class="line">| MARTIN | SALES      |     2 |</span><br><span class="line">| BLAKE  | SALES      |     4 |</span><br><span class="line">| CLARK  | ACCOUNTING |     4 |</span><br><span class="line">| SCOTT  | RESEARCH   |     4 |</span><br><span class="line">| KING   | ACCOUNTING |     5 |</span><br><span class="line">| TURNER | SALES      |     3 |</span><br><span class="line">| ADAMS  | RESEARCH   |     1 |</span><br><span class="line">| JAMES  | SALES      |     1 |</span><br><span class="line">| FORD   | RESEARCH   |     4 |</span><br><span class="line">| MILLER | ACCOUNTING |     2 |</span><br><span class="line">+--------+------------+-------+</span><br></pre></td></tr></table></figure><p>案例：找出每一个员工的部门名称、工资等级、以及上级领导。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename <span class="string">&#x27;员工&#x27;</span>,d.dname,s.grade,e1.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">emp e1</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.mgr <span class="operator">=</span> e1.empno;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+-------+-------+</span><br><span class="line">| 员工    | dname      | grade | 领导  |</span><br><span class="line">+--------+------------+-------+-------+</span><br><span class="line">| SMITH  | RESEARCH   |     1 | FORD  |</span><br><span class="line">| ALLEN  | SALES      |     3 | BLAKE |</span><br><span class="line">| WARD   | SALES      |     2 | BLAKE |</span><br><span class="line">| JONES  | RESEARCH   |     4 | KING  |</span><br><span class="line">| MARTIN | SALES      |     2 | BLAKE |</span><br><span class="line">| BLAKE  | SALES      |     4 | KING  |</span><br><span class="line">| CLARK  | ACCOUNTING |     4 | KING  |</span><br><span class="line">| SCOTT  | RESEARCH   |     4 | JONES |</span><br><span class="line">| KING   | ACCOUNTING |     5 | NULL  |</span><br><span class="line">| TURNER | SALES      |     3 | BLAKE |</span><br><span class="line">| ADAMS  | RESEARCH   |     1 | SCOTT |</span><br><span class="line">| JAMES  | SALES      |     1 | BLAKE |</span><br><span class="line">| FORD   | RESEARCH   |     4 | JONES |</span><br><span class="line">| MILLER | ACCOUNTING |     2 | CLARK |</span><br><span class="line">+--------+------------+-------+-------+</span><br></pre></td></tr></table></figure><h2 id="3、子查询"><a href="#3、子查询" class="headerlink" title="3、子查询"></a>3、子查询</h2><h3 id="3-1、什么是子查询"><a href="#3-1、什么是子查询" class="headerlink" title="3.1、什么是子查询?"></a>3.1、什么是子查询?</h3><p> select语句当中嵌套select语句，被嵌套的select语句是子查询。 </p><p>子查询都可以出现在哪里?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">..(<span class="keyword">select</span>).</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">..(<span class="keyword">select</span>).</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">..(<span class="keyword">select</span>).</span><br></pre></td></tr></table></figure><h3 id="3-2、where子句中使用子查询"><a href="#3-2、where子句中使用子查询" class="headerlink" title="3.2、where子句中使用子查询"></a>3.2、where子句中使用子查询</h3><p>案例:找出高于平均薪资的员工信息。<br><code>select * from emp where sal &gt; avg(sal); //错误的写法，where后面不能直接使用分组函数。</code></p><p>第一步:找出平均薪资  <code>select avg(sal) from emp;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-------------+</span><br><span class="line">| avg(sal)    |</span><br><span class="line">+-------------+</span><br><span class="line">| 2073.214286 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><p> 第二步:where过滤  <code>select * from emp where sal &gt; 2073.214286;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-------+-------+-----------+------+------------+---------+------+--------+</span><br><span class="line">| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |</span><br><span class="line">+-------+-------+-----------+------+------------+---------+------+--------+</span><br><span class="line">|  7566 | JONES | MANAGER   | 7839 | 1981-04-02 | 2975.00 | NULL |     20 |</span><br><span class="line">|  7698 | BLAKE | MANAGER   | 7839 | 1981-05-01 | 2850.00 | NULL |     30 |</span><br><span class="line">|  7782 | CLARK | MANAGER   | 7839 | 1981-06-09 | 2450.00 | NULL |     10 |</span><br><span class="line">|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 | NULL |     20 |</span><br><span class="line">|  7839 | KING  | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL |     10 |</span><br><span class="line">|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 | NULL |     20 |</span><br><span class="line">+-------+-------+-----------+------+------------+---------+------+--------+</span><br></pre></td></tr></table></figure><p>第一步和第二步合并  <code>select * from emp where sal &gt; (select avg(sal) from emp);</code></p><h3 id="3-3、from后面嵌套子查询"><a href="#3-3、from后面嵌套子查询" class="headerlink" title="3.3、from后面嵌套子查询"></a>3.3、from后面嵌套子查询</h3><p>案例:找出每个部⻔平均薪水的等级。 </p><p>第一步:找出每个部⻔平均薪水(按照部⻔编号分组，求sal的平均值)</p><p><code>select deptno,avg(sal) as avgsal from emp group by deptno;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+--------+-------------+</span><br><span class="line">| deptno | avgsal      |</span><br><span class="line">+--------+-------------+</span><br><span class="line">|     10 | 2916.666667 |</span><br><span class="line">|     20 | 2175.000000 |</span><br><span class="line">|     30 | 1566.666667 |</span><br><span class="line">+--------+-------------+</span><br></pre></td></tr></table></figure><p>第二步：将以上的查询结果当做临时表t，让t表和salgrade s表连接，条件是：</p><p><code>t.avgsal between s.losal and s.hisal</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">t.<span class="operator">*</span>,s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avgsal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">t.avgsal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+--------+-------------+-------+</span><br><span class="line">| deptno | avgsal      | grade |</span><br><span class="line">+--------+-------------+-------+</span><br><span class="line">|     30 | 1566.666667 |     3 |</span><br><span class="line">|     10 | 2916.666667 |     4 |</span><br><span class="line">|     20 | 2175.000000 |     4 |</span><br><span class="line">+--------+-------------+-------+</span><br></pre></td></tr></table></figure><p>案例：找出每个部门平均的薪水等级。<br>第一步：找出每个员工的薪水等级。</p><p><code>select e.ename,e.sal,e.deptno,s.grade from emp e join salgrade s on e.sal between s.losal and s.hisal;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+---------+--------+-------+</span><br><span class="line">| ename  | sal     | deptno | grade |</span><br><span class="line">+--------+---------+--------+-------+</span><br><span class="line">| SMITH  |  800.00 |     20 |     1 |</span><br><span class="line">| ALLEN  | 1600.00 |     30 |     3 |</span><br><span class="line">| WARD   | 1250.00 |     30 |     2 |</span><br><span class="line">| JONES  | 2975.00 |     20 |     4 |</span><br><span class="line">| MARTIN | 1250.00 |     30 |     2 |</span><br><span class="line">| BLAKE  | 2850.00 |     30 |     4 |</span><br><span class="line">| CLARK  | 2450.00 |     10 |     4 |</span><br><span class="line">| SCOTT  | 3000.00 |     20 |     4 |</span><br><span class="line">| KING   | 5000.00 |     10 |     5 |</span><br><span class="line">| TURNER | 1500.00 |     30 |     3 |</span><br><span class="line">| ADAMS  | 1100.00 |     20 |     1 |</span><br><span class="line">| JAMES  |  950.00 |     30 |     1 |</span><br><span class="line">| FORD   | 3000.00 |     20 |     4 |</span><br><span class="line">| MILLER | 1300.00 |     10 |     2 |</span><br><span class="line">+--------+---------+--------+-------+</span><br></pre></td></tr></table></figure><p>第二步：基于以上结果，继续按照deptno分组，求grade平均值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.deptno,<span class="built_in">avg</span>(s.grade)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e </span><br><span class="line"><span class="keyword">join</span> </span><br><span class="line">salgrade s </span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">e.deptno;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+--------+--------------+</span><br><span class="line">| deptno | avg(s.grade) |</span><br><span class="line">+--------+--------------+</span><br><span class="line">|     10 |       3.6667 |</span><br><span class="line">|     20 |       2.8000 |</span><br><span class="line">|     30 |       2.5000 |</span><br><span class="line">+--------+--------------+</span><br></pre></td></tr></table></figure><h3 id="3-4、在select后面嵌套子查询。"><a href="#3-4、在select后面嵌套子查询。" class="headerlink" title="3.4、在select后面嵌套子查询。"></a>3.4、在select后面嵌套子查询。</h3><p> 案例:找出每个员工所在的部⻔名称，要求显示员工名和部⻔名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,(<span class="keyword">select</span> d.dname <span class="keyword">from</span> dept d <span class="keyword">where</span> e.deptno <span class="operator">=</span> d.deptno) <span class="keyword">as</span> dname </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+</span><br><span class="line">| ename  | dname      |</span><br><span class="line">+--------+------------+</span><br><span class="line">| SMITH  | RESEARCH   |</span><br><span class="line">| ALLEN  | SALES      |</span><br><span class="line">| WARD   | SALES      |</span><br><span class="line">| JONES  | RESEARCH   |</span><br><span class="line">| MARTIN | SALES      |</span><br><span class="line">| BLAKE  | SALES      |</span><br><span class="line">| CLARK  | ACCOUNTING |</span><br><span class="line">| SCOTT  | RESEARCH   |</span><br><span class="line">| KING   | ACCOUNTING |</span><br><span class="line">| TURNER | SALES      |</span><br><span class="line">| ADAMS  | RESEARCH   |</span><br><span class="line">| JAMES  | SALES      |</span><br><span class="line">| FORD   | RESEARCH   |</span><br><span class="line">| MILLER | ACCOUNTING |</span><br><span class="line">+--------+------------+</span><br></pre></td></tr></table></figure><h2 id="4、union-可以将查询结果集相加"><a href="#4、union-可以将查询结果集相加" class="headerlink" title="4、union (可以将查询结果集相加)"></a>4、union (可以将查询结果集相加)</h2><p>案例:找出工作岗位是SALESMAN和MANAGER的员工?<br> 第一种:<code>select ename,job from emp where job = &#39;MANAGER&#39; or job = &#39;SALESMAN&#39;;</code><br> 第二种:<code>select ename,job from emp where job in(&#39;MANAGER&#39;,&#39;SALESMAN&#39;); </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+--------+----------+</span><br><span class="line">| ename  | job      |</span><br><span class="line">+--------+----------+</span><br><span class="line">| ALLEN  | SALESMAN |</span><br><span class="line">| WARD   | SALESMAN |</span><br><span class="line">| JONES  | MANAGER  |</span><br><span class="line">| MARTIN | SALESMAN |</span><br><span class="line">| BLAKE  | MANAGER  |</span><br><span class="line">| CLARK  | MANAGER  |</span><br><span class="line">| TURNER | SALESMAN |</span><br><span class="line">+--------+----------+</span><br></pre></td></tr></table></figure><p> 第三种:union</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+--------+----------+</span><br><span class="line">| ename  | job      |</span><br><span class="line">+--------+----------+</span><br><span class="line">| JONES  | MANAGER  |</span><br><span class="line">| BLAKE  | MANAGER  |</span><br><span class="line">| CLARK  | MANAGER  |</span><br><span class="line">| ALLEN  | SALESMAN |</span><br><span class="line">| WARD   | SALESMAN |</span><br><span class="line">| MARTIN | SALESMAN |</span><br><span class="line">| TURNER | SALESMAN |</span><br><span class="line">+--------+----------+</span><br></pre></td></tr></table></figure><p>两张不相干的表中的数据拼接在一起显示?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> dname <span class="keyword">from</span> dept;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+------------+</span><br><span class="line">| ename      |</span><br><span class="line">+------------+</span><br><span class="line">| SMITH      |</span><br><span class="line">| ALLEN      |</span><br><span class="line">| WARD       |</span><br><span class="line">| JONES      |</span><br><span class="line">| MARTIN     |</span><br><span class="line">| BLAKE      |</span><br><span class="line">| CLARK      |</span><br><span class="line">| SCOTT      |</span><br><span class="line">| KING       |</span><br><span class="line">| TURNER     |</span><br><span class="line">| ADAMS      |</span><br><span class="line">| JAMES      |</span><br><span class="line">| FORD       |</span><br><span class="line">| MILLER     |</span><br><span class="line">| ACCOUNTING |</span><br><span class="line">| RESEARCH   |</span><br><span class="line">| SALES      |</span><br><span class="line">| OPERATIONS |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">union</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">select</span> dname <span class="keyword">from</span> dept;</span><br><span class="line">ERROR <span class="number">1222</span> (<span class="number">21000</span>): The used <span class="keyword">SELECT</span> statements have a different</span><br><span class="line">number <span class="keyword">of</span> columns</span><br></pre></td></tr></table></figure><h2 id="5、limit"><a href="#5、limit" class="headerlink" title="5、limit"></a>5、limit</h2><blockquote><p>(重点中的重点，以后分⻚查询全靠它了)</p></blockquote><ul><li>limit是mysql特有的，其他数据库中没有，不通用。(Oracle中有一个相同的机制，叫做rownum)</li><li>limit取结果集中的部分数据，这是它的作用。</li></ul><p>语法机制:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">limit startIndex, length</span><br><span class="line">//startIndex表示起始位置，从0开始，0表示第一条数据。 length表示取几个</span><br></pre></td></tr></table></figure><p>案例:取出工资前5名的员工(思路:降序取前5个)<br> <code>select ename,sal from emp order by sal desc;</code> </p><p>取前5个:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span> limit <span class="number">0</span>, <span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span> limit <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>limit是sql语句最后执行的一个环节:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span><span class="number">5</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">from</span><span class="number">1</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">where</span><span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span><span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">having</span><span class="number">4</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span><span class="number">6</span></span><br><span class="line">...</span><br><span class="line">limit<span class="number">7</span></span><br><span class="line">...;</span><br></pre></td></tr></table></figure><p>案例:找出工资排名在第4到第9名的员工?<br><code>select ename,sal from emp order by sal desc limit 3,6;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+--------+---------+</span><br><span class="line">| ename  | sal     |</span><br><span class="line">+--------+---------+</span><br><span class="line">| JONES  | 2975.00 |</span><br><span class="line">| BLAKE  | 2850.00 |</span><br><span class="line">| CLARK  | 2450.00 |</span><br><span class="line">| ALLEN  | 1600.00 |</span><br><span class="line">| TURNER | 1500.00 |</span><br><span class="line">| MILLER | 1300.00 |</span><br><span class="line">+--------+---------+</span><br></pre></td></tr></table></figure><p>通用的标准分⻚sql?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">每页显示3条记录：</span><br><span class="line">第1页：0, 3</span><br><span class="line">第2页：3, 3</span><br><span class="line">第3页：6, 3</span><br><span class="line">第4页：9, 3</span><br><span class="line">第5页：12, 3</span><br><span class="line"></span><br><span class="line">每页显示pageSize条记录：</span><br><span class="line">第pageNo页：(pageNo - 1) * pageSize, pageSize</span><br></pre></td></tr></table></figure><p>pageSize是什么？是每页显示多少条记录<br>pageNo是什么？显示第几页</p><p>java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> pageNo = <span class="number">2</span>; <span class="comment">// 页码是2</span></span><br><span class="line"><span class="keyword">int</span> pageSize = <span class="number">10</span>; <span class="comment">// 每页显示10条</span></span><br><span class="line"></span><br><span class="line">limit (pageNo - <span class="number">1</span>) * pageSize, pageSize</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、创建表"><a href="#6、创建表" class="headerlink" title="6、创建表:"></a>6、创建表:</h2><h3 id="建表语句的语法格式"><a href="#建表语句的语法格式" class="headerlink" title="建表语句的语法格式:"></a>建表语句的语法格式:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段名<span class="number">1</span> 数据类型,</span><br><span class="line">字段名<span class="number">2</span> 数据类型,</span><br><span class="line">字段名<span class="number">3</span> 数据类型,</span><br><span class="line">....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="关于MySQL当中字段的数据类型？-常见的"><a href="#关于MySQL当中字段的数据类型？-常见的" class="headerlink" title="关于MySQL当中字段的数据类型？(常见的)"></a>关于MySQL当中字段的数据类型？(常见的)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int整数型(java中的int)</span><br><span class="line">bigint长整型(java中的long)</span><br><span class="line">float浮点型(java中的float double)</span><br><span class="line">char定长字符串(String)</span><br><span class="line">varchar可变长字符串(StringBuffer/StringBuilder)</span><br><span class="line">date日期类型 （对应Java中的java.sql.Date类型）</span><br><span class="line">BLOB二进制大对象（存储图片、视频等流媒体信息） Binary Large OBject （对应java中的Object）</span><br><span class="line">CLOB字符大对象（存储较大文本，比如，可以存储4G的字符串。） Character Large OBject（对应java中的Object）</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="char和varchar怎么选择？"><a href="#char和varchar怎么选择？" class="headerlink" title="char和varchar怎么选择？"></a>char和varchar怎么选择？</h3><p>​        在实际的开发中，当某个字段中的数据长度不发生改变的时候，是定长的，例如：性别、生日等都是采用char。<br>​        当一个字段的数据长度不确定，例如：简介、姓名等都是采用varchar。</p><p>BLOB和CLOB类型的使用？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">电影表: t_movie</span><br><span class="line">id(int)name(varchar)playtime(date/char)haibao(BLOB)history(CLOB)</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">1蜘蛛侠</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>表名在数据库当中一般建议以：<code>t_</code>或者<code>tbl_</code>开始。</p><p>创建学生表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">学生信息包括：</span><br><span class="line">学号、姓名、性别、班级编号、生日</span><br><span class="line">学号：bigint</span><br><span class="line">姓名：varchar</span><br><span class="line">性别：char</span><br><span class="line">班级编号：int</span><br><span class="line">生日：char</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line"><span class="keyword">no</span> <span class="type">bigint</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">sex <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">classno <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">birth <span class="type">char</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="7、insert语句插入数据"><a href="#7、insert语句插入数据" class="headerlink" title="7、insert语句插入数据"></a>7、insert语句插入数据</h2><p>语法格式:</p><p><code>insert into 表名(字段名1,字段名2,字段名3,....) values(值1,值2,值3,....)</code></p><p><code>要求:字段的数量和值的数量相同，并且数据类型要对应相同。</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(<span class="keyword">no</span>,name,sex,classno,birth) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;gaosan1ban&#x27;</span>);</span><br><span class="line">ERROR <span class="number">1136</span> (<span class="number">21</span>S01): <span class="keyword">Column</span> count doesn<span class="string">&#x27;t match value count at row 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">insert into t_student(no,name,sex,classno,birth) values(1,&#x27;</span>zhangsan<span class="string">&#x27;,&#x27;</span><span class="number">1</span><span class="string">&#x27;,&#x27;</span>gaosan1ban<span class="string">&#x27;, &#x27;</span><span class="number">1950</span><span class="number">-10</span><span class="number">-12</span><span class="string">&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; select * from t_student;</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| no   | name     | sex  | classno    | birth      |</span><br><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |</span><br><span class="line">+------+----------+------+------------+------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name,sex,classno,birth,<span class="keyword">no</span>) <span class="keyword">values</span>(<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;gaosan1ban&#x27;</span>, <span class="string">&#x27;1950-10-12&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_student;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| no   | name     | sex  | classno    | birth      |</span><br><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |</span><br><span class="line">|    2 | lisi     | 1    | gaosan1ban | 1950-10-12 |</span><br><span class="line">+------+----------+------+------------+------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name) <span class="keyword">values</span>(<span class="string">&#x27;wangwu&#x27;</span>); <span class="operator">/</span><span class="operator">/</span> 除name字段之外，剩下的所有字段自动插入<span class="keyword">NULL</span>。</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_student;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| no   | name     | sex  | classno    | birth      |</span><br><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |</span><br><span class="line">|    2 | lisi     | 1    | gaosan1ban | 1950-10-12 |</span><br><span class="line">| NULL | wangwu   | NULL | NULL       | NULL       |</span><br><span class="line">+------+----------+------+------------+------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(<span class="keyword">no</span>) <span class="keyword">values</span>(<span class="number">3</span>); </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_student;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| no   | name     | sex  | classno    | birth      |</span><br><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |</span><br><span class="line">|    2 | lisi     | 1    | gaosan1ban | 1950-10-12 |</span><br><span class="line">| NULL | wangwu   | NULL | NULL       | NULL       |</span><br><span class="line">|    3 | NULL     | NULL | NULL       | NULL       |</span><br><span class="line">+------+----------+------+------------+------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_student; <span class="operator">/</span><span class="operator">/</span> 当这个表存在的话删除。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line"><span class="keyword">no</span> <span class="type">bigint</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">sex <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="number">1</span>,</span><br><span class="line">classno <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">birth <span class="type">char</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_student;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+------+---------+-------+</span><br><span class="line">| no   | name     | sex  | classno | birth |</span><br><span class="line">+------+----------+------+---------+-------+</span><br><span class="line">| NULL | zhangsan | 1    | NULL    | NULL  |</span><br><span class="line">+------+----------+------+---------+-------+</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的地方：<br>        当一条insert语句执行成功之后，表格当中必然会多一行记录。<br>        即使多的这一行记录当中某些字段是NULL，后期也没有办法在执行<br>        insert语句插入数据了，只能使用update进行更新。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 字段可以省略不写，但是后面的<span class="keyword">value</span>对数量和顺序都有要求。</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;gaosan2ban&#x27;</span>,<span class="string">&#x27;1986-10-23&#x27;</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_student;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| no   | name     | sex  | classno    | birth      |</span><br><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| NULL | zhangsan | 1    | NULL       | NULL       |</span><br><span class="line">|    1 | jack     | 0    | gaosan2ban | 1986-10-23 |</span><br><span class="line">+------+----------+------+------------+------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;gaosan2ban&#x27;</span>);</span><br><span class="line">ERROR <span class="number">1136</span> (<span class="number">21</span>S01): <span class="keyword">Column</span> count doesn<span class="string">&#x27;t match value count at row 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 一次插入多行数据</span></span><br><span class="line"><span class="string">insert into t_student</span></span><br><span class="line"><span class="string">(no,name,sex,classno,birth) </span></span><br><span class="line"><span class="string">values</span></span><br><span class="line"><span class="string">(3,&#x27;</span>rose<span class="string">&#x27;,&#x27;</span><span class="number">1</span><span class="string">&#x27;,&#x27;</span>gaosi2ban<span class="string">&#x27;,&#x27;</span><span class="number">1952</span><span class="number">-12</span><span class="number">-14</span><span class="string">&#x27;),(4,&#x27;</span>laotie<span class="string">&#x27;,&#x27;</span><span class="number">1</span><span class="string">&#x27;,&#x27;</span>gaosi2ban<span class="string">&#x27;,&#x27;</span><span class="number">1955</span><span class="number">-12</span><span class="number">-14</span><span class="string">&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; select * from t_student;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| no   | name     | sex  | classno    | birth      |</span><br><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| NULL | zhangsan | 1    | NULL       | NULL       |</span><br><span class="line">|    1 | jack     | 0    | gaosan2ban | 1986-10-23 |</span><br><span class="line">|    3 | rose     | 1    | gaosi2ban  | 1952-12-14 |</span><br><span class="line">|    4 | laotie   | 1    | gaosi2ban  | 1955-12-14 |</span><br><span class="line">+------+----------+------+------------+------------+</span><br></pre></td></tr></table></figure><h2 id="8、表的复制"><a href="#8、表的复制" class="headerlink" title="8、表的复制"></a>8、表的复制</h2><p>语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 <span class="keyword">as</span> <span class="keyword">select</span>语句;</span><br><span class="line">将查询结果当做表创建出来。</span><br></pre></td></tr></table></figure><h2 id="9、将查询结果插入到一张表中"><a href="#9、将查询结果插入到一张表中" class="headerlink" title="9、将查询结果插入到一张表中?"></a>9、将查询结果插入到一张表中?</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> dept1 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept1;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+----------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br></pre></td></tr></table></figure><h2 id="10、修改数据-update"><a href="#10、修改数据-update" class="headerlink" title="10、修改数据:update"></a>10、修改数据:update</h2><p>语法格式:</p><p><code>update 表名 set 字段名1=值1,字段名2=值2... where 条件;</code></p><blockquote><p>注意：没有条件整张表数据全部更新。</p></blockquote><p>案例：将部门10的LOC修改为SHANGHAI，将部门名称修改为RENSHIBU</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update dept1 <span class="keyword">set</span> loc <span class="operator">=</span> <span class="string">&#x27;SHANGHAI&#x27;</span>, dname <span class="operator">=</span> <span class="string">&#x27;RENSHIBU&#x27;</span> <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept1;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+----------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | RENSHIBU   | SHANGHAI |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">|     10 | RENSHIBU   | SHANGHAI |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br></pre></td></tr></table></figure><p>更新所有记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update dept1 <span class="keyword">set</span> loc <span class="operator">=</span> <span class="string">&#x27;x&#x27;</span>, dname <span class="operator">=</span> <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept1;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+--------+-------+------+</span><br><span class="line">| DEPTNO | DNAME | LOC  |</span><br><span class="line">+--------+-------+------+</span><br><span class="line">|     10 | y     | x    |</span><br><span class="line">|     20 | y     | x    |</span><br><span class="line">|     30 | y     | x    |</span><br><span class="line">|     40 | y     | x    |</span><br><span class="line">|     10 | y     | x    |</span><br><span class="line">|     20 | y     | x    |</span><br><span class="line">|     30 | y     | x    |</span><br><span class="line">|     40 | y     | x    |</span><br><span class="line">+--------+-------+------+</span><br></pre></td></tr></table></figure><h2 id="11、删除数据"><a href="#11、删除数据" class="headerlink" title="11、删除数据?"></a>11、删除数据?</h2><p> 语法格式:</p><p><code>delete from 表名 where 条件;</code></p><blockquote><p>注意：没有条件全部删除。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>删除<span class="number">10</span>部门数据？</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept1 <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除所有记录？</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept1;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>怎么删除大表中的数据？（重点）</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名; <span class="operator">/</span><span class="operator">/</span> 表被截断，不可回滚。永久丢失。</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除表？</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名; <span class="operator">/</span><span class="operator">/</span> 这个通用。</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> 表名; <span class="operator">/</span><span class="operator">/</span> oracle不支持这种写法。</span><br></pre></td></tr></table></figure><h2 id="12、表结构的修改"><a href="#12、表结构的修改" class="headerlink" title="12、表结构的修改"></a>12、表结构的修改</h2><p>关于表的修改，大家使用工具完成即可，因为在实际开发中表一旦 设计好之后，对表结构的修改是很少的，修改表结构就是对之前的设计进行了否定，即使 需要修改表结构，我们也可以直接使用工具操作。修改表结构的语句不会出现在Java代码当 中。出现在java代码当中的sql包括:insert delete update select(这些都是表中的数据操作)。</p><p>增删改查有一个术语:<code>CRUD</code>操作<br><code> Create(增) Retrieve(检索) Update(修改) Delete(删除)</code></p><h2 id="13、约束-Constraint"><a href="#13、约束-Constraint" class="headerlink" title="13、约束(Constraint)"></a>13、约束(Constraint)</h2><h3 id="13-1、什么是约束-常⻅的约束有哪些呢"><a href="#13-1、什么是约束-常⻅的约束有哪些呢" class="headerlink" title="13.1、什么是约束?常⻅的约束有哪些呢?"></a>13.1、什么是约束?常⻅的约束有哪些呢?</h3><p>在创建表的时候，可以给表的字段添加相应的约束，添加约束的目的是为了保证表中数据的合法性、有效性、完整性。</p><p>常⻅的约束有哪些呢?</p><ul><li>非空约束(not null):约束的字段不能为NULL</li><li>唯一约束(unique):约束的字段不能重复</li><li>主键约束(primary key):约束的字段既不能为NULL，也不能重复(简称PK) </li><li>外键约束(foreign key):…(简称FK)</li><li>检查约束(check):注意Oracle数据库有check约束，但是mysql没有，目前mysql不支持该约束。</li></ul><h3 id="13-2、非空约束-not-null"><a href="#13-2、非空约束-not-null" class="headerlink" title="13.2、非空约束 not null"></a>13.2、非空约束 not null</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_user;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id,password) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">ERROR <span class="number">1364</span> (HY000): Field <span class="string">&#x27;username&#x27;</span> doesn<span class="string">&#x27;t have a default value</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">insert into t_user(id,username,password) values(1,&#x27;</span>lisi<span class="string">&#x27;,&#x27;</span><span class="number">123</span><span class="string">&#x27;);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;根据老杜MySQL教学视频整理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、关于查询结果集的去重&quot;&gt;&lt;a href=&quot;#1、关于查询结果集的去重&quot; class=&quot;headerlink&quot; title=&quot;1、关于查询结果集的去重?&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.lzp.zone/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://www.lzp.zone/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://www.lzp.zone/tags/MySQL/"/>
    
    <category term="数据库" scheme="https://www.lzp.zone/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="SQL" scheme="https://www.lzp.zone/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Win-Mac快捷键对照表</title>
    <link href="https://www.lzp.zone/2021/11/03/Win-Mac%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
    <id>https://www.lzp.zone/2021/11/03/Win-Mac%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%AF%B9%E7%85%A7%E8%A1%A8/</id>
    <published>2021-11-03T04:21:34.000Z</published>
    <updated>2021-11-04T01:32:45.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac-键盘符号说明"><a href="#Mac-键盘符号说明" class="headerlink" title="Mac 键盘符号说明"></a>Mac 键盘符号说明</h2><ul><li><code>⌘</code> == <code>Command</code></li><li><code>⇧</code> == <code>Shift</code></li><li><code>⇪</code> == <code>Caps Lock</code></li><li><code>⌥</code> == <code>Option</code></li><li><code>⌃</code> == <code>Control</code></li><li><code>↩</code> == <code>Return/Enter</code></li><li><code>⌫</code> == <code>Delete</code></li><li><code>⌦</code> == <code>向前删除键（Fn+Delete）</code></li><li><code>↑</code> == <code>上箭头</code></li><li><code>↓</code> == <code>下箭头</code></li><li><code>←</code> == <code>左箭头</code></li><li><code>→</code> == <code>右箭头</code></li><li><code>⇞</code> == <code>Page Up（Fn+↑）</code></li><li><code>⇟</code> == <code>Page Down（Fn+↓）</code></li><li><code>Home</code> == <code>Fn + ←</code></li><li><code>End</code> == <code>Fn + →</code></li><li><code>⇥</code> == <code>右制表符（Tab键）</code></li><li><code>⇤</code> == <code>左制表符（Shift+Tab）</code></li><li><code>⎋</code> == <code>Escape (Esc)</code></li><li><code>⏏</code> == <code>电源开关键</code></li></ul><h2 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>F</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>F</kbd></td><td align="left">在当前文件进行文本查找</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>R</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>R</kbd></td><td align="left">在当前文件进行文本替换</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Z</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Z</kbd></td><td align="left">撤销</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Y</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Delete</kbd></td><td align="left">删除光标所在行 或 删除选中的行</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>D</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>D</kbd></td><td align="left">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>W</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>方向键上</kbd></td><td align="left">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>E</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>E</kbd></td><td align="left">显示最近打开的文件记录列表</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>N</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>O</kbd></td><td align="left">根据输入的 <strong>类名</strong> 查找类文件</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>J</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>J</kbd></td><td align="left">插入自定义动态代码模板</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>P</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>P</kbd></td><td align="left">方法参数提示显示</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>U</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>U</kbd></td><td align="left">前往当前光标所在的方法的父类的方法 / 接口定义</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>B</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>B</kbd></td><td align="left">进入光标所在的方法/变量的接口或是定义处，等效于 <code>Ctrl + 左键单击</code></td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>/</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>/</kbd></td><td align="left">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>F1</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>F1</kbd></td><td align="left">在光标所在的错误代码处显示错误信息</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>F11</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>F3</kbd></td><td align="left">选中文件 / 文件夹，使用助记符设定 / 取消书签</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>F12</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>F12</kbd></td><td align="left">弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Space</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>Space</kbd></td><td align="left">基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 <code>Ctrl + 逗号</code></td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Delete</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Fn</kbd>+ Delete</td><td align="left">删除光标后面的单词或是中文句</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>BackSpace</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Delete</kbd></td><td align="left">删除光标前面的单词或是中文句</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>1,2,3...9</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>1,2,3...9</kbd></td><td align="left">定位到对应数值的书签位置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>加号</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>加号</kbd></td><td align="left">展开代码</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>减号</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>减号</kbd></td><td align="left">折叠代码</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>左键单击</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>左键单击</kbd></td><td align="left">在打开的文件标题上，弹出该文件路径</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>左方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>左方向键</kbd></td><td align="left">光标跳转到当前单词 / 中文句的左侧开头位置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>右方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>右方向键</kbd></td><td align="left">光标跳转到当前单词 / 中文句的右侧开头位置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>前方向键</kbd></td><td align="left">预设中没有该快捷键</td><td align="left">等效于鼠标滚轮向前效果</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>后方向键</kbd></td><td align="left">预设中没有该快捷键</td><td align="left">等效于鼠标滚轮向后效果</td></tr></tbody></table><h2 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Alt</kbd> + <kbd>`</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>V</kbd></td><td align="left">显示版本控制常用操作菜单弹出层</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>F1</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>F1</kbd></td><td align="left">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>F7</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>F7</kbd></td><td align="left">查询所选对象/变量被引用</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>Enter</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Enter</kbd></td><td align="left">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>Insert</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>N</kbd></td><td align="left">代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>左方向键</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>左方向键</kbd></td><td align="left">切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>右方向键</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>右方向键</kbd></td><td align="left">切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>前方向键</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>前方向键</kbd></td><td align="left">当前光标跳转到当前文件的前一个方法名位置</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>后方向键</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>后方向键</kbd></td><td align="left">当前光标跳转到当前文件的后一个方法名位置</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>1,2,3...9</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>1,2,3...9</kbd></td><td align="left">显示对应数值的选项卡，其中 1 是 Project 用得最多</td></tr></tbody></table><h2 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Shift</kbd> + <kbd>F11</kbd></td><td align="left"><kbd>Command + F3</kbd></td><td align="left">弹出书签显示层</td></tr><tr><td align="left"><kbd>Shift</kbd> + <kbd>Tab</kbd></td><td align="left"><kbd>Shift + Tab</kbd></td><td align="left">取消缩进</td></tr><tr><td align="left"><kbd>Shift</kbd> + <kbd>Enter</kbd></td><td align="left"><kbd>Shift + Enter</kbd></td><td align="left">开始新一行。光标所在行下空出一行，光标定位到新行位置</td></tr><tr><td align="left"><kbd>Shift</kbd> + <kbd>左键单击</kbd></td><td align="left"><kbd>Shift + 左键单击</kbd></td><td align="left">在打开的文件名上按此快捷键，可以关闭当前打开文件</td></tr></tbody></table><h2 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>L</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>L</kbd></td><td align="left">格式化代码，可以对当前文件和整个包目录使用</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>O</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>Option</kbd> + <kbd>O</kbd></td><td align="left">优化导入的类，可以对当前文件和整个包目录使用</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>T</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>T</kbd></td><td align="left">对选中的代码弹出环绕选项弹出层</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>S</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>逗号</kbd></td><td align="left">打开 IntelliJ IDEA 系统设置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>Enter</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>Enter</kbd></td><td align="left">光标所在行上空出一行，光标定位到新行</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>左方向键</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>左方向键</kbd></td><td align="left">退回到上一个操作的地方</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>右方向键</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>右方向键</kbd></td><td align="left">前进到上一个操作的地方</td></tr></tbody></table><h2 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>F</kbd></td><td align="left">根据输入内容查找整个项目 或 指定目录内文件</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>R</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>R</kbd></td><td align="left">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>J</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>J</kbd></td><td align="left">自动将下一行合并到当前行末尾</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Z</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>Z</kbd></td><td align="left">取消撤销</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>W</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>方向键下</kbd></td><td align="left">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>N</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd></td><td align="left">通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd></td><td align="left">对选中的代码进行大 / 小写轮流转换</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>T</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>T</kbd></td><td align="left">对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd></td><td align="left">复制当前文件磁盘路径到剪贴板</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></td><td align="left">跳转到类型声明处</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>/</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>/</kbd></td><td align="left">代码块注释</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>[</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>[</kbd></td><td align="left">选中从光标所在位置到它的顶部中括号位置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>]</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>]</kbd></td><td align="left">选中从光标所在位置到它的底部中括号位置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>加号</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>加号</kbd></td><td align="left">展开所有代码</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>减号</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>减号</kbd></td><td align="left">折叠所有代码</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F7</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>F7</kbd></td><td align="left">高亮显示所有该选中文本，按Esc高亮消失</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F12</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>F12</kbd></td><td align="left">编辑器最大化</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd></td><td align="left">自动结束代码，行末自动添加分号</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Backspace</kbd></td><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Backspace</kbd></td><td align="left">退回到上次修改的地方</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>1,2,3...9</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>1,2,3...9</kbd></td><td align="left">快速添加指定数值的书签</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>左键单击</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>左键单击</kbd></td><td align="left">把光标放在某个类变量上，按此快捷键可以直接定位到该类中</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>左方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>左方向键</kbd></td><td align="left">在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>右方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>右方向键</kbd></td><td align="left">在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td align="left">光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td align="left">光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td></tr></tbody></table><h2 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>N</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></td><td align="left">选择 / 添加 task</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>左键双击</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>左键双击</kbd></td><td align="left">选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td align="left">移动光标所在行向上移动</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td align="left">移动光标所在行向下移动</td></tr></tbody></table><h2 id="Ctrl-Shift-Alt"><a href="#Ctrl-Shift-Alt" class="headerlink" title="Ctrl + Shift + Alt"></a>Ctrl + Shift + Alt</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>V</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>Option</kbd> + <kbd>V</kbd></td><td align="left">无格式黏贴</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>S</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>;</kbd></td><td align="left">打开当前项目设置</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>F2</kbd></td><td align="left"><kbd>F2</kbd></td><td align="left">跳转到下一个高亮错误 或 警告位置</td></tr><tr><td align="left"><kbd>F4</kbd></td><td align="left"><kbd>F4</kbd></td><td align="left">编辑源</td></tr><tr><td align="left"><kbd>F11</kbd></td><td align="left"><kbd>F3</kbd></td><td align="left">添加书签</td></tr><tr><td align="left"><kbd>F12</kbd></td><td align="left"><kbd>F12</kbd></td><td align="left">回到前一个工具窗口</td></tr><tr><td align="left"><kbd>Tab</kbd></td><td align="left"><kbd>Tab</kbd></td><td align="left">缩进</td></tr><tr><td align="left"><kbd>ESC</kbd></td><td align="left"><kbd>ESC</kbd></td><td align="left">从工具窗口进入代码文件窗口</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Mac-键盘符号说明&quot;&gt;&lt;a href=&quot;#Mac-键盘符号说明&quot; class=&quot;headerlink&quot; title=&quot;Mac 键盘符号说明&quot;&gt;&lt;/a&gt;Mac 键盘符号说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;⌘&lt;/code&gt; == &lt;code&gt;Command&lt;</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="小妙招" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/%E5%B0%8F%E5%A6%99%E6%8B%9B/"/>
    
    
    <category term="快捷键" scheme="https://www.lzp.zone/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    <category term="全局操作" scheme="https://www.lzp.zone/tags/%E5%85%A8%E5%B1%80%E6%93%8D%E4%BD%9C/"/>
    
    <category term="效率" scheme="https://www.lzp.zone/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>《MySQL必知必会》拆书稿</title>
    <link href="https://www.lzp.zone/2021/11/03/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E6%8B%86%E4%B9%A6%E7%A8%BF/"/>
    <id>https://www.lzp.zone/2021/11/03/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E6%8B%86%E4%B9%A6%E7%A8%BF/</id>
    <published>2021-11-03T04:10:02.000Z</published>
    <updated>2022-03-18T00:58:51.615Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>共三十章，211面<br>内容有待精简<br>持续更新、</p></blockquote><h2 id="第1章-了解SQL"><a href="#第1章-了解SQL" class="headerlink" title="第1章 了解SQL"></a>第1章 了解SQL</h2><h3 id="1-1-数据库基础"><a href="#1-1-数据库基础" class="headerlink" title="1.1  数据库基础"></a>1.1  数据库基础</h3><h4 id="1-1-1-什么是数据库"><a href="#1-1-1-什么是数据库" class="headerlink" title="1.1.1  什么是数据库"></a>1.1.1  什么是数据库</h4><ul><li>数据库是一个以某种 有组织的方式存储的数据集合。</li><li>数据库不同于日常使用的数据库软件（DBMS 数据库管理系统），数据库是通过DBMS创建和操纵的容器。数据库可以是保存在硬设备上的文件，但也可以不是。</li></ul><h4 id="1-1-2-表"><a href="#1-1-2-表" class="headerlink" title="1.1.2  表"></a>1.1.2  表</h4><ul><li>表是一种结构化的文件，可用 来存储某种特定类型的数据。表可以保存顾客清单、产品目录，或者其 他信息清单。</li><li>存储在表中的数据是一种类型的数据或一个清单，决不能将归属于不同类型的数据储存在一起。</li><li>数据库中的每个表都有一个名字，用来标识自己。此名字是唯一的， 这表示数据库中没有其他表具有相同的名字。</li><li>虽然在相同数据库中不能两次使用相同的表名， 但在不同的数据库中却可以使用相同的表名。</li><li>模式(schema) ：关于数据库和表的布局及特性的信息。模式可以用来描述数据库中特定的表以及 整个数据库(和其中表的关系)。</li></ul><h4 id="1-1-3-列和数据类型"><a href="#1-1-3-列和数据类型" class="headerlink" title="1.1.3  列和数据类型"></a>1.1.3  列和数据类型</h4><ul><li><p>表由列组成。列中存储着表中某部分的信息。列(column)： 表中的一个字段。所有表都是由一个或多个列组成的。</p></li><li><p>理解列的最好办法是将数据库表想象为一个网格。网格中每一列存 储着一条特定的信息。</p></li><li><p>数据库中每个列都有相应的数据类型。数据类型定义列可以存储的数据种类。</p></li><li><p>数据类型限制可存储在列中的数据种类(例如，防止在数值字段中 录入字符值)。数据类型还帮助正确地排序数据，并在优化磁盘使用方面起重要的作用。因此，在创建表时必须对数据类型给予特别的关注。</p><h4 id="1-1-4-行"><a href="#1-1-4-行" class="headerlink" title="1.1.4  行"></a>1.1.4  行</h4></li><li><p>表中的数据是按行存储的，所保存的每个记录存储在自己的行内。如果将表想象为网格，网格中垂直的列为表列，水平行为表行。</p></li><li><p>用户在提到行(row)时称其为 数据库记录(record)。在很大程度上，这两个术语是可以互相 替代的，但从技术上说，行才是正确的术语。</p><h4 id="1-1-5-主键"><a href="#1-1-5-主键" class="headerlink" title="1.1.5  主键"></a>1.1.5  主键</h4></li><li><p>主键(primary key)1一一列(或一组列)，其值能够唯一区分表 中每个行。表中每一行都应该有可以唯一标识自己的一列(或一组列)。</p></li><li><p>唯一标识表中每行的这个列(或这组列)称为主键。主键用来表示 一个特定的行。没有主键，更新或删除表中特定行很困难，因为没有安 全的方法保证只涉及相关的行。</p></li><li><p>表中的任何列都可以作为主键，只要它满足以下条件:</p><ul><li>任意两行都不具有相同的主键值;</li><li>每个行都必须具有一个主键值(主键列不允许NULL值)。</li></ul></li><li><p>主键值规则（本身强制的要求）</p><ul><li>主键通常定义在表的一列上，但这并不是必需的，也可以一起使用多个列作为主键。</li><li>在使用多列作为主键时，上述条件必须应用到构成主 键的所有列，所有列值的组合必须是唯一的(但单个列的值可以不唯一)。</li></ul></li><li><p>使用主键的好习惯：</p><ul><li>不更新主键列中的值;</li><li>不重用主键列的值;</li><li>不在主键列中使用可能会更改的值。</li></ul></li></ul><h3 id="1-2-什么是SQL"><a href="#1-2-什么是SQL" class="headerlink" title="1.2  什么是SQL"></a>1.2  什么是SQL</h3><ul><li>SQL(发音为字母S-Q-L或sequel)是结构化查询语言(Structured Query Language)的缩写。SQL是一种专门用来与数据库通信的语言。</li><li>SQL有如下的优点：<ul><li>SQL不是某个特定数据库供应商专有的语言。几乎所有重要的DBMS都支持SQL，所以，学习此语言使你几乎能与所有数据库打交道。</li><li>SQL简单易学。它的语句全都是由描述性很强的英语单词组成， 而且这些单词的数目不多。</li><li>SQL尽管看上去很简单，但它实际上是一种强有力的语言，灵活 使用其语言元素，可以进行非常复杂和高级的数据库操作。</li></ul></li></ul><h3 id="1-3-动手实践"><a href="#1-3-动手实践" class="headerlink" title="1.3  动手实践"></a>1.3  动手实践</h3><h3 id="1-4-小结"><a href="#1-4-小结" class="headerlink" title="1.4  小结"></a>1.4  小结</h3><h2 id="第2章-MySQL简介"><a href="#第2章-MySQL简介" class="headerlink" title="第2章 MySQL简介"></a>第2章 MySQL简介</h2><h3 id="2-1-什么是MySQL"><a href="#2-1-什么是MySQL" class="headerlink" title="2.1  什么是MySQL"></a>2.1  什么是MySQL</h3><ul><li>数据的所有存储、 检索、管理和处理实际上是由数据库软件——DBMS(数据库管理系统) 完成的。MySQL是一种DBMS，即它是一种数据库软件。</li><li>MySQL广泛应用的原因：<ul><li>成本低</li><li>性能好</li><li>可信赖</li><li>简单</li></ul></li></ul><h4 id="2-1-1-客户机—服务器软件"><a href="#2-1-1-客户机—服务器软件" class="headerlink" title="2.1.1  客户机—服务器软件"></a>2.1.1  客户机—服务器软件</h4><ul><li><p>DBMS的两种类型</p><ul><li><p>一类为基于共享文件系统的DBMS</p></li><li><p>另一类为基于客户机——服务器的DBMS</p><p>MySQL，Oracle，Microsoft SQL Server都属于后者。</p></li></ul></li><li><p>客户机—服务器应用分为两个不同的部分：</p><ul><li>服务器部分是负责所有数据访问和处理的一个软件。这个软件运行在称为数据库服务器的计算机上。与数据文件打交道的只有服务器软件。关于数据、数据添加、删除和数据更新的所有请求都由服务器软件完成。</li><li>客户机是与用户打交道的软件。</li></ul></li><li><p>事实上，多数网络的建立使用户不具有对数据的访问权，甚至不 具有对存储数据的驱动器的访问权。</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw1u8enn8lj30q906ndh5.jpg"                      alt="image-20210923150430496"                ></p><h4 id="2-1-2-MySQL版本"><a href="#2-1-2-MySQL版本" class="headerlink" title="2.1.2  MySQL版本"></a>2.1.2  MySQL版本</h4><ul><li>MySQL 4.1对MySQL函数库引入了重要更改，本书是为使用此版本或更高版本而撰写的。</li></ul><h3 id="2-2-MySQL工具"><a href="#2-2-MySQL工具" class="headerlink" title="2.2  MySQL工具"></a>2.2  MySQL工具</h3><ul><li>每个MySQL安装都有一个名为mysql的简单命令行实用程序。这个实用程序没有下拉菜单、流行的用户界面、鼠标支持或任何类似的东西。</li></ul><h4 id="2-2-1-mysql命令行实用程序"><a href="#2-2-1-mysql命令行实用程序" class="headerlink" title="2.2.1 mysql命令行实用程序"></a>2.2.1 mysql命令行实用程序</h4><ul><li><p>如果仅输入mysql，可能会出现一个错误 消息。因为可能需要安全证书，或者是因为MySQL没有运行 在本地或默认端口上。</p></li><li><p>mysql接受你可以(和可能需要)使用 的一组命令行参数。</p></li><li><p>具体的版本和连接信息可能不同，但都可以使用这个实用程序。请注意:</p><ul><li><p>命令输入在mysql&gt;之后;</p></li><li><p>命令用;或\g结束，换句话说，仅按Enter不执行命令;</p></li><li><p>输入help或\h获得帮助，也可以输入更多的文本获得特定命令的帮助(如，输入help select获得使用SELECT语句的帮助);</p></li><li><p>输入quit或exit退出命令行实用程序。</p><p>==mysql命令行实用程序是使用最多的实用程序之一，它对于快速测试和执行脚本非常有价值。==</p></li></ul></li></ul><h4 id="2-2-2-MySQL-Adminis-trator"><a href="#2-2-2-MySQL-Adminis-trator" class="headerlink" title="2.2.2  MySQL Adminis-trator"></a>2.2.2  MySQL Adminis-trator</h4><ul><li><p>MySQL Administrator(MySQL管理器)是一个图形交互客户机，用来简化MySQL服务器的管理。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw1u8fniw9j30o405g3z9.jpg"                      alt="image-20210923152606488" style="zoom: 67%;"                 ></li><li><p>MySQL Administrator提示输入服务器和登录信息(并且允许你保存 服务器定义供以后选择)，然后显示允许选择不同视图的图标。其中:</p><ul><li> Server Information(服务器信息)显示客户机和被连接的服务器的状态和版本信息;</li><li> Service Control(服务控制)允许停止和启动MySQL以及指定服务器特性;</li><li> User Administration(用户管理)用来定义MySQL用户、登录和权限;</li><li> Catalogs(目录)列出可用的数据库并允许创建数据库和表。</li></ul></li></ul><h4 id="2-2-3-MySQL-Query-Browser"><a href="#2-2-3-MySQL-Query-Browser" class="headerlink" title="2.2.3  MySQL Query Browser"></a>2.2.3  MySQL Query Browser</h4><ul><li><p>MySQL Query Browser为一个图形交互客户机，用来编写和执行 MySQL命令。</p></li><li><p>MySQL Query Browser要求输入服务器和登录信息(在MySQL Query Browser和MySQL Administrator之间共享保存的定义)，然后显示应用界面。注意下面几点：</p><ul><li><p>输入MySQL命令到屏幕顶上的窗口中。在输入语句后，单击 Execute按钮把它提交给MySQL处理。</p></li><li><p>结果(如果有)显示在屏幕左边的大区域网格中。</p></li><li><p>多条语句和结果显示在它们自己的标签中，并且允许快速切换。屏幕右边是一个标签，它列出所有可能的数据源(这里称为大纲)，展开任一数据源查看它的表，展开任一个表查看它的列。 你还可以选择表和列让MySQL Query Browser为你编写MySQL语句。</p></li><li><p>Schemata(大纲)标签的右边是一个History(历史)标签，它保持MySQL语句的执行历史。在需要测试不同版本的MySQL语句时，它非常有用。</p></li><li><p>关于MySQL语法、函数等的帮助可在屏幕右下角得到。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw1u8f587qj30rf06sdgk.jpg"                      alt="image-20210923153349510"                ></p></li></ul></li></ul><h3 id="2-3-小结"><a href="#2-3-小结" class="headerlink" title="2.3  小结"></a>2.3  小结</h3><h2 id="第3章-使用MySQL"><a href="#第3章-使用MySQL" class="headerlink" title="第3章 使用MySQL"></a>第3章 使用MySQL</h2><h3 id="3-1-连接"><a href="#3-1-连接" class="headerlink" title="3.1  连接"></a>3.1  连接</h3><ul><li>MySQL与所有的客户机-服务器一样,要求在能执行命令之前登录到DBMS</li><li>登录名可以与网络登录名不同,MySQL 在内部保存自己的用户列表,并且把每个用户与用户权限关联起来</li><li>连接到MySQL,需要一下信息:<ul><li>主机名(计算机名)</li><li>端口</li><li>一个合法的用户名</li><li>用户口令</li></ul></li></ul><h3 id="3-2-选择数据库"><a href="#3-2-选择数据库" class="headerlink" title="3.2  选择数据库"></a>3.2  选择数据库</h3><h3 id="3-3-了解数据库和表"><a href="#3-3-了解数据库和表" class="headerlink" title="3.3  了解数据库和表"></a>3.3  了解数据库和表</h3><h3 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4  小结"></a>3.4  小结</h3><h2 id="第4章-检索数据"><a href="#第4章-检索数据" class="headerlink" title="第4章 检索数据"></a>第4章 检索数据</h2><h3 id="4-1-SELECT语句"><a href="#4-1-SELECT语句" class="headerlink" title="4.1 SELECT语句"></a>4.1 SELECT语句</h3><h3 id="4-2-检索单个列"><a href="#4-2-检索单个列" class="headerlink" title="4.2 检索单个列"></a>4.2 检索单个列</h3><h3 id="4-3-检索多个列"><a href="#4-3-检索多个列" class="headerlink" title="4.3 检索多个列"></a>4.3 检索多个列</h3><h3 id="4-4-检索所有列"><a href="#4-4-检索所有列" class="headerlink" title="4.4 检索所有列"></a>4.4 检索所有列</h3><h3 id="4-5-检索不同的行"><a href="#4-5-检索不同的行" class="headerlink" title="4.5 检索不同的行"></a>4.5 检索不同的行</h3><h3 id="4-6-限制结果"><a href="#4-6-限制结果" class="headerlink" title="4.6 限制结果"></a>4.6 限制结果</h3><h3 id="4-7-使用完全限定的表名"><a href="#4-7-使用完全限定的表名" class="headerlink" title="4.7 使用完全限定的表名"></a>4.7 使用完全限定的表名</h3><h3 id="4-8-小结"><a href="#4-8-小结" class="headerlink" title="4.8 小结"></a>4.8 小结</h3><h2 id="第5章-排序检索数据"><a href="#第5章-排序检索数据" class="headerlink" title="第5章 排序检索数据"></a>第5章 排序检索数据</h2><h3 id="5-1-排序数据"><a href="#5-1-排序数据" class="headerlink" title="5.1 排序数据"></a>5.1 排序数据</h3><h3 id="5-2-按多个列排序"><a href="#5-2-按多个列排序" class="headerlink" title="5.2 按多个列排序"></a>5.2 按多个列排序</h3><h3 id="5-3-指定排序方向"><a href="#5-3-指定排序方向" class="headerlink" title="5.3 指定排序方向"></a>5.3 指定排序方向</h3><h3 id="5-4-小结"><a href="#5-4-小结" class="headerlink" title="5.4 小结"></a>5.4 小结</h3><h2 id="第6章-过滤数据"><a href="#第6章-过滤数据" class="headerlink" title="第6章 过滤数据"></a>第6章 过滤数据</h2><h3 id="6-1-使用WHERE子句"><a href="#6-1-使用WHERE子句" class="headerlink" title="6.1 使用WHERE子句"></a>6.1 使用WHERE子句</h3><h3 id="6-2-WHERE子句操作符"><a href="#6-2-WHERE子句操作符" class="headerlink" title="6.2 WHERE子句操作符"></a>6.2 WHERE子句操作符</h3><h3 id="6-2-1-检查单个值"><a href="#6-2-1-检查单个值" class="headerlink" title="6.2.1 检查单个值"></a>6.2.1 检查单个值</h3><h3 id="6-2-2-不匹配检查"><a href="#6-2-2-不匹配检查" class="headerlink" title="6.2.2 不匹配检查"></a>6.2.2 不匹配检查</h3><h3 id="6-2-3-范围值检查"><a href="#6-2-3-范围值检查" class="headerlink" title="6.2.3 范围值检查"></a>6.2.3 范围值检查</h3><h3 id="6-2-4-空值检查"><a href="#6-2-4-空值检查" class="headerlink" title="6.2.4 空值检查"></a>6.2.4 空值检查</h3><h3 id="6-3-小结"><a href="#6-3-小结" class="headerlink" title="6.3 小结"></a>6.3 小结</h3><h2 id="第7章-数据过滤……………………-40"><a href="#第7章-数据过滤……………………-40" class="headerlink" title="第7章 数据过滤…………………….. 40"></a>第7章 数据过滤…………………….. 40</h2><h3 id="7-1-组合WHERE子句-………………-40"><a href="#7-1-组合WHERE子句-………………-40" class="headerlink" title="7.1 组合WHERE子句 ……………….. 40"></a>7.1 组合WHERE子句 ……………….. 40</h3><h3 id="7-1-1-AND操作符-……………-40"><a href="#7-1-1-AND操作符-……………-40" class="headerlink" title="7.1.1  AND操作符 ……………. 40"></a>7.1.1  AND操作符 ……………. 40</h3><h3 id="7-1-2-OR操作符-………………-41"><a href="#7-1-2-OR操作符-………………-41" class="headerlink" title="7.1.2  OR操作符 ……………… 41"></a>7.1.2  OR操作符 ……………… 41</h3><h3 id="7-1-3-计算次序-………………-42"><a href="#7-1-3-计算次序-………………-42" class="headerlink" title="7.1.3  计算次序 ……………… 42"></a>7.1.3  计算次序 ……………… 42</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;共三十章，211面&lt;br&gt;内容有待精简&lt;br&gt;持续更新、&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;第1章-了解SQL&quot;&gt;&lt;a href=&quot;#第1章-了解SQL&quot; class=&quot;headerlink&quot; title=&quot;第1章 了解SQL&quot;&gt;</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.lzp.zone/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="拆书稿" scheme="https://www.lzp.zone/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%8B%86%E4%B9%A6%E7%A8%BF/"/>
    
    <category term="悦读" scheme="https://www.lzp.zone/categories/%E6%82%A6%E8%AF%BB/"/>
    
    <category term="拆书稿" scheme="https://www.lzp.zone/categories/%E6%82%A6%E8%AF%BB/%E6%8B%86%E4%B9%A6%E7%A8%BF/"/>
    
    
    <category term="MySQL" scheme="https://www.lzp.zone/tags/MySQL/"/>
    
    <category term="数据库" scheme="https://www.lzp.zone/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="SQL" scheme="https://www.lzp.zone/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>设计网站集锦</title>
    <link href="https://www.lzp.zone/2021/11/02/%E6%BC%82%E4%BA%AE%E8%AE%BE%E8%AE%A1/"/>
    <id>https://www.lzp.zone/2021/11/02/%E6%BC%82%E4%BA%AE%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-11-02T14:05:37.000Z</published>
    <updated>2022-03-18T00:59:46.317Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一大波资源正在来袭</p></blockquote><ol><li><p><a class="link"   href="http://bm.straightline.jp/" >直线<i class="fas fa-external-link-alt"></i></a><br>一个日本的网站设计赏析平台</p></li><li><p><a class="link"   href="https://dribbble.com/" >Dribble<i class="fas fa-external-link-alt"></i></a><br>UI分享网站</p></li><li><p><a class="link"   href="https://www.behance.net/" >Behance<i class="fas fa-external-link-alt"></i></a><br>比Drbble更全面，支持英文关键字搜索</p></li><li><p><a class="link"   href="https://logopond.com/" >logopond<i class="fas fa-external-link-alt"></i></a><br>国外优秀logo分享平台</p></li><li><p><a class="link"   href="http://instantlogosearch.com/" >instant logo<i class="fas fa-external-link-alt"></i></a><br>提供各大公司logo的矢量图下载</p></li><li><p><a class="link"   href="https://www.lapa.ninja/" >lapa<i class="fas fa-external-link-alt"></i></a><br>精美的landing page收集网站</p></li><li><p><a class="link"   href="https://www.awwwards.com/" >awwwards<i class="fas fa-external-link-alt"></i></a><br>展示卓越前沿的web设计，打分评价</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一大波资源正在来袭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;http://bm.straightline.jp/&quot; &gt;直线&lt;i class=&quot;fas fa-external-lin</summary>
      
    
    
    
    <category term="设计美学" scheme="https://www.lzp.zone/categories/%E8%AE%BE%E8%AE%A1%E7%BE%8E%E5%AD%A6/"/>
    
    <category term="资源素材" scheme="https://www.lzp.zone/categories/%E8%AE%BE%E8%AE%A1%E7%BE%8E%E5%AD%A6/%E8%B5%84%E6%BA%90%E7%B4%A0%E6%9D%90/"/>
    
    
    <category term="设计资源网站" scheme="https://www.lzp.zone/tags/%E8%AE%BE%E8%AE%A1%E8%B5%84%E6%BA%90%E7%BD%91%E7%AB%99/"/>
    
    <category term="UI设计" scheme="https://www.lzp.zone/tags/UI%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>林湾村流着哈喇子的哈巴狗在啃骨头</title>
    <link href="https://www.lzp.zone/2021/11/02/%E6%9E%97%E6%B9%BE%E6%9D%91%E6%B5%81%E7%9D%80%E5%93%88%E5%96%87%E5%AD%90%E7%9A%84%E5%93%88%E5%B7%B4%E7%8B%97/"/>
    <id>https://www.lzp.zone/2021/11/02/%E6%9E%97%E6%B9%BE%E6%9D%91%E6%B5%81%E7%9D%80%E5%93%88%E5%96%87%E5%AD%90%E7%9A%84%E5%93%88%E5%B7%B4%E7%8B%97/</id>
    <published>2021-11-02T13:05:47.000Z</published>
    <updated>2022-03-19T00:34:16.034Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录那些细碎时光</p></blockquote><h5 id="哎哟，大灰，你这蓝猫胖子镜头感不错啊"><a href="#哎哟，大灰，你这蓝猫胖子镜头感不错啊" class="headerlink" title="哎哟，大灰，你这蓝猫胖子镜头感不错啊"></a>哎哟，大灰，你这蓝猫胖子镜头感不错啊</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4ha33knmj30qo0qitbo.jpg"                      alt="image-20211105190324413"                ></p><h5 id="“别瞪了，别瞪了，快瞎了，姐姐饶命-”-拍完快逃"><a href="#“别瞪了，别瞪了，快瞎了，姐姐饶命-”-拍完快逃" class="headerlink" title="“别瞪了，别瞪了，快瞎了，姐姐饶命~” 拍完快逃"></a>“别瞪了，别瞪了，快瞎了，姐姐饶命~” 拍完快逃</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4h7u2szhj30k00qo454.jpg"                      alt="image-20211105190115489"                ></p><h5 id="桌面清理大师的多巴胺飙升时刻，点名表扬小米台灯，还能再漂亮点吗？"><a href="#桌面清理大师的多巴胺飙升时刻，点名表扬小米台灯，还能再漂亮点吗？" class="headerlink" title="桌面清理大师的多巴胺飙升时刻，点名表扬小米台灯，还能再漂亮点吗？"></a>桌面清理大师的多巴胺飙升时刻，点名表扬小米台灯，还能再漂亮点吗？</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4i28ahyhj30qo0k0gn8.jpg"                      alt="image-20211105193027008"                ></p><h5 id="“咕噜咕噜，太饿了，我先喝点电”"><a href="#“咕噜咕噜，太饿了，我先喝点电”" class="headerlink" title="“咕噜咕噜，太饿了，我先喝点电”"></a>“咕噜咕噜，太饿了，我先喝点电”</h5><p>我说Mac咱充电这么慢（传统艺能(￣.￣)），原来猫着个偷电贼！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4i8uvpysj30qo0k0jss.jpg"                      alt="image-20211105193649595"                ></p><h5 id="猫猫祟祟，“喂！人类，你瞅啥？”"><a href="#猫猫祟祟，“喂！人类，你瞅啥？”" class="headerlink" title="猫猫祟祟，“喂！人类，你瞅啥？”"></a>猫猫祟祟，“喂！人类，你瞅啥？”</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4h5u4j4yj30k00qo0zg.jpg"                      alt="image-20211105185918334"                ></p><h5 id="建设路猫咖的小白，睡得好香甜，看起来好乖，做美梦居然不流口水-￣▽￣"><a href="#建设路猫咖的小白，睡得好香甜，看起来好乖，做美梦居然不流口水-￣▽￣" class="headerlink" title="建设路猫咖的小白，睡得好香甜，看起来好乖，做美梦居然不流口水   ￣▽￣"></a>建设路猫咖的小白，睡得好香甜，看起来好乖，做美梦居然不流口水   ￣▽￣</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4h0ca9okj30k00qodib.jpg"                      alt="image-20211105185403034"                ></p><h5 id="Cyberpunk-Rainbow-Bridge-欢迎登录午夜飞艇"><a href="#Cyberpunk-Rainbow-Bridge-欢迎登录午夜飞艇" class="headerlink" title="Cyberpunk Rainbow Bridge. 欢迎登录午夜飞艇"></a>Cyberpunk Rainbow Bridge. 欢迎登录午夜飞艇</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4gxg4ea8j30qo0cm3zv.jpg"                      alt="image-20211105185116434"                ></p><h5 id="租间的“拼多多”墙面，9块9我拼出了个新太阳系，这么多球可踢，这宇航员真幸福"><a href="#租间的“拼多多”墙面，9块9我拼出了个新太阳系，这么多球可踢，这宇航员真幸福" class="headerlink" title="租间的“拼多多”墙面，9块9我拼出了个新太阳系，这么多球可踢，这宇航员真幸福"></a>租间的“拼多多”墙面，9块9我拼出了个新太阳系，这么多球可踢，这宇航员真幸福</h5><blockquote><p>解释一下，隔壁那个“平行宇宙”是价值四十大洋的墙布，装了个大月亮和宿醉的阿姆斯朗，“思乡嘛人之常情~”。</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4hccsra5j30qo0k075m.jpg"                      alt="image-20211105190535999"                ></p><h5 id="晒着阳光浴打盹的花大爷"><a href="#晒着阳光浴打盹的花大爷" class="headerlink" title="晒着阳光浴打盹的花大爷"></a>晒着阳光浴打盹的花大爷</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4gwv8qeaj30qo0k0acx.jpg"                      alt="image-20211105185040608"                ></p><h5 id="水の鄙视链："><a href="#水の鄙视链：" class="headerlink" title="水の鄙视链："></a>水の鄙视链：</h5><p>怡宝：“您好水，请上座。” </p><p>农夫山泉：“你才水呢，我是大自然的馈赠！”</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4hs4c0k0j30qo0k0tbi.jpg"                      alt="image-20211105192043999"                ></p><h5 id="这是我住的宿舍？？？不知道还以为是汤臣一品呢！"><a href="#这是我住的宿舍？？？不知道还以为是汤臣一品呢！" class="headerlink" title="这是我住的宿舍？？？不知道还以为是汤臣一品呢！"></a>这是我住的宿舍？？？不知道还以为是汤臣一品呢！</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw15qlztymj31900u0als.jpg"                      alt="-a783609ff8797d8"                ></p><h5 id="分手桥"><a href="#分手桥" class="headerlink" title="分手桥"></a>分手桥</h5><p>相当漂亮的对称美，像是侧卧的虹桥</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw18owksllj31900u0djl.jpg"                      alt="-14a3f5173c0db02e"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;记录那些细碎时光&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;哎哟，大灰，你这蓝猫胖子镜头感不错啊&quot;&gt;&lt;a href=&quot;#哎哟，大灰，你这蓝猫胖子镜头感不错啊&quot; class=&quot;headerlink&quot; title=&quot;哎哟，大灰，你这蓝猫胖子镜</summary>
      
    
    
    
    <category term="生活点滴" scheme="https://www.lzp.zone/categories/%E7%94%9F%E6%B4%BB%E7%82%B9%E6%BB%B4/"/>
    
    <category term="林湾村" scheme="https://www.lzp.zone/categories/%E7%94%9F%E6%B4%BB%E7%82%B9%E6%BB%B4/%E6%9E%97%E6%B9%BE%E6%9D%91/"/>
    
    
    <category term="林湾村" scheme="https://www.lzp.zone/tags/%E6%9E%97%E6%B9%BE%E6%9D%91/"/>
    
    <category term="回忆" scheme="https://www.lzp.zone/tags/%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>一周一本</title>
    <link href="https://www.lzp.zone/2021/11/02/%E4%B8%80%E5%91%A8%E4%B8%80%E6%9C%AC/"/>
    <id>https://www.lzp.zone/2021/11/02/%E4%B8%80%E5%91%A8%E4%B8%80%E6%9C%AC/</id>
    <published>2021-11-02T12:59:26.000Z</published>
    <updated>2022-01-14T04:33:07.613Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>A book a week keeps games away~</em></p><p>（╮(￣▽￣)╭）农药玩家手动滑稽</p><p>看了油管Up <a class="link"   href="https://www.youtube.com/c/JohnFishie" >John Fish<i class="fas fa-external-link-alt"></i></a>的<a class="link"   href="https://www.youtube.com/watch?v=r--wz576ke0&t=378s" >视频<i class="fas fa-external-link-alt"></i></a>，又看了看躺在收藏夹里吃灰的伙计们，遂打算一周看完一本清清库存</p><p>这小伙子说多利用碎片化的空闲时间，也应了鲁迅先生的海绵之说，是个好技巧</p><p>看自己能坚持多久吧</p></blockquote><h2 id="《被讨厌的勇气》"><a href="#《被讨厌的勇气》" class="headerlink" title="《被讨厌的勇气》"></a>《被讨厌的勇气》</h2><blockquote><p>共计10.2万字</p><p>心理哲学</p></blockquote><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw1uujw5nyj30u01dajtl.jpg"                      alt="weread_image_444749517143618"                  ><p>复读指数：⭐️⭐️⭐️⭐️</p><p>上周还欠了“一夜半”没看完，这周补完</p><p>采用青年和哲人地对话引导读者思考，传达阿德勒心理学的核心点，看起来不枯燥，会觉得自己仿佛就站在那个小房间里，看着他俩交流，甚至能想象的到那小伙子挠头搔耳，苦苦思鸣的样子，我看着看着发现，这哪里是“他”啊，这他喵的分明就是我啊。</p><p>这本书给了我很多关于生活哲学，亲密关系，人际关系，自我认知等方面新的认识，与生俱来的一些“人性”或许是一种羁绊，从小到大接受的教育体系里都讲究因果逻辑，或许自己就默认觉得这才正确的，在某些方面这也许是一种偏见……</p><p>细看下来某些地方还不够严密，给人一种唯心的感觉，但却是本好的启发书，也是一本不错的生活指导手册，值得复读。</p><hr><h2 id="《虚拟现实：沉浸于VR梦境》"><a href="#《虚拟现实：沉浸于VR梦境》" class="headerlink" title="《虚拟现实：沉浸于VR梦境》"></a>《虚拟现实：沉浸于VR梦境》</h2><blockquote><p>共计27.1万字</p><p>技术科普</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4bh6hak4j30u0140gta.jpg"                      alt="image-20211105154234239"                ></p><p>新知指数：⭐️⭐️⭐️</p><p>一本含括内容很广的入门读物，更像是一本全面的调查书，从各方各面描述VR的前世今生。</p><p>令人想不到的是，VR眼镜作为元宇宙的重要入场设备之一，如今已经将至”而立之年“；经历这么多年一直被炒的火热而没能在市场大杀四方，一直制约其发展的主要是算力缺乏以及使用眩晕感，体积大不便佩戴等原因，孱弱的产品力，性价比自然而然便造就低的市场号召力。</p><p>在我看来，VR(MR，AR)等技术有着广阔的应用前景，相比于元宇宙这种比较有争议性的概念，购物，游戏，教育的拓展应用更摸的着一些。一款算力强悍，小巧实用的VR眼镜产品搭配上大品牌宣发，充实丰富的内容平台，可以像Iphone4那样惊艳世人大杀四方，作为第四代智能终端，颠覆手机，pc也未必不可能。</p><p>值得期待，值得去追寻。</p><hr><h2 id="《为什么是中国》"><a href="#《为什么是中国》" class="headerlink" title="《为什么是中国》"></a>《为什么是中国》</h2><blockquote><p>共计13.9万字</p><p>政治军事</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gyd38uvqalj30u01da0us.jpg"                      alt="weread_image_553606346718658"                ></p><p>阅读中.</p><hr><h2 id="《投行之路》"><a href="#《投行之路》" class="headerlink" title="《投行之路》"></a>《投行之路》</h2><blockquote><p>共计127.6万字</p><p>金融小说</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gyd39i8vb8j30u01da760.jpg"                      alt="weread_image_553649534594266"                ></p><p>阅读中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A book a week keeps games away~&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;（╮(￣▽￣)╭）农药玩家手动滑稽&lt;/p&gt;
&lt;p&gt;看了油管Up &lt;a class=&quot;link&quot;   href=&quot;https://www.youtube.</summary>
      
    
    
    
    <category term="悦读" scheme="https://www.lzp.zone/categories/%E6%82%A6%E8%AF%BB/"/>
    
    <category term="一周一本" scheme="https://www.lzp.zone/categories/%E6%82%A6%E8%AF%BB/%E4%B8%80%E5%91%A8%E4%B8%80%E6%9C%AC/"/>
    
    
    <category term="阿德勒" scheme="https://www.lzp.zone/tags/%E9%98%BF%E5%BE%B7%E5%8B%92/"/>
    
    <category term="勇气心理学" scheme="https://www.lzp.zone/tags/%E5%8B%87%E6%B0%94%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
    <category term="自我启发" scheme="https://www.lzp.zone/tags/%E8%87%AA%E6%88%91%E5%90%AF%E5%8F%91/"/>
    
    <category term="VR" scheme="https://www.lzp.zone/tags/VR/"/>
    
    <category term="metauniverse" scheme="https://www.lzp.zone/tags/metauniverse/"/>
    
    <category term="AR" scheme="https://www.lzp.zone/tags/AR/"/>
    
    <category term="MR" scheme="https://www.lzp.zone/tags/MR/"/>
    
  </entry>
  
  <entry>
    <title>日志和测试</title>
    <link href="https://www.lzp.zone/2021/11/01/test/"/>
    <id>https://www.lzp.zone/2021/11/01/test/</id>
    <published>2021-11-01T10:51:52.000Z</published>
    <updated>2021-11-04T01:34:58.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="待添加功能"><a href="#待添加功能" class="headerlink" title="待添加功能"></a>待添加功能</h2><h3 id="一，多种逻辑图表的网页显示"><a href="#一，多种逻辑图表的网页显示" class="headerlink" title="一，多种逻辑图表的网页显示"></a>一，多种逻辑图表的网页显示</h3><h3 id="二，思维导图显示"><a href="#二，思维导图显示" class="headerlink" title="二，思维导图显示"></a>二，思维导图显示</h3><h3 id="三，百度，谷歌等SEO"><a href="#三，百度，谷歌等SEO" class="headerlink" title="三，百度，谷歌等SEO"></a>三，百度，谷歌等SEO</h3><h3 id="四，角标，高亮显示"><a href="#四，角标，高亮显示" class="headerlink" title="四，角标，高亮显示"></a>四，角标，高亮显示</h3><h3 id="五，LaTex公式显示"><a href="#五，LaTex公式显示" class="headerlink" title="五，LaTex公式显示"></a>五，LaTex公式显示</h3><h3 id="六，404页面设置"><a href="#六，404页面设置" class="headerlink" title="六，404页面设置"></a>六，404页面设置</h3><h3 id="七，电脑端页内链接新窗口跳转"><a href="#七，电脑端页内链接新窗口跳转" class="headerlink" title="七，电脑端页内链接新窗口跳转"></a>七，电脑端页内链接新窗口跳转</h3><h3 id="八，文字格式颜色自定义"><a href="#八，文字格式颜色自定义" class="headerlink" title="八，文字格式颜色自定义"></a>八，文字格式颜色自定义</h3><h3 id="九，多级分类（支持）"><a href="#九，多级分类（支持）" class="headerlink" title="九，多级分类（支持）"></a><del>九，多级分类</del>（支持）</h3><h2 id="运行bugs"><a href="#运行bugs" class="headerlink" title="运行bugs"></a>运行bugs</h2><h3 id="一，front-matter-中的标签定义不支持-a-b-c-数组语法"><a href="#一，front-matter-中的标签定义不支持-a-b-c-数组语法" class="headerlink" title="一，front-matter 中的标签定义不支持[a,b,c...]数组语法?"></a>一，front-matter 中的标签定义不支持<code>[a,b,c...]</code>数组语法?</h3><ul><li><p>“分类”支持<code>[a,b,c...]</code>,表示有层级关系</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> [<span class="string">大类</span>,<span class="string">中类</span>,<span class="string">小类</span>]</span><br></pre></td></tr></table></figure></li><li><p>标签奇怪之处在于：下面这种写法不能识别（不正确？）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">tags：</span></span><br><span class="line"><span class="bullet">-</span> [<span class="string">标签一</span>,<span class="string">标签二</span>,<span class="string">标签三</span>]</span><br></pre></td></tr></table></figure><p>而以下的写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">tags：[标签一,标签二,标签三]</span></span><br></pre></td></tr></table></figure><p>却能正确识别</p></li></ul><h2 id="测试功能"><a href="#测试功能" class="headerlink" title="测试功能"></a>测试功能</h2><h3 id="测试插入图片："><a href="#测试插入图片：" class="headerlink" title="测试插入图片："></a>测试插入图片：</h3><h4 id="在主题的images文件夹下面建立wz文件夹，引用该相对路径，命令如下："><a href="#在主题的images文件夹下面建立wz文件夹，引用该相对路径，命令如下：" class="headerlink" title="在主题的images文件夹下面建立wz文件夹，引用该相对路径，命令如下："></a>在<code>主题</code>的<code>images</code>文件夹下面建立<code>wz</code>文件夹，引用该相对路径，命令如下：</h4><p><code>！[alt](/images/wz/IMG_0382.jpg)</code></p><p>展示：</p><p>！<a href="/images/wz/IMG_0382.jpg">alt</a></p><p>结果：不能显示</p><h4 id="在博客根目录中的source文件夹中新建images文件夹，引用该相对路径，命令如下"><a href="#在博客根目录中的source文件夹中新建images文件夹，引用该相对路径，命令如下" class="headerlink" title="在博客根目录中的source文件夹中新建images文件夹，引用该相对路径，命令如下"></a>在博客根目录中的<code>source</code>文件夹中新建<code>images</code>文件夹，引用该相对路径，命令如下</h4><p><code>![rig](/images/IMG_0382.jpg)</code></p><p>展示</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/IMG_0382.jpg"                      alt="alt"                ></p><p>结果：显示正常</p><p>测试代码高亮：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkCoding</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://www.runoob.com&quot;</span>);</span><br><span class="line">            URLConnection urlConnection = url.openConnection();</span><br><span class="line">            HttpURLConnection connection = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(urlConnection <span class="keyword">instanceof</span> HttpURLConnection)</span><br><span class="line">            &#123;</span><br><span class="line">                connection = (HttpURLConnection) urlConnection;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入 URL 地址&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            BufferedReader in = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(connection.getInputStream()));</span><br><span class="line">            String urlString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            String current;</span><br><span class="line">            <span class="keyword">while</span>((current = in.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                urlString += current;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(urlString);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*第一次：不进行配置：不能显示高亮</span></span><br><span class="line"><span class="comment">*第二次：代码块加上了语言类型：能够显示部分，不过色彩较少</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">/</span></span><br></pre></td></tr></table></figure><h3 id="测试mermaid功能以实现多种图表的网页端显示"><a href="#测试mermaid功能以实现多种图表的网页端显示" class="headerlink" title="测试mermaid功能以实现多种图表的网页端显示"></a>测试mermaid功能以实现多种图表的网页端显示</h3><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram </span><br><span class="line">客户-&gt;&gt;银行柜台: 我要存钱  </span><br><span class="line">银行柜台-&gt;&gt;后台: 改一下这个账户数字哦  </span><br><span class="line">后台-&gt;&gt;银行柜台: 账户的数字改完了，明天起息  </span><br><span class="line">银行柜台-&gt;&gt;客户: 好了，给你回单 ，下一位</span><br></pre></td></tr></table></figure><p>展示：</p><pre class="mermaid">sequenceDiagram 客户->>银行柜台: 我要存钱  银行柜台->>后台: 改一下这个账户数字哦  后台->>银行柜台: 账户的数字改完了，明天起息  银行柜台->>客户: 好了，给你回单 ，下一位</pre><p>结果：失败</p><h3 id="测试修改文章的front-matter中的title属性"><a href="#测试修改文章的front-matter中的title属性" class="headerlink" title="测试修改文章的front matter中的title属性"></a>测试修改文章的front matter中的title属性</h3><p>结果：可以更改</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;待添加功能&quot;&gt;&lt;a href=&quot;#待添加功能&quot; class=&quot;headerlink&quot; title=&quot;待添加功能&quot;&gt;&lt;/a&gt;待添加功能&lt;/h2&gt;&lt;h3 id=&quot;一，多种逻辑图表的网页显示&quot;&gt;&lt;a href=&quot;#一，多种逻辑图表的网页显示&quot; class=&quot;header</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="bugs" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/bugs/"/>
    
    
    <category term="Markdown" scheme="https://www.lzp.zone/tags/Markdown/"/>
    
    <category term="hexo" scheme="https://www.lzp.zone/tags/hexo/"/>
    
    <category term="Mermaid" scheme="https://www.lzp.zone/tags/Mermaid/"/>
    
  </entry>
  
  <entry>
    <title>梦梦向导带你逛</title>
    <link href="https://www.lzp.zone/2021/11/01/%E6%A2%A6%E6%A2%A6%E5%90%91%E5%AF%BC%E5%B8%A6%E4%BD%A0%E9%80%9B/"/>
    <id>https://www.lzp.zone/2021/11/01/%E6%A2%A6%E6%A2%A6%E5%90%91%E5%AF%BC%E5%B8%A6%E4%BD%A0%E9%80%9B/</id>
    <published>2021-11-01T08:03:29.000Z</published>
    <updated>2021-11-23T15:34:43.085Z</updated>
    
    <content type="html"><![CDATA[<h4 id="小锅锅，小姐姐好-沃是小梦，欢迎来到-Nico的博客空间"><a href="#小锅锅，小姐姐好-沃是小梦，欢迎来到-Nico的博客空间" class="headerlink" title="小锅锅，小姐姐好, 沃是小梦，欢迎来到 Nico的博客空间 ~"></a>小锅锅，小姐姐好, 沃是小梦，欢迎来到 Nico的博客空间 ~</h4><p><strong>先来自沃介绍一下嘛</strong></p><blockquote><p>(甩鞭噘嘴)</p></blockquote><p><strong>沃可是来自十万大山的万毒窟圣女，<del>心狠手辣</del>（bushi）的湘西美女，不要随便惹沃哈！</strong></p><blockquote><p>（傲娇~）</p></blockquote><p><strong>扣恨那毒王八，让堂堂本圣女沦落到<code>打工银</code>滴身份</strong></p><blockquote><p>”呜呜呜~“</p></blockquote><p><strong>那果大蜗牛咱啷个贵！医药费好难攒啊！</strong></p><blockquote><p>哒—哒—哒 —哒…</p><p>”嘘，老板要来啦，要干活咯“ </p></blockquote><p><strong>沃是这个网站滴 <code>管理员</code> ，这个博客主要是记录俺老板滴生活和学习用滴（<del>真无聊</del>），这是  <a href="https://www.lzp.zone/about/">网站地图</a> ，啷~ 你点一下瞅瞅咯～</strong></p><blockquote><p>诶，到点了，下班咯～下班咯</p><p>小锅锅/小姐姐，干饭嘛？你请客（眨巴嘟嘴） </p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwphl1zv9oj31020u00w5.jpg"                      alt="臭美一哈"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;小锅锅，小姐姐好-沃是小梦，欢迎来到-Nico的博客空间&quot;&gt;&lt;a href=&quot;#小锅锅，小姐姐好-沃是小梦，欢迎来到-Nico的博客空间&quot; class=&quot;headerlink&quot; title=&quot;小锅锅，小姐姐好, 沃是小梦，欢迎来到 Nico的博客空间 ~&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://www.lzp.zone/2021/11/01/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>https://www.lzp.zone/2021/11/01/Markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2021-11-01T03:37:12.000Z</published>
    <updated>2021-11-02T16:39:41.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Markdown是一种「轻标记型」纯文本语言，优点有：</p><ul><li><p>纯文本内容，键盘写作简单纯粹</p></li><li><p>专注创作，不纠葛于排版格式</p></li><li><p>多平台支持，多格式导出</p></li><li><p>语法简单，效率很高</p></li></ul><p>熟悉它的命令之后，能让你在写作中不必关心内容的格式，尺寸等问题专心地从事内容创造，再搭配上一款优秀的Markdown编辑器能让你键指如飞，畅快写作~</p><p>本文主要介绍Markdown的常用语法以及typora的常用操作</p><blockquote><p>本网站的Markdown渲染采用的是Gihub 的GFM,语法和渲染规则和标准的Markdown稍有出入。</p><p>typora是一众Markdown编辑器中的飒色美人，界面简洁优雅，功能齐全强大，支持即时渲染技术，所写即所见，还内嵌了<code>mermaid</code>，得益于此，她能帮你画流程图，UML时序图，甘特图，类图……除此之外，还有以下功能：</p><ul><li>支持图床配置和贴心的图片路径设计</li><li>搜索，批量替换内容，大纲整理，不在话下</li><li>搭配Onedrive，阿里云盘等网盘轻松实现多端联动</li></ul><p>爱她，只需片刻。</p></blockquote><h2 id="内容结构"><a href="#内容结构" class="headerlink" title="内容结构"></a>内容结构</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.Markdown的常用语法</span><br><span class="line">2.typora常用操作附录</span><br></pre></td></tr></table></figure><h1 id="Markdown常用语法"><a href="#Markdown常用语法" class="headerlink" title="Markdown常用语法"></a>Markdown常用语法</h1><h2 id="斜体，高亮和粗体"><a href="#斜体，高亮和粗体" class="headerlink" title="斜体，高亮和粗体"></a>斜体，高亮和粗体</h2><p>  代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*斜体*或_斜体_</span><br><span class="line">**粗体**</span><br><span class="line">***加粗斜体***</span><br><span class="line">~~删除线~~</span><br><span class="line">==高亮==</span><br></pre></td></tr></table></figure><p>显示效果：</p><blockquote><p><em>斜体</em>或_斜体_<br><strong>粗体</strong><br><em><strong>加粗斜体</strong></em><br><del>删除线</del><br>==高亮==</p></blockquote><blockquote><p>ps：本小站高亮渲染出幺蛾子了，客官将就下~</p></blockquote><h2 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h2><p>  第一种写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二种写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line"></span><br><span class="line">## 二级标题</span><br><span class="line"></span><br><span class="line">### 三级标题</span><br><span class="line"></span><br><span class="line">#### 四级标题</span><br><span class="line"></span><br><span class="line">##### 五级标题</span><br><span class="line"></span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p>编辑器中观察，很简单，一级标题字号最大，依级递减。</p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>  Markdown 支持两种形式的链接语法： 行内式 和 参考式 两种形式，行内式一般使用较多。</p><h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><p>语法说明：[]里写链接文字，()里写链接地址, ()中的”“中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。[链接文字](链接地址 “链接标题”)’这样的形式。链接地址与链接标题前有一个空格。<br>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">兄弟们！[上任鹅城！](https://www.bilibili.com/video/BV1yt4y1Q7SS?from=search&amp;seid=6918277224816122173&amp;spm_id_from=333.337.0.0)</span><br><span class="line">I am [IronMan](https://www.bilibili.com/video/BV12341117rG?from=search&amp;seid=51519159685723851&amp;spm_id_from=333.337.0.0 &quot;野生钢铁侠&quot;)</span><br></pre></td></tr></table></figure><p>显示效果：</p><p>兄弟们！<a class="link"   href="https://www.bilibili.com/video/BV1yt4y1Q7SS?from=search&seid=6918277224816122173&spm_id_from=333.337.0.0" >上任鹅城！<i class="fas fa-external-link-alt"></i></a><br>I am <a class="link"   href="https://www.bilibili.com/video/BV12341117rG?from=search&seid=51519159685723851&spm_id_from=333.337.0.0"  title="野生钢铁侠">IronMan<i class="fas fa-external-link-alt"></i></a></p><p>参考式</p><p>参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。</p><p>语法说明： </p><ul><li>参考式链接分为两部分，文中的写法<code> [链接文字][链接标记]</code>，</li><li>在文本的任意位置添加<code>[链接标记]:链接地址 “链接标题”</code></li><li>如果链接文字本身可以做为链接标记，你也可以写成 <code>[链接文字][]</code> </li></ul><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我经常去的几个网站[Google][1]、[processon][2]以及[微信读书][3]</span><br><span class="line">[processon][2]是一个不错的[网站][]。</span><br><span class="line"></span><br><span class="line">[1]:http://www.google.com &quot;Google&quot;</span><br><span class="line">[2]:https://www.processon.com/ &quot;processon&quot;</span><br><span class="line">[3]:https://weread.qq.com &quot;微信读书&quot;</span><br><span class="line">[网站]:https://www.processon.com/</span><br></pre></td></tr></table></figure><p>显示效果：</p><blockquote><p>我经常去的几个网站<a class="link"   href="http://www.google.com/"  title="Google">Google<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://www.processon.com/"  title="processon">processon<i class="fas fa-external-link-alt"></i></a>以及<a class="link"   href="https://weread.qq.com/"  title="微信读书">微信读书<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.processon.com/"  title="processon">processon<i class="fas fa-external-link-alt"></i></a>是一个不错的<a class="link"   href="https://www.processon.com/" >网站<i class="fas fa-external-link-alt"></i></a>。</p></blockquote><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>语法说明：<br>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱,只要是用&lt;&gt;包起来, Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;https://www.zxzj.me&gt;</span><br><span class="line">&lt;https://xmsoushu.com/#/&gt;</span><br></pre></td></tr></table></figure><p>显示效果：</p><blockquote><p><a class="link"   href="https://www.zxzj.me/" >https://www.zxzj.me<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://xmsoushu.com/#/" >https://xmsoushu.com/#/<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p>网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。</p><p>注意： </p><ol><li>Markdown Extra 只支持在标题后插入锚点，其它地方无效。 </li><li>Leanote 编辑器右侧显示效果区域暂时不支持锚点跳转，所以点来点去发现没有跳转不必惊慌，但是你发布成笔记或博文后是支持跳转的。</li></ol><p>语法描述: 在你准备跳转到的指定标题后插入锚点标记<code>&#123;#标记&#125;</code>，然后在文档的其它地方写上连接到锚点的链接。</p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">跳转到[目录]&#123;#index&#125;</span><br><span class="line"></span><br><span class="line">跳转到[目录](#index)</span><br></pre></td></tr></table></figure><blockquote><p><code>&#123;#</code>属于hexo保留的关键字，生成时有bug，这里不做展示</p></blockquote><p>显示效果：</p><p>跳转到<a href="#index">目录</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>  使用 *，+，- 表示无序列表。</p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 无序列表项 一</span><br><span class="line">- 无序列表项 二</span><br><span class="line">- 无序列表项 三</span><br></pre></td></tr></table></figure><p>显示效果：</p><blockquote><p>无序列表项 一<br>无序列表项 二<br>无序列表项 三</p></blockquote><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表则使用数字接着一个英文句点。</p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 有序列表项 一</span><br><span class="line">2. 有序列表项 二</span><br><span class="line">3. 有序列表项 三</span><br></pre></td></tr></table></figure><p>显示效果：</p><blockquote><ol><li>有序列表项 一</li><li>有序列表项 二</li><li>有序列表项 三</li></ol></blockquote><h3 id="定义型列表"><a href="#定义型列表" class="headerlink" title="定义型列表"></a>定义型列表</h3><p>语法说明：定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进(Tab)</p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Markdown</span><br><span class="line">:    轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）</span><br><span class="line">代码块 2</span><br><span class="line">:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</span><br><span class="line">        代码块（左侧有八个不可见的空格）</span><br></pre></td></tr></table></figure><h3 id="列表缩进"><a href="#列表缩进" class="headerlink" title="列表缩进"></a>列表缩进</h3><p>语法说明：</p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好（显示效果与代码一致）：</p><blockquote><p>轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。<br>那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。<br>软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！</p><p>那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。<br>寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。<br>但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！<br>悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</p></blockquote><p>但是如果你懒，那也行：<br>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*   轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。</span><br><span class="line">    那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 </span><br><span class="line">    软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ </span><br><span class="line">*   那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 </span><br><span class="line">    寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 </span><br><span class="line">    但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ </span><br><span class="line">    悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</span><br></pre></td></tr></table></figure><p>显示效果：</p><blockquote><ul><li>轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。<br>  那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。<br>  软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ </li><li>那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。<br>  寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。<br>  但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！<br>  悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</li></ul></blockquote><h3 id="包含段落的列表"><a href="#包含段落的列表" class="headerlink" title="包含段落的列表"></a>包含段落的列表</h3><p>语法说明：</p><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符（显示效果与代码一致）：</p><blockquote><p>轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。<br>那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。<br>软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！</p><p>那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。<br>寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。<br>但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！</p><p>悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</p></blockquote><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*   轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。</span><br><span class="line">    那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 </span><br><span class="line">    软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！</span><br><span class="line">     那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 </span><br><span class="line">    寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 </span><br><span class="line">    但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ </span><br><span class="line">*   悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</span><br></pre></td></tr></table></figure><p>显示效果：</p><blockquote><ul><li>轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。<br>  那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。<br>  软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！<br>   那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。<br>  寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。<br>  但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ </li><li>  悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</li></ul></blockquote><h3 id="包含引用的列表"><a href="#包含引用的列表" class="headerlink" title="包含引用的列表"></a>包含引用的列表</h3><p>语法说明：</p><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*   阅读的方法:</span><br><span class="line">    &gt; 打开书本。</span><br><span class="line">    &gt; 打开电灯。</span><br></pre></td></tr></table></figure><p>显示效果：</p><blockquote><ul><li>阅读的方法:</li></ul><blockquote><p>打开书本。<br>打开电灯。</p></blockquote></blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>语法说明：引用需要在被引用的文本前加上&gt;符号。</p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是一个有两段文字的引用,</span><br><span class="line">&gt;无意义的占行文字</span><br><span class="line">&gt;无意义的占行文字</span><br><span class="line">&gt;</span><br><span class="line">&gt;无意义的占行文字</span><br><span class="line">&gt;无意义的占行文字</span><br></pre></td></tr></table></figure><p>显示效果：</p><blockquote><p>这是一个有两段文字的引用,<br>无意义的占行文字<br>无意义的占行文字</p><p>无意义的占行文字<br>无意义的占行文字</p></blockquote><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：</p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是一个有两段文字的引用,</span><br><span class="line">无意义的占行文字</span><br><span class="line">无意义的占行文字</span><br><span class="line">无意义的占行文字</span><br><span class="line">无意义的占行文字</span><br></pre></td></tr></table></figure><p>显示效果：</p><blockquote><p>这是一个有两段文字的引用,<br>无意义的占行文字<br>无意义的占行文字<br>无意义的占行文字<br>无意义的占行文字</p></blockquote><h3 id="引用的多层嵌套"><a href="#引用的多层嵌套" class="headerlink" title="引用的多层嵌套"></a>引用的多层嵌套</h3><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 请问 Markdwon 怎么用？ - 小白</span><br><span class="line"> </span><br><span class="line">&gt;&gt; 自己看教程！ - 愤青</span><br><span class="line"></span><br><span class="line">&gt; 教程在哪？ - 小白</span><br></pre></td></tr></table></figure><p>显示效果：</p><blockquote><blockquote><blockquote><p>请问 Markdwon 怎么用？ - 小白</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>自己看教程！ - 愤青</p></blockquote></blockquote><blockquote><p>教程在哪？ - 小白</p></blockquote><h3 id="引用其它要素"><a href="#引用其它要素" class="headerlink" title="引用其它要素"></a>引用其它要素</h3><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码行/区块等：</p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1.   这是第一行列表项。</span><br><span class="line">&gt; 2.   这是第二行列表项。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 给出一些例子代码：</span><br><span class="line">&gt;</span><br><span class="line">&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</span><br></pre></td></tr></table></figure><p>显示效果：</p><blockquote><ol><li>  这是第一行列表项。</li><li>  这是第二行列表项。</li></ol><p>给出一些例子代码：</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><h3 id="包含代码区块的引用"><a href="#包含代码区块的引用" class="headerlink" title="包含代码区块的引用"></a>包含代码区块的引用</h3><p>语法说明：<br>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</p><p>一列表项包含一个列表区块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;代码写在这&gt;</span><br></pre></td></tr></table></figure><h3 id="一个特殊情况"><a href="#一个特殊情况" class="headerlink" title="一个特殊情况"></a>一个特殊情况</h3><p>在特殊情况下，项目列表很可能会不小心产生，像是下面这样的写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986. What a great season.</span><br></pre></td></tr></table></figure><p>会显示成：</p><blockquote><p>What a great season.</p></blockquote><p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986\. What a great season.</span><br></pre></td></tr></table></figure><p>会显示成：</p><blockquote><p>1986. What a great season.</p></blockquote><h2 id="插入图像"><a href="#插入图像" class="headerlink" title="插入图像"></a>插入图像</h2><p>图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。</p><p>语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。</p><h3 id="行内式-1"><a href="#行内式-1" class="headerlink" title="行内式"></a>行内式</h3><p>语法说明：<code>![图片Alt](图片地址 “图片Title”)</code></p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">洗澡好酥服啊： </span><br><span class="line">![洗澡好酥服啊](https://tva1.sinaimg.cn/large/008i3skNgy1gw0lb9b9ptj30v70u0gnf.jpg &quot;洗澡好酥服啊&quot;)</span><br></pre></td></tr></table></figure><p>显示效果：</p><p>洗澡好酥服啊：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw0lc0ejnhj30v70u0q4r.jpg"                      alt="洗澡好酥服啊" title="洗澡好酥服啊"                ></p><h3 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h3><p>语法说明：</p><p>在文档要插入图片的地方写![图片Alt][标记]</p><p>在文档的最后写上[标记]:图片地址 “Title”</p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![强颜微笑.jpg][蚩梦]</span><br><span class="line">[蚩梦]:https://tva1.sinaimg.cn/large/008i3skNgy1gw0lbaftvxj30wu0u0jtp.jpg  &quot;强颜微笑.jpg&quot;</span><br></pre></td></tr></table></figure><p>显示效果：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw0lbaftvxj30wu0u0jtp.jpg"                      alt="强颜微笑.jpg" title="强颜微笑.jpg"                ></p><blockquote><p><em>站长同学太菜啦，网站还展示不了以下的「注脚」，「LaTex公式」「各类图」原生效果，有待添加</em></p></blockquote><h2 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h2><p>  在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p><h2 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h2><p>  语法说明：</p><p>在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。</p><p>注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。</p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote[^Le] 编辑器进行书写。</span><br><span class="line">[^1]:Markdown是一种纯文本标记语言</span><br><span class="line">[^2]:HyperText Markup Language 超文本标记语言</span><br><span class="line">[^Le]:开源笔记平台，支持Markdown和笔记直接发为博文</span><br></pre></td></tr></table></figure><p>效果</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw0zki1povj30r204v3yu.jpg"                      alt="alt"                ></p><h2 id="LaTeX-公式"><a href="#LaTeX-公式" class="headerlink" title="LaTeX 公式"></a>LaTeX 公式</h2><h3 id="表示行内公式："><a href="#表示行内公式：" class="headerlink" title="$ 表示行内公式："></a>$ 表示行内公式：</h3><p>代码：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">质能守恒方程可以用一个很简洁的方程式 <span class="variable">$E</span><span class="operator">=</span><span class="variable">mc</span><span class="operator">^</span><span class="number">2</span><span class="variable">$</span> 来表达。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>显示效果：</p><p>$$表示整行公式：</p><p>代码：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$$</span>\<span class="type">sum_</span><span class="punctuation">&#123;</span><span class="variable">i</span><span class="operator">=</span><span class="number">1</span><span class="punctuation">&#125;</span><span class="operator">^</span><span class="variable">n</span> <span class="type">a_i</span><span class="operator">=</span><span class="number">0</span><span class="variable">$$</span></span><br><span class="line"><span class="variable">$$f</span><span class="punctuation">(</span><span class="type">x_</span><span class="number">1</span><span class="operator">,</span><span class="type">x_x</span><span class="operator">,</span>\<span class="variable">ldots</span><span class="operator">,</span><span class="type">x_n</span><span class="punctuation">)</span> <span class="operator">=</span> <span class="type">x_</span><span class="number">1</span><span class="operator">^</span><span class="number">2</span> <span class="operator">+</span> <span class="type">x_</span><span class="number">2</span><span class="operator">^</span><span class="number">2</span> <span class="operator">+</span> \<span class="variable">cdots</span> <span class="operator">+</span> <span class="type">x_n</span><span class="operator">^</span><span class="number">2</span> <span class="variable">$$</span></span><br><span class="line"><span class="variable">$$</span>\<span class="variable">sum</span><span class="operator">^</span><span class="punctuation">&#123;</span><span class="variable">j</span><span class="operator">-</span><span class="number">1</span><span class="punctuation">&#125;</span><span class="type">_</span><span class="punctuation">&#123;</span><span class="variable">k</span><span class="operator">=</span><span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">&#123;</span>\<span class="variable">widehat</span><span class="punctuation">&#123;</span>\<span class="variable">gamma</span><span class="punctuation">&#125;</span><span class="type">_</span><span class="punctuation">&#123;</span><span class="variable">kj</span><span class="punctuation">&#125;</span> <span class="type">z_k</span><span class="punctuation">&#125;</span><span class="variable">$$</span></span><br></pre></td></tr></table></figure><p>显示效果：</p><h2 id="各类图表代码"><a href="#各类图表代码" class="headerlink" title="各类图表代码"></a>各类图表代码</h2><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>竖向（TD 表示从上到下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    D--&gt;E;</span><br><span class="line">    D--&gt;F;</span><br></pre></td></tr></table></figure><p>横向（LR 表示从左到右）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">A[方形]--&gt;B(圆角)</span><br><span class="line">B--&gt;C&#123;条件a&#125;</span><br><span class="line">C--&gt;|a=1|D[结果1]</span><br><span class="line">C--&gt;|a=2|E[结果2]</span><br></pre></td></tr></table></figure><p>实际场景：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram </span><br><span class="line">客户-&gt;&gt;银行柜台: 我要存钱  </span><br><span class="line">银行柜台-&gt;&gt;后台: 改一下这个账户数字哦  </span><br><span class="line">后台-&gt;&gt;银行柜台: 账户的数字改完了，明天起息  </span><br><span class="line">银行柜台-&gt;&gt;客户: 好了，给你回单 ，下一位</span><br></pre></td></tr></table></figure><h3 id="UML时序图"><a href="#UML时序图" class="headerlink" title="UML时序图"></a>UML时序图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">对象A-&gt;&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure><p>还有甘特图（如下），饼图，类图，状态图等等，不一而足。</p><p>typora内置<a class="link"   href="https://mermaid-js.github.io/" >mermaid<i class="fas fa-external-link-alt"></i></a> 库，能漂亮画出👆🏻这一坨图</p><p>巨图镇场：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw10r6tshgj30px0widjb.jpg"                      alt="甘特图"                ></p><p>学习用typora画各类图表，点击这个<a class="link"   href="https://www.bilibili.com/video/av969722799/" >教程视频<i class="fas fa-external-link-alt"></i></a>      </p><p>更多语法参考：<a class="link"   href="http://adrai.github.io/flowchart.js/" >流程图语法参考<i class="fas fa-external-link-alt"></i></a></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>语法说明：</p><p>不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。<br>列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。<br>第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。<br>代码：</p><p>简单方式写表格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">学号|姓名|分数</span><br><span class="line">-|-|-</span><br><span class="line">小明|男|75</span><br><span class="line">小红|女|79</span><br><span class="line">小陆|男|92</span><br></pre></td></tr></table></figure><p>原生方式写表格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|学号|姓名|分数|</span><br><span class="line">|-|-|-|</span><br><span class="line">|小明|男|75|</span><br><span class="line">|小红|女|79|</span><br><span class="line">|小陆|男|92|</span><br></pre></td></tr></table></figure><p>为表格第二列指定方向：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">产品|价格</span><br><span class="line">-|-:</span><br><span class="line">Leanote 高级账号|60元/年</span><br><span class="line">Leanote 超级账号|120元/年</span><br></pre></td></tr></table></figure><p>显示效果：</p><p>简单方式写表格：</p><table><thead><tr><th>学号</th><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>小明</td><td>男</td><td>75</td></tr><tr><td>小红</td><td>女</td><td>79</td></tr><tr><td>小陆</td><td>男</td><td>92</td></tr></tbody></table><p>原生方式写表格：</p><table><thead><tr><th>学号</th><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>小明</td><td>男</td><td>75</td></tr><tr><td>小红</td><td>女</td><td>79</td></tr><tr><td>小陆</td><td>男</td><td>92</td></tr></tbody></table><p>为表格第二列指定方向：</p><table><thead><tr><th>产品</th><th align="right">价格</th></tr></thead><tbody><tr><td>Leanote 高级账号</td><td align="right">60元/年</td></tr><tr><td>Leanote 超级账号</td><td align="right">120元/年</td></tr></tbody></table><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><pre><code>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</code></pre><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line">***</span><br><span class="line">*****</span><br><span class="line">- - -</span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure><p>显示效果都一样：</p><hr><hr><hr><hr><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(Tab), 另一种是利用”`”符号（一般在ESC键下方）包裹代码。</code></pre><p>语法说明：</p><p>插入行内代码，即插入一个单词或者一句代码的情况，使用下面这样的形式插入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`code`</span><br></pre></td></tr></table></figure><p>插入多行代码，可以使用缩进或者三个单撇号,具体看示例。<br>注意： 缩进式插入前方必须有空行</p><h3 id="行内式-2"><a href="#行内式-2" class="headerlink" title="行内式"></a>行内式</h3><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C语言里的函数 `scanf()` 怎么使用？</span><br></pre></td></tr></table></figure><p>显示效果：</p><blockquote><p>C语言里的函数 <code>scanf()</code> 怎么使用？</p></blockquote><h3 id="缩进式多行代码"><a href="#缩进式多行代码" class="headerlink" title="缩进式多行代码"></a>缩进式多行代码</h3><p>缩进 4 个空格或是 1 个制表符</p><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><p>代码：</p><pre><code>    #include &lt;stdio.h&gt;    int main(void)    &#123;        printf(&quot;Hello world\n&quot;);    &#125;</code></pre><p>显示效果：</p><blockquote><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;Hello world\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></blockquote><h3 id="用六个-包裹多行代码"><a href="#用六个-包裹多行代码" class="headerlink" title="用六个`包裹多行代码"></a>用六个`包裹多行代码</h3><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>显示效果：</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="HTML-原始码"><a href="#HTML-原始码" class="headerlink" title="HTML 原始码"></a>HTML 原始码</h3><p>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理，例如：</p><p>代码和效果：</p><p>第一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">   © 2004 Foo Corporation</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><div class="footer">   © 2004 Foo Corporation</div></blockquote><p>第二个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;星期一&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;星期二&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;星期三&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;李强&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;张明&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;王平&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>效果：</p><table>    <tr>        <th rowspan="2">值班人员</th>        <th>星期一</th>        <th>星期二</th>        <th>星期三</th>    </tr>    <tr>        <td>李强</td>        <td>张明</td>        <td>王平</td>    </tr></table><h1 id="typora常用操作"><a href="#typora常用操作" class="headerlink" title="typora常用操作"></a>typora常用操作</h1><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><table><thead><tr><th>操作</th><th>键值</th></tr></thead><tbody><tr><td>新建</td><td><code>Ctrl+N</code></td></tr><tr><td>新建窗口</td><td><code>Ctrl+Shift+N</code></td></tr><tr><td>打开</td><td><code>Ctrl+O</code></td></tr><tr><td>快速打开</td><td><code>Ctrl+P</code></td></tr><tr><td>重新打开关闭的文件</td><td><code>Ctrl+Shift+T</code></td></tr><tr><td>保存</td><td><code>Ctrl+S</code></td></tr><tr><td>另存为/复制</td><td><code>Ctrl+Shift+S</code></td></tr><tr><td>关闭</td><td><code>Ctrl+W</code></td></tr></tbody></table><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><blockquote><p>==新段落输入输入==<br>换行<code>Shift+Enter</code><br>剪切<code>Ctrl+X</code><br>复制<code>Ctrl+C</code><br>粘贴<code>Ctrl+V</code><br>复制为标记<code>Ctrl+Shift+C</code><br>粘贴为纯文本<code>Ctrl+Shift+V</code><br>全选<code>Ctrl+A</code><br><strong>==选择行/句子==</strong><br>选择行（在表中）<code>Ctrl+L</code><br>删除行（表中）<code>Ctrl+Shift+Backspace</code><br>==<strong>选择样式范围</strong>==<br>选择单元格（在表中）<code>Ctrl+E</code><br>选择单词 <code>Ctrl+D</code><br>删除单词 <code>Ctrl+Shift+D</code><br>跳转到顶部<code> Ctrl+Home</code><br>跳转到所选内容<code>Ctrl+J</code><br>跳到按钮 <code>Ctrl+End </code><br>查找 <code>Ctrl+F</code><br>查找下一个 <code>F3/输入</code><br>查找上一个 <code>Shift+F3/Shift+Enter </code><br>替换 <code>Ctrl+H</code></p></blockquote><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><blockquote><p>标题1到6 <code>Ctrl+1/2/3/4/5/6</code><br>段落 <code>Ctrl+0</code><br>增加标题级别 <code>Ctrl+=</code><br>降低标题级别 <code>Ctrl+-</code><br>表格 <code>Ctrl+T</code><br>代码块 <code>Ctrl+Shift+K</code><br>数学块 <code>Ctrl+Shift+M</code><br>引用 <code>Ctrl+Shift+Q 【可自定义样式】</code><br>有序列表 <code>Ctrl+Shift+[</code><br>无序列表 <code>Ctrl+Shift+]</code><br>缩进 <code>Ctrl+[/Tab</code><br>升级<code> Ctrl+]/Shift+Tab</code><br>加粗 <code>Ctrl+B</code><br>斜体 <code>Ctrl+I</code><br>下划线<code> Ctrl+U</code><br>代码 <code>Ctrl+Shift+</code><br>删除线 <code>Alt+Shift+5</code><br>超链接 <code>Ctrl+K</code><br>图像 <code>Ctrl+Shift+I</code><br>清除格式 <code>Ctrl+\</code></p></blockquote><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><blockquote><p>切换侧栏 <code>Ctrl+Shift+L</code><br>大纲 <code>Ctrl+Shift+1</code><br>文章 <code>Ctrl+Shift+2</code><br>文件树 <code>Ctrl+Shift+3</code><br>源代码模式 <code>Ctrl+/</code><br>对焦模式 <code>F8</code><br>打字机模式 <code>F9</code><br>切换器全屏 <code>F11</code><br>实际大小<code> Ctrl+Shift+0</code><br>放大 <code>Ctrl+Shift+=</code><br>缩小 <code>Ctrl+Shift+-</code><br>在打开的文档之间切换 <code>Ctrl+Tab</code><br>切换开发工具<code> Ctrl+Shift+I</code></p></blockquote><h3 id="Win和Mac系统键位对照"><a href="#Win和Mac系统键位对照" class="headerlink" title="Win和Mac系统键位对照"></a>Win和Mac系统键位对照</h3><blockquote></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gvziqwjsuzj30pf0bywg8.jpg"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gvziqw3gjdj30x50k2n19.jpg"                      alt="img"                ></p><p>未尽之处，有待更新…</p><p>本文参考：</p><p><a class="link"   href="https://blog.csdn.net/witnessai1/article/details/52551362" >文章一<i class="fas fa-external-link-alt"></i></a>      </p><p><a class="link"   href="https://blog.csdn.net/u014061630/article/details/81359144?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163582003616780357228523%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163582003616780357228523&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81359144.pc_search_result_hbase_insert&utm_term=markdown&spm=1018.2226.3001.4187" >文章二<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://blog.csdn.net/qq_41261251/article/details/110670144?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163585115616780264020414%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163585115616780264020414&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-110670144.pc_search_result_hbase_insert&utm_term=typora%E7%94%BB%E5%9B%BE&spm=1018.2226.3001.4187" >文章三<i class="fas fa-external-link-alt"></i></a></p><p>友情链接：</p><p>下载学习typora(Win&amp;Mac)，请自行前往：typora官网](<a class="link"   href="https://typora.io/" >https://typora.io/<i class="fas fa-external-link-alt"></i></a>)</p><p>想了解更多关于GFM的知识，请参考：<a class="link"   href="https://docs.github.com/cn/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax" >GitHub Flavored Markdown Docs<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Markdown是一种「轻标记型」纯文本语言，优点有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;纯文本内容，键盘写作简单纯粹&lt;/p&gt;
&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="笔记" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Markdown" scheme="https://www.lzp.zone/tags/Markdown/"/>
    
    <category term="typora" scheme="https://www.lzp.zone/tags/typora/"/>
    
    <category term="Note-taking" scheme="https://www.lzp.zone/tags/Note-taking/"/>
    
  </entry>
  
  <entry>
    <title>MySQL语法第一弹</title>
    <link href="https://www.lzp.zone/2021/11/01/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%B8%80%E5%BC%B9/"/>
    <id>https://www.lzp.zone/2021/11/01/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%B8%80%E5%BC%B9/</id>
    <published>2021-11-01T03:36:32.000Z</published>
    <updated>2022-03-19T00:26:48.281Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>根据老杜MySQL教学视频整理</p></blockquote><p>1、sql、DB、DBMS分别是什么，他们之间的关系？<br>  DB:<br>      DataBase（数据库，数据库实际上在硬盘上以文件的形式存在）</p><p>  DBMS:<br>    DataBase Management System（数据库管理系统，常见的有：MySQL Oracle DB2 Sybase SqlServer…）</p><p>  SQL:<br>    结构化查询语言，是一门标准通用的语言。标准的sql适合于所有的数据库产品。<br>    SQL属于高级语言。只要能看懂英语单词的，写出来的sql语句，可以读懂什么意思。<br>    SQL语句在执行的时候，实际上内部也会先进行编译，然后再执行sql。（sql语句的编译由DBMS完成。）</p><p>  DBMS负责执行sql语句，通过执行sql语句来操作DB当中的数据。<br>  DBMS -(执行)-&gt; SQL -(操作)-&gt; DB</p><p>2、什么是表？</p><p>表：table</p><p>表：table是数据库的基本组成单元，所有的数据都以表格的形式组织，目的是可读性强。</p><p>一个表包括行和列：<br> 行：被称为数据/记录(data)<br> 列：被称为字段(column)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">学号(int)姓名(varchar)年龄(int)</span><br><span class="line">110张三20</span><br><span class="line">120李四21</span><br></pre></td></tr></table></figure><p>每一个字段应该包括哪些属性？<br>字段名、数据类型、相关的约束。</p><p>3、学习MySQL主要还是学习通用的SQL语句，那么SQL语句包括增删改查，SQL语句怎么分类呢？<br> DQL（数据查询语言）: 查询语句，凡是select语句都是DQL。<br> DML（数据操作语言）：insert delete update，对表当中的数据进行增删改。<br> DDL（数据定义语言）：create drop alter，对表结构的增删改。<br> TCL（事务控制语言）：commit提交事务，rollback回滚事务。(TCL中的T是Transaction)<br> DCL（数据控制语言）: grant授权、revoke撤销权限等。</p><p>4、导入数据（后期大家练习的时候使用这个演示的数据）<br>    第一步：登录mysql数据库管理系统<br>        dos命令窗口：<br>            <code>mysql -uroot -p333</code><br>    第二步：查看有哪些数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">show databases; (这个不是SQL语句，属于MySQL的命令。)</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p>​    第三步：创建属于我们自己的数据库<br>​        <code>create database bjpowernode;</code> (这个不是SQL语句，属于MySQL的命令。)<br>​    第四步：使用bjpowernode数据<br>​        <code>use bjpowernode;</code> (这个不是SQL语句，属于MySQL的命令。)<br>​    第五步：查看当前使用的数据库中有哪些表？<br>​        <code>show tables;</code> (这个不是SQL语句，属于MySQL的命令。)<br>​    第六步：初始化数据<br>​        <code>mysql&gt; source D:\course\05-MySQL\resources\bjpowernode.sql</code><br>​    </p><p>  注意：数据初始化完成之后，有三张表：<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------+</span><br><span class="line">| Tables_in_bjpowernode |</span><br><span class="line">+-----------------------+</span><br><span class="line">| dept                  |</span><br><span class="line">| emp                   |</span><br><span class="line">| salgrade              |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure></p><p>5、bjpowernode.sql，这个文件以sql结尾，这样的文件被称为“sql脚本”。什么是sql脚本呢？<br>    当一个文件的扩展名是.sql，并且该文件中编写了大量的sql语句，我们称这样的文件为sql脚本。<br>    注意：直接使用source命令可以执行sql脚本。<br>    sql脚本中的数据量太大的时候，无法打开，请使用source命令完成初始化。</p><p>6、删除数据库：<code>drop database bjpowernode;</code></p><p>7、查看表结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------+</span><br><span class="line">​| Tables_in_bjpowernode |</span><br><span class="line">​+-----------------------+</span><br><span class="line">​| dept                  |   (部门表)</span><br><span class="line">​| emp                   |   (员工表)</span><br><span class="line">​| salgrade              |   (工资等级表)</span><br><span class="line">​+-----------------------+</span><br></pre></td></tr></table></figure><pre><code>mysql&gt; desc dept;+--------+-------------+------+-----+---------+-------+| Field  | Type        | Null | Key | Default | Extra |+--------+-------------+------+-----+---------+-------+| DEPTNO | int(2)      | NO   | PRI | NULL    |       |        部门编号| DNAME  | varchar(14) | YES  |     | NULL    |       |        部门名称| LOC    | varchar(13) | YES  |     | NULL    |       |        部门位置+--------+-------------+------+-----+---------+-------+mysql&gt; desc emp;+----------+-------------+------+-----+---------+-------+| Field    | Type        | Null | Key | Default | Extra |+----------+-------------+------+-----+---------+-------+| EMPNO    | int(4)      | NO   | PRI | NULL    |       |    员工编号| ENAME    | varchar(10) | YES  |     | NULL    |       |    员工姓名| JOB      | varchar(9)  | YES  |     | NULL    |       |    工作岗位| MGR      | int(4)      | YES  |     | NULL    |       |    上级领导编号| HIREDATE | date        | YES  |     | NULL    |       |    入职日期| SAL      | double(7,2) | YES  |     | NULL    |       |    月薪| COMM     | double(7,2) | YES  |     | NULL    |       |    补助/津贴| DEPTNO   | int(2)      | YES  |     | NULL    |       |    部门编号+----------+-------------+------+-----+---------+-------+`mysql&gt; desc salgrade;`+-------+---------+------+-----+---------+-------+| Field | Type    | Null | Key | Default | Extra |+-------+---------+------+-----+---------+-------+| GRADE | int(11) | YES  |     | NULL    |       |        等级| LOSAL | int(11) | YES  |     | NULL    |       |        最低薪资| HISAL | int(11) | YES  |     | NULL    |       |        最高薪资+-------+---------+------+-----+---------+-------+</code></pre><p>8、表中的数据？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from emp;</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |</span><br><span class="line">|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |</span><br><span class="line">|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |</span><br><span class="line">|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |</span><br><span class="line">|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |</span><br><span class="line">|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |</span><br><span class="line">|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |</span><br><span class="line">|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |</span><br><span class="line">|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |</span><br><span class="line">|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |</span><br><span class="line">|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |</span><br><span class="line">|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |</span><br><span class="line">|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |</span><br><span class="line">|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from dept;</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from salgrade;</span><br><span class="line">+-------+-------+-------+</span><br><span class="line">| GRADE | LOSAL | HISAL |</span><br><span class="line">+-------+-------+-------+</span><br><span class="line">|     1 |   700 |  1200 |</span><br><span class="line">|     2 |  1201 |  1400 |</span><br><span class="line">|     3 |  1401 |  2000 |</span><br><span class="line">|     4 |  2001 |  3000 |</span><br><span class="line">|     5 |  3001 |  9999 |</span><br><span class="line">+-------+-------+-------+</span><br><span class="line"></span><br><span class="line">9、常用命令？</span><br><span class="line">mysql&gt; select database(); 查看当前使用的是哪个数据库</span><br><span class="line">+-------------+</span><br><span class="line">| database()  |</span><br><span class="line">+-------------+</span><br><span class="line">| bjpowernode |</span><br><span class="line">+-------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select version(); 查看mysql的版本号。</span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 5.5.36    |</span><br><span class="line">+-----------+</span><br><span class="line"></span><br><span class="line">\c   命令，结束一条语句。</span><br><span class="line"></span><br><span class="line">exit 命令，退出mysql。</span><br></pre></td></tr></table></figure><p>10、查看创建表的语句：<br>    <code>show create table emp;</code></p><p>11、简单的查询语句（DQL）</p><p>语法格式：<br>    <code>select 字段名1,字段名2,字段名3,.... from 表名;</code></p><p>提示：<br>    1、任何一条sql语句以“;”结尾。<br>    2、sql语句不区分大小写。</p><p>查询员工的年薪？（字段可以参与数学运算。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">select ename,sal * 12 from emp;</span><br><span class="line">+--------+----------+</span><br><span class="line">| ename  | sal * 12 |</span><br><span class="line">+--------+----------+</span><br><span class="line">| SMITH  |  9600.00 |</span><br><span class="line">| ALLEN  | 19200.00 |</span><br><span class="line">| WARD   | 15000.00 |</span><br><span class="line">| JONES  | 35700.00 |</span><br><span class="line">| MARTIN | 15000.00 |</span><br><span class="line">| BLAKE  | 34200.00 |</span><br><span class="line">| CLARK  | 29400.00 |</span><br><span class="line">| SCOTT  | 36000.00 |</span><br><span class="line">| KING   | 60000.00 |</span><br><span class="line">| TURNER | 18000.00 |</span><br><span class="line">| ADAMS  | 13200.00 |</span><br><span class="line">| JAMES  | 11400.00 |</span><br><span class="line">| FORD   | 36000.00 |</span><br><span class="line">| MILLER | 15600.00 |</span><br><span class="line">+--------+----------+</span><br></pre></td></tr></table></figure><p>给查询结果的列重命名？<br>    <code>select ename,sal * 12 as yearsal from emp;</code></p><p>别名中有中文？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">select ename,sal * 12 as 年薪 from emp; // 错误</span><br><span class="line">select ename,sal * 12 as &#x27;年薪&#x27; from emp;</span><br><span class="line">+--------+----------+</span><br><span class="line">| ename  | 年薪        |</span><br><span class="line">+--------+----------+</span><br><span class="line">| SMITH  |  9600.00 |</span><br><span class="line">| ALLEN  | 19200.00 |</span><br><span class="line">| WARD   | 15000.00 |</span><br><span class="line">| JONES  | 35700.00 |</span><br><span class="line">| MARTIN | 15000.00 |</span><br><span class="line">| BLAKE  | 34200.00 |</span><br><span class="line">| CLARK  | 29400.00 |</span><br><span class="line">| SCOTT  | 36000.00 |</span><br><span class="line">| KING   | 60000.00 |</span><br><span class="line">| TURNER | 18000.00 |</span><br><span class="line">| ADAMS  | 13200.00 |</span><br><span class="line">| JAMES  | 11400.00 |</span><br><span class="line">| FORD   | 36000.00 |</span><br><span class="line">| MILLER | 15600.00 |</span><br><span class="line">+--------+----------+</span><br></pre></td></tr></table></figure><blockquote><p>注意：标准sql语句中要求字符串使用单引号括起来。虽然mysql支持双引号，尽量别用。</p></blockquote><p>as关键字可以省略？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select empno,ename,sal * 12 yearsal from emp;</span><br><span class="line">+-------+--------+----------+</span><br><span class="line">| empno | ename  | yearsal  |</span><br><span class="line">+-------+--------+----------+</span><br><span class="line">|  7369 | SMITH  |  9600.00 |</span><br><span class="line">|  7499 | ALLEN  | 19200.00 |</span><br><span class="line">|  7521 | WARD   | 15000.00 |</span><br><span class="line">|  7566 | JONES  | 35700.00 |</span><br><span class="line">|  7654 | MARTIN | 15000.00 |</span><br><span class="line">|  7698 | BLAKE  | 34200.00 |</span><br><span class="line">|  7782 | CLARK  | 29400.00 |</span><br><span class="line">|  7788 | SCOTT  | 36000.00 |</span><br><span class="line">|  7839 | KING   | 60000.00 |</span><br><span class="line">|  7844 | TURNER | 18000.00 |</span><br><span class="line">|  7876 | ADAMS  | 13200.00 |</span><br><span class="line">|  7900 | JAMES  | 11400.00 |</span><br><span class="line">|  7902 | FORD   | 36000.00 |</span><br><span class="line">|  7934 | MILLER | 15600.00 |</span><br><span class="line">+-------+--------+----------+</span><br></pre></td></tr></table></figure><p>查询所有字段？<br>    <code>select * from emp; // 实际开发中不建议使用*，效率较低。</code></p><p>12、条件查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">select </span><br><span class="line">字段,字段...</span><br><span class="line">from</span><br><span class="line">表名</span><br><span class="line">where</span><br><span class="line">条件;</span><br></pre></td></tr></table></figure><p>执行顺序：先from，然后where，最后select</p><p>查询工资等于5000的员工姓名？<br>    <code>select ename from emp where sal = 5000;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-------+</span><br><span class="line">| ename |</span><br><span class="line">+-------+</span><br><span class="line">| KING  |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure><p>查询SMITH的工资？<br>    <code>select sal from emp where ename = &#39;SMITH&#39;; // 字符串使用单引号括起来。</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+--------+</span><br><span class="line">| sal    |</span><br><span class="line">+--------+</span><br><span class="line">| 800.00 |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure><p>找出工资高于3000的员工？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;=</span> <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&lt;</span> <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&lt;=</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure><p>找出工资不等于3000的？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&lt;&gt;</span> <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">!=</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure><p>找出工资在1100和3000之间的员工，包括1100和3000？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;=</span> <span class="number">1100</span> <span class="keyword">and</span> sal <span class="operator">&lt;=</span> <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">between</span> <span class="number">1100</span> <span class="keyword">and</span> <span class="number">3000</span>; <span class="operator">/</span><span class="operator">/</span> between...and...是闭区间 [<span class="number">1100</span> <span class="operator">~</span> <span class="number">3000</span>]</span><br><span class="line"></span><br><span class="line">​<span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">between</span> <span class="number">3000</span> <span class="keyword">and</span> <span class="number">1100</span>; <span class="operator">/</span><span class="operator">/</span> 查询不到任何数据</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    between and在使用的时候必须左小右大。</p><p>​    between and除了可以使用在数字方面之外，还可以使用在字符串方面。<br>​    select ename from emp where ename between ‘A’ and ‘C’;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  +-------+</span><br><span class="line">​| ename |</span><br><span class="line">​+-------+</span><br><span class="line">​| ALLEN |</span><br><span class="line">​| BLAKE |</span><br><span class="line">​| ADAMS |</span><br><span class="line">​+-------+</span><br></pre></td></tr></table></figure><p>​    <code>select ename from emp where ename between &#39;A&#39; and &#39;D&#39;; // 左闭右开。</code></p><p>​    找出哪些人津贴为NULL？<br>​        在数据库当中NULL不是一个值，代表什么也没有，为空。<br>​        空不是一个值，不能用等号衡量。<br>​        必须使用 is null或者is not null<br>​        <code>select ename,sal,comm from emp where comm is null;</code><br>​        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    +--------+---------+------+</span><br><span class="line">​| ename  | sal     | comm |</span><br><span class="line">​+--------+---------+------+</span><br><span class="line">​| SMITH  |  800.00 | NULL |</span><br><span class="line">​| JONES  | 2975.00 | NULL |</span><br><span class="line">​| BLAKE  | 2850.00 | NULL |</span><br><span class="line">​| CLARK  | 2450.00 | NULL |</span><br><span class="line">​| SCOTT  | 3000.00 | NULL |</span><br><span class="line">​| KING   | 5000.00 | NULL |</span><br><span class="line">​| ADAMS  | 1100.00 | NULL |</span><br><span class="line">​| JAMES  |  950.00 | NULL |</span><br><span class="line">​| FORD   | 3000.00 | NULL |</span><br><span class="line">​| MILLER | 1300.00 | NULL |</span><br><span class="line">​+--------+---------+------+</span><br></pre></td></tr></table></figure><p>​        `select ename,sal,comm from emp where comm = null;<br>​        Empty set (0.00 sec)</p><p>​    找出哪些人津贴不为NULL？<br>​        select ename,sal,comm from emp where comm is not null;<br>​        +——–+———+———+<br>​        | ename  | sal     | comm    |<br>​        +——–+———+———+<br>​        | ALLEN  | 1600.00 |  300.00 |<br>​        | WARD   | 1250.00 |  500.00 |<br>​        | MARTIN | 1250.00 | 1400.00 |<br>​        | TURNER | 1500.00 |    0.00 |<br>​        +——–+———+———+<br>​<br>​    找出哪些人没有津贴？<br>​        <code>select ename,sal,comm from emp where comm is null or comm = 0;</code><br>​        +——–+———+——+<br>​        | ename  | sal     | comm |<br>​        +——–+———+——+<br>​        | SMITH  |  800.00 | NULL |<br>​        | JONES  | 2975.00 | NULL |<br>​        | BLAKE  | 2850.00 | NULL |<br>​        | CLARK  | 2450.00 | NULL |<br>​        | SCOTT  | 3000.00 | NULL |<br>​        | KING   | 5000.00 | NULL |<br>​        | TURNER | 1500.00 | 0.00 |<br>​        | ADAMS  | 1100.00 | NULL |<br>​        | JAMES  |  950.00 | NULL |<br>​        | FORD   | 3000.00 | NULL |<br>​        | MILLER | 1300.00 | NULL |<br>​        +——–+———+——+<br>​<br>​    找出工作岗位是MANAGER和SALESMAN的员工？<br>​        <code>select ename,job from emp where job = &#39;MANAGER&#39; or job = &#39;SALESMAN&#39;;</code><br>​        +——–+———-+<br>​        | ename  | job      |<br>​        +——–+———-+<br>​        | ALLEN  | SALESMAN |<br>​        | WARD   | SALESMAN |<br>​        | JONES  | MANAGER  |<br>​        | MARTIN | SALESMAN |<br>​        | BLAKE  | MANAGER  |<br>​        | CLARK  | MANAGER  |<br>​        | TURNER | SALESMAN |<br>​        +——–+———-+<br>​<br>​    and和or联合起来用：找出薪资大于1000的并且部门编号是20或30部门的员工。<br>​        <code>select ename,sal,deptno from emp where sal &gt; 1000 and deptno = 20 or deptno = 30; // 错误的</code><br>​        <code>select ename,sal,deptno from emp where sal &gt; 1000 and (deptno = 20 or deptno = 30); // 正确的。</code><br>​        注意：当运算符的优先级不确定的时候加小括号。<br>​<br>​    in等同于or：找出工作岗位是MANAGER和SALESMAN的员工？<br>​        <code>select ename,job from emp where job = &#39;SALESMAN&#39; or job = &#39;MANAGER&#39;;</code><br>​        <code>select ename,job from emp where job in(&#39;SALESMAN&#39;, &#39;MANAGER&#39;);</code></p><p>​        select ename,job from emp where sal in(800, 5000); // in后面的值不是区间，是具体的值。<br>​        +——-+———–+<br>​        | ename | job       |<br>​        +——-+———–+<br>​        | SMITH | CLERK     |<br>​        | KING  | PRESIDENT |<br>​        +——-+———–+<br>​<br>​    not in: 不在这几个值当中。<br>​        <code>select ename,job from emp where sal not in(800, 5000);</code><br>​<br>​    模糊查询like ?<br>​        找出名字当中含有O的？<br>​            （在模糊查询当中，必须掌握两个特殊的符号，一个是%，一个是_）<br>​            %代表任意多个字符，_代表任意1个字符。<br>​            <code>select ename from emp where ename like &#39;%O%&#39;;</code><br>​            +——-+<br>​            | ename |<br>​            +——-+<br>​            | JONES |<br>​            | SCOTT |<br>​            | FORD  |<br>​            +——-+<br>​        找出名字中第二个字母是A的？<br>​            <code>select ename from emp where ename like &#39;_A%&#39;;</code><br>​            +——–+<br>​            | ename  |<br>​            +——–+<br>​            | WARD   |<br>​            | MARTIN |<br>​            | JAMES  |<br>​            +——–+<br>​        找出名字中有下划线的？<br>​            <code>mysql&gt; select * from t_user;</code><br>​            +——+———-+<br>​            | id   | name     |<br>​            +——+———-+<br>​            |    1 | zhangsan |<br>​            |    2 | lisi     |<br>​            |    3 | WANG_WU  |<br>​            +——+———-+<br>​            <code>select name from t_user where name like &#39;%_%&#39;;</code><br>​            +———-+<br>​            | name     |<br>​            +———-+<br>​            | zhangsan |<br>​            | lisi     |<br>​            | WANG_WU  |<br>​            +———-+<br>​            <code>select name from t_user where name like &#39;%\_%&#39;;</code><br>​            +———+<br>​            | name    |<br>​            +———+<br>​            | WANG_WU |<br>​            +———+</p><p>​        找出名字中最后一个字母是T的？<br>​        <code>    select ename from emp where ename like &#39;%T&#39;;</code><br>​            +——-+<br>​            | ename |<br>​            +——-+<br>​            | SCOTT |<br>​            +——-+</p><p>13、排序（升序、降序）</p><p>按照工资升序，找出员工名和薪资？<br>    <code>select ename,sal from emp order by sal;</code><br>+——–+———+<br>| ename  | sal     |<br>+——–+———+<br>| SMITH  |  800.00 |<br>| JAMES  |  950.00 |<br>| ADAMS  | 1100.00 |<br>| WARD   | 1250.00 |<br>| MARTIN | 1250.00 |<br>| MILLER | 1300.00 |<br>| TURNER | 1500.00 |<br>| ALLEN  | 1600.00 |<br>| CLARK  | 2450.00 |<br>| BLAKE  | 2850.00 |<br>| JONES  | 2975.00 |<br>| FORD   | 3000.00 |<br>| SCOTT  | 3000.00 |<br>| KING   | 5000.00 |<br>+——–+———+</p><p>注意：默认是升序。怎么指定升序或者降序呢？asc表示升序，desc表示降序。<br>    <code>select ename , sal from emp order by sal; // 升序</code><br>    <code>select ename , sal from emp order by sal asc; // 升序</code><br><code>    select ename , sal from emp order by sal desc; // 降序。</code></p><p>按照工资的降序排列，当工资相同的时候再按照名字的升序排列。<br><code>    select ename,sal from emp order by sal desc;</code><br>    <code>select ename,sal from emp order by sal desc , ename asc;</code><br>    注意：越靠前的字段越能起到主导作用。只有当前面的字段无法完成排序的时候，才会启用后面的字段。</p><p>找出工作岗位是SALESMAN的员工，并且要求按照薪资的降序排列。<br><code>    select ename,job,sal from emp where job = &#39;SALESMAN&#39; order by sal desc;</code><br>+——–+———-+———+<br>| ename  | job      | sal     |<br>+——–+———-+———+<br>| ALLEN  | SALESMAN | 1600.00 |<br>| TURNER | SALESMAN | 1500.00 |<br>| WARD   | SALESMAN | 1250.00 |<br>| MARTIN | SALESMAN | 1250.00 |<br>+——–+———-+———+</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">字段3</span><br><span class="line">from</span><br><span class="line">表名1</span><br><span class="line">where</span><br><span class="line">条件2</span><br><span class="line">order by</span><br><span class="line">....4</span><br></pre></td></tr></table></figure><p>order by是最后执行的。</p><p>14、分组函数？<br>    count 计数<br>    sum 求和<br>    avg 平均值<br>    max 最大值<br>    min 最小值</p><p>记住：所有的分组函数都是对“某一组”数据进行操作的。</p><p>找出工资总和？<br>    <code>select sum(sal) from emp;</code><br>找出最高工资？<br>    <code>select max(sal) from emp;</code><br>找出最低工资？<br>    <code>select min(sal) from emp;</code><br>找出平均工资？<br>    <code>select avg(sal) from emp;</code><br>找出总人数？<br>    <code>select count(*) from emp;</code><br>    <code>select count(ename) from emp;</code></p><p>分组函数一共5个。<br>分组函数还有另一个名字：多行处理函数。<br>多行处理函数的特点：输入多行，最终输出的结果是1行。</p><p>分组函数自动忽略NULL。<br><code>    select count(comm) from emp;</code><br>    +————-+<br>    | count(comm) |<br>    +————-+<br>    |           4 |<br>    +————-+</p><p>​    <code>select sum(comm) from emp;</code><br>​    +———–+<br>​    | sum(comm) |<br>​    +———–+<br>​    |   2200.00 |<br>​    +———–+</p><p>​    <code>select sum(comm) from emp where comm is not null; // 不需要额外添加这个过滤条件。sum函数自动忽略NULL。</code></p><p>​    找出工资高于平均工资的员工？<br>​        <code>select avg(sal) from emp; // 平均工资</code><br>​        +————-+<br>​        | avg(sal)    |<br>​        +————-+<br>​        | 2073.214286 |<br>​        +————-+</p><p>​        <code>select ename,sal from emp where sal &gt; avg(sal); //ERROR 1111 (HY000): Invalid use of group function</code><br>​        思考以上的错误信息：无效的使用了分组函数？<br>​            原因：SQL语句当中有一个语法规则，分组函数不可直接使用在where子句当中。why????<br>​            怎么解释？<br>​                因为group by是在where执行之后才会执行的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select5</span><br><span class="line">​..</span><br><span class="line">​from1</span><br><span class="line">​..</span><br><span class="line">​where2</span><br><span class="line">​..</span><br><span class="line">​group by3</span><br><span class="line">​..</span><br><span class="line">​having4</span><br><span class="line">​..</span><br><span class="line">​order by6</span><br><span class="line">​..</span><br></pre></td></tr></table></figure><p>count(<em>)和count(具体的某个字段)，他们有什么区别？<br>    count(</em>):不是统计某个字段中数据的个数，而是统计总记录条数。（和某个字段无关）<br>    count(comm): 表示统计comm字段中不为NULL的数据总数量。</p><p>分组函数也能组合起来用：<br>    <code>select count(*),sum(sal),avg(sal),max(sal),min(sal) from emp;</code></p><p>​    +———-+———-+————-+———-+———-+<br>​    | count(*) | sum(sal) | avg(sal)    | max(sal) | min(sal) |<br>​    +———-+———-+————-+———-+———-+<br>​    |       14 | 29025.00 | 2073.214286 |  5000.00 |   800.00 |<br>​    +———-+———-+————-+———-+———-+</p><p>找出工资高于平均工资的员工？<br>    第一步：找出平均工资<br>    <code>    select avg(sal) from emp;</code><br>        +————-+<br>        | avg(sal)    |<br>        +————-+<br>        | 2073.214286 |<br>        +————-+<br>    第二步：找出高于平均工资的员工<br>        <code>select ename,sal from emp where sal &gt; 2073.214286;</code><br>        +——-+———+<br>        | ename | sal     |<br>        +——-+———+<br>        | JONES | 2975.00 |<br>        | BLAKE | 2850.00 |<br>        | CLARK | 2450.00 |<br>        | SCOTT | 3000.00 |<br>        | KING  | 5000.00 |<br>        | FORD  | 3000.00 |<br>        +——-+———+</p><p>​        <code>select ename,sal from emp where sal &gt; (select avg(sal) from emp);</code></p><p>15、单行处理函数<br>    什么是单行处理函数？<br>        输入一行，输出一行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">计算每个员工的年薪？</span><br><span class="line">select ename,(sal+comm)*12 as yearsal from emp;</span><br><span class="line">重点：所有数据库都是这样规定的，只要有NULL参与的运算结果一定是NULL。</span><br><span class="line">使用ifnull函数：</span><br><span class="line">select ename,(sal+ifnull(comm,0))*12 as yearsal from emp;</span><br><span class="line"></span><br><span class="line">ifnull() 空处理函数？</span><br><span class="line">ifnull(可能为NULL的数据,被当做什么处理) ： 属于单行处理函数。</span><br><span class="line">select ename,ifnull(comm,0) as comm from emp;</span><br><span class="line">+--------+---------+</span><br><span class="line">| ename  | comm    |</span><br><span class="line">+--------+---------+</span><br><span class="line">| SMITH  |    0.00 |</span><br><span class="line">| ALLEN  |  300.00 |</span><br><span class="line">| WARD   |  500.00 |</span><br><span class="line">| JONES  |    0.00 |</span><br><span class="line">| MARTIN | 1400.00 |</span><br><span class="line">| BLAKE  |    0.00 |</span><br><span class="line">| CLARK  |    0.00 |</span><br><span class="line">| SCOTT  |    0.00 |</span><br><span class="line">| KING   |    0.00 |</span><br><span class="line">| TURNER |    0.00 |</span><br><span class="line">| ADAMS  |    0.00 |</span><br><span class="line">| JAMES  |    0.00 |</span><br><span class="line">| FORD   |    0.00 |</span><br><span class="line">| MILLER |    0.00 |</span><br><span class="line">+--------+---------+</span><br></pre></td></tr></table></figure><p>16、group by 和 having</p><p>group by ： 按照某个字段或者某些字段进行分组。<br>having : having是对分组之后的数据进行再次过滤。</p><p>案例：找出每个工作岗位的最高薪资。<br>select max(sal),job from emp group by job;</p><p>+———-+———–+<br>| max(sal) | job       |<br>+———-+———–+<br>|  3000.00 | ANALYST   |<br>|  1300.00 | CLERK     |<br>|  2975.00 | MANAGER   |<br>|  5000.00 | PRESIDENT |<br>|  1600.00 | SALESMAN  |<br>+———-+———–+</p><p>​    </p><p>注意：分组函数一般都会和group by联合使用，这也是为什么它被称为分组函数的原因。<br>并且任何一个分组函数（count sum avg max min）都是在group by语句执行结束之后才会执行的。<br>当一条sql语句没有group by的话，整张表的数据会自成一组。</p><p>select ename,max(sal),job from emp group by job;<br>以上在mysql当中，查询结果是有的，但是结果没有意义，在Oracle数据库当中会报错。语法错误。<br>Oracle的语法规则比MySQL语法规则严谨。<br>记住一个规则：当一条语句中有group by的话，select后面只能跟分组函数和参与分组的字段。</p><p>每个工作岗位的平均薪资？<br>    <code>select job,avg(sal) from emp group by job;</code><br>    +———–+————-+<br>    | job       | avg(sal)    |<br>    +———–+————-+<br>    | ANALYST   | 3000.000000 |<br>    | CLERK     | 1037.500000 |<br>    | MANAGER   | 2758.333333 |<br>    | PRESIDENT | 5000.000000 |<br>    | SALESMAN  | 1400.000000 |<br>    +———–+————-+</p><p>多个字段能不能联合起来一块分组？<br>案例：找出每个部门不同工作岗位的最高薪资。<br>    select<br>        deptno,job,max(sal)<br>    from<br>        emp<br>    group by<br>        deptno,job;</p><p>找出每个部门的最高薪资，要求显示薪资大于2900的数据。</p><p>​    第一步：找出每个部门的最高薪资<br>​<code>    select max(sal),deptno from emp group by deptno;</code><br>​    +———-+——–+<br>​    | max(sal) | deptno |<br>​    +———-+——–+<br>​    |  5000.00 |     10 |<br>​    |  3000.00 |     20 |<br>​    |  2850.00 |     30 |<br>​    +———-+——–+</p><p>​    第二步：找出薪资大于2900<br>​    <code>select max(sal),deptno from emp group by deptno having max(sal) &gt; 2900; // 这种方式效率低。</code><br>​    +———-+——–+<br>​    | max(sal) | deptno |<br>​    +———-+——–+<br>​    |  5000.00 |     10 |<br>​    |  3000.00 |     20 |<br>​    +———-+——–+</p><p>​    <code>select max(sal),deptno from emp where sal &gt; 2900 group by deptno;  // 效率较高，建议能够使用where过滤的尽量使用where。</code><br>​    +———-+——–+<br>​    | max(sal) | deptno |<br>​    +———-+——–+<br>​    |  5000.00 |     10 |<br>​    |  3000.00 |     20 |<br>​    +———-+——–+</p><p>找出每个部门的平均薪资，要求显示薪资大于2000的数据。</p><p>第一步：找出每个部门的平均薪资<br><code>select deptno,avg(sal) from emp group by deptno;</code><br>+——–+————-+<br>| deptno | avg(sal)    |<br>+——–+————-+<br>|     10 | 2916.666667 |<br>|     20 | 2175.000000 |<br>|     30 | 1566.666667 |<br>+——–+————-+</p><p>第二步：要求显示薪资大于2000的数据<br><code>select deptno,avg(sal) from emp group by deptno having avg(sal) &gt; 2000;</code><br>+——–+————-+<br>| deptno | avg(sal)    |<br>+——–+————-+<br>|     10 | 2916.666667 |<br>|     20 | 2175.000000 |<br>+——–+————-+</p><p>where后面不能使用分组函数：<br>    <code>select deptno,avg(sal) from emp where avg(sal) &gt; 2000 group by deptno;    // 错误了。</code><br>    这种情况只能使用having过滤。</p><p>17、总结一个完整的DQL语句怎么写？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select5</span><br><span class="line">..</span><br><span class="line">from1</span><br><span class="line">..</span><br><span class="line">where2</span><br><span class="line">..</span><br><span class="line">group by3</span><br><span class="line">..</span><br><span class="line">having4</span><br><span class="line">..</span><br><span class="line">order by6</span><br></pre></td></tr></table></figure><p>​    ..</p><p>  从某张表中查询数据语句的执行顺序：<br>  1.先经过where条件筛选出有价值的数据；<br>  2.group对这些数据进行分组<br>  3.分组之后可以继续使用having再一次筛选<br>  4.挑选出想要的数据<br>  5.对最终的筛选结果进行排序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;根据老杜MySQL教学视频整理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、sql、DB、DBMS分别是什么，他们之间的关系？&lt;br&gt;  DB:&lt;br&gt;      DataBase（数据库，数据库实际上在硬盘上以文件的形式存在）&lt;/p&gt;
&lt;p&gt; </summary>
      
    
    
    
    <category term="数据库" scheme="https://www.lzp.zone/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://www.lzp.zone/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://www.lzp.zone/tags/MySQL/"/>
    
    <category term="数据库" scheme="https://www.lzp.zone/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="SQL" scheme="https://www.lzp.zone/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Hexo语法</title>
    <link href="https://www.lzp.zone/2021/10/31/hello-world/"/>
    <id>https://www.lzp.zone/2021/10/31/hello-world/</id>
    <published>2021-10-31T07:09:23.149Z</published>
    <updated>2022-03-19T00:30:38.836Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://doingpower.github.io/" >Nico’zone<i class="fas fa-external-link-alt"></i></a>! This is my very first post. If you get any problems when reading ,  you can ask me on  the <code>Comments</code> area or contact me through the email on the home page.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://doingpower.github.io/&quot; &gt;Nico’zone&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is my very</summary>
      
    
    
    
    <category term="博客" scheme="https://www.lzp.zone/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="https://www.lzp.zone/tags/hexo/"/>
    
    <category term="terminal" scheme="https://www.lzp.zone/tags/terminal/"/>
    
    <category term="git" scheme="https://www.lzp.zone/tags/git/"/>
    
  </entry>
  
</feed>
