<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nico‘s Zone</title>
  
  <subtitle>疏影横斜水清浅，暗香浮动月黄昏。</subtitle>
  <link href="https://www.lzp.zone/atom.xml" rel="self"/>
  
  <link href="https://www.lzp.zone/"/>
  <updated>2022-04-05T15:24:20.178Z</updated>
  <id>https://www.lzp.zone/</id>
  
  <author>
    <name>Nico Liao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>供应链小记一</title>
    <link href="https://www.lzp.zone/2022/04/01/%E4%BE%9B%E5%BA%94%E9%93%BE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://www.lzp.zone/2022/04/01/%E4%BE%9B%E5%BA%94%E9%93%BE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2022-04-01T14:10:07.000Z</published>
    <updated>2022-04-05T15:24:20.178Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近有面试供应链的工作，便开个分支学习记录一二</p><p>本篇笔记主要参考<a class="link"   href="https://weread.qq.com/web/reader/bfe32cb07171204dbfe1955" >采购与供应链管理：一个实践者的角度（第2版）刘宝红 著<i class="fas fa-external-link-alt"></i></a> 、 <a class="link"   href="https://scm-blog.com/" >刘宝红先生的供应链专栏<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://read.douban.com/reader/ebook/107966212/" >采购与供应链管理：一个实践者的角度（第3版）刘宝红 著 等资料<i class="fas fa-external-link-alt"></i></a> </p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>关于本书</p><ul><li><p>不讲大道理（<strong>大道理好讲，小事情难做</strong>，这句话写的真好）</p></li><li><p>无派门之见（主要涉及采购、供应管理，物流管理及运营管理不重笔墨）</p></li><li><p>不为宣传最佳案例（看病下药，没得包治百病的方子）</p></li><li><p>定位是填补学者与实践者之间的空白</p></li></ul><p>其他</p><blockquote><p>“商业界的最大童话莫过于相信不劳而获，最大悲剧就是相信有点石成金的捷径。一切商业问题都有一个fix，但很少有一个quick fix。”</p></blockquote><blockquote><p>“魔鬼藏在细节中，魔鬼也藏在常识中。该发生的总会发生。你没法忽略细节、忽视常识，否则注定没法建立一流的供应链。”</p></blockquote><h1 id="第一章-供应链管理需要全局观"><a href="#第一章-供应链管理需要全局观" class="headerlink" title="第一章 供应链管理需要全局观"></a>第一章 供应链管理需要全局观</h1><h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul><li><p>供应链管理的发展基础</p><ul><li>采购管理</li><li>运营管理</li><li>物流管理</li></ul></li><li><p>供应链管理的三条分流</p><ul><li>产品流</li><li>信息流</li><li>资金流</li></ul></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0unabvkg2j21400p077q.jpg"                      alt="管理供应链，跨越供应链降本三台阶"                ></p><blockquote><ul><li>供应链设计就是理顺供应链伙伴/职能之间的关系、改善产品/信息/资金流和降低复杂度。</li><li>本书主要着眼供应链的推拉结合、一级供应商的选取和下级供应商的管理。这是从根本上把供应链的成本做下来、速度做上去。</li><li>我们还会重点阐述牛鞭效应和供应链的库存控制，两个困扰业界多年的话题。库存控制为供应链提供了独特的视角——供应链的种种问题，最后都或多或少地以<strong>库存的方式</strong>反映出来。</li></ul></blockquote><p>总结</p><ul><li><p>供应链管理目标</p><ul><li>在客户眼里，供应链管理的目标是完美订单，即保质保量按时送达；</li><li>在公司眼里，还得有适当的成本，否则没法持久服务客户。</li></ul></li><li><p>供应链的降本三台阶是应对成本挑战的根本措施，它超越：</p><ul><li>常见的谈判降价（台阶一）</li><li>导入精益生产以降低生产成本、借助电子商务以降低交易成本（台阶二）</li><li>上升到价值工程、价值分析以降低设计决定的成本（台阶三）。</li><li>跨越供应链的降本三台阶需要跨职能协作。</li></ul></li><li><p>供应链的根本思路也是突破部门壁垒，从局部优化上升到全局优化。</p></li></ul><h2 id="供应链管理与盲人摸象"><a href="#供应链管理与盲人摸象" class="headerlink" title="供应链管理与盲人摸象"></a>供应链管理与盲人摸象</h2><ul><li>供应链管理的范畴非常广泛，对他的认识就像盲人摸象，站在不同的职业角度来看也不大一样：<ul><li>对很多采购人员来说，供应链管理就是采购和供应商管理，即确保供应商按时、保质、保量提供价格合理的产品或服务；</li><li>对于生产管理出身的人讲，供应链不过是生产管理的延伸罢了；</li><li>对于物流行业的人来说，供应链管理则往往被等同于供货网络设计、车辆调度、仓储管理等。</li></ul></li></ul><p>一，供应链管理与物流管理</p><blockquote><p>“大致在20世纪90年代，物流和供应链管理两个概念传入国内。这并不是说以前就没有物流和供应链——有人类的时候就有，只是不一定这么叫罢了。当时的大背景是物流成本太高，约束着本土供应链的效率”</p></blockquote><ul><li><p><strong>物流成本</strong>包括<strong>仓储、分销、运输、库存、供销规划、物料搬运、第三方物流</strong>等费用，与一个国家的基础设施息息相关。</p></li><li><p><strong>什么是物流管理</strong>呢？</p><p>供应链是从客户的客户到供应商的供应商，供应链管理是对贯穿其中的产品流、信息流和资金流的集成管理，以最大化给客户的价值、最小化供应链的成本。它是一个综合管理思想，试图摆脱单个公司、单个职能层面的局部优化，实现供应链领域的全局优化。</p></li><li><p><strong>构成供应链管理的三大领域</strong>：</p><ul><li>采购/供应管理（寻源）</li><li>生产运营管理（加工）</li><li>物流管理（交付）</li></ul><p>这三大块是执行职能，他们由计划职能驱动——也可以说计划是供应链的第四大领域，但计划本身很难独立出来，比如供应计划附属采购职能，生产计划附属生产等。</p><p>计划是供应链的引擎。很多执行层面的问题，其实是计划不到位造成的。这也是为什么在供应链运营模型（SCOR）中，计划处于采购、运营和物流之上。如下图：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0unsr96scj21400p0768.jpg"                      alt="供应链管理横跨采购、运营和物流"                ></p></li></ul><blockquote><ul><li>从三大职能上讲，采购与供应管理侧重于供应商管理，使供应商成为公司的有机延伸；生产运营管理力求以最有效的方式完成产品、服务的增值过程；而物流管理则力求以最经济、迅捷的方式把货物从A点流动到B点。</li><li>从三条流上讲，产品流从供应商向客户流动，是供应链的实物流（如果是从客户向供应商方向，则称为逆向物流）；资金流是从客户流向供应商，是供应链的血液；而信息流则是双向流通，构成供应链的神经系统。</li><li>在竖向集成盛行的年代，供、产、销大都处于同一个公司内部。例如20世纪早期的福特汽车，从炼铁厂到零部件到整车组装，都曾试图集中在自己旗下，尽管并没有真正集成到这一步。</li><li>最近二三十年以来，竖向集成解体，外包盛行，这三大功能则越来越依赖供应商，例如零部件来自供应商，生产靠外包制造商，物流靠第三方物流公司。作为采购方，对这三部分的集成。</li></ul></blockquote><blockquote><p>tips：斯坦福大学的李效良（Hau Lee）教授，他关于“牛鞭效应”的研究可以说是奠定了供应链的理论基础。</p></blockquote><p>越来越多的公司倾向于集成采购、运营和物流三个部门，以及计划职能，即集成供应链（ISC）。供应链管理的概念更加深入，不光是大企业，而且是中小企业；不光是制造业，而且是建筑业、电商、餐饮等各种行业。例如，“餐饮看上去是开餐馆，其实竞争的是供应链实力”。</p><p>企业要生存，不但需要开发好的产品（主要是设计的责任）、卖个好价钱（销售的任务），而且要以适当的成本、速度生产出来（供应链的责任）。随着整体经济的进一步成熟、放缓，降本增效的压力必将加剧，而<strong>作为降本增效的主要源泉，供应链管理任重道远</strong>。</p><h3 id="采购与供应管理"><a href="#采购与供应管理" class="headerlink" title="采购与供应管理"></a>采购与供应管理</h3><blockquote><p>“供应管理起源于采购管理。从严格意义上讲，供应管理的范畴远大于采购管理”</p><p>“采购的地位提升，其重心也从订单处理转为对供应商的战略管理，过渡到供应管理。”</p></blockquote><ul><li>与采购管理的围绕订单处理相对应，供应管理更侧重供应商的战略管理，通过分析开支、确认需求、评估供应商、选择供应商、签订协议、管理供应商来确保以合适的成本保质、保量地获取资源。从时间跨度上讲，供应管理向前延伸到设计和新产品开发，向后延伸到产品的生命周期结束；从公司阶层上讲，供应管理延伸到对公司的资产、现金流等的管理，直接影响到公司的盈利。</li><li>从供应链管理的角度来看，采购处于公司内外结合点，是管理供应链的理想选择。作为采购部门，突破对传统职能的认识，在管理供应链上发挥更大作用，也是提升采购在公司的地位的一个主要办法。</li><li>采购对内管理需求（比如设计的新产品寻源、生产部门的量产需求）、对外管理供应商（比如供应商选择和绩效管理），通过理顺需求来理顺供应，其实就在管理供应链，或者说供应链的一大块。”</li></ul><h3 id="物流管理：从A点到B点"><a href="#物流管理：从A点到B点" class="headerlink" title="物流管理：从A点到B点"></a>物流管理：从A点到B点</h3><ul><li><p>物流管理是供应链管理的一部分，即为满足客户需求，通过计划、实施和控制，促成产品、服务和信息从发源地到消费点的有效流动及储藏。</p></li><li><p>物流管理的定义：</p><ul><li>物流管理是供应链管理的一部分。</li><li>物流管理的对象是产品、服务、信息的流动与储藏。</li><li>物流管理不但管理产品、服务、信息的正向流动（从供应商到客户），也管理其反向流动（从客户到供应商，即逆向物流）。逆向物流日趋重要，是退货、保修、返修等售后服务的重要一环，也更难管理。</li></ul><p>按照上述定义，物流管理的对象包括运输、车队、仓储、物料处理、订单履行、物流网络设计、库存管理、供给与需求规划，以及对第三方物流服务商的管理。当然，有时候物流管理也会涉及采购、生产、包装和客户服务等。它不但要优化物流的各环节，而且要考虑与其他职能的集成。</p></li></ul><h3 id="运营管理：千遍万变不走样"><a href="#运营管理：千遍万变不走样" class="headerlink" title="运营管理：千遍万变不走样"></a>运营管理：千遍万变不走样</h3><ul><li><p>运营管理是对设计、工业工程、管理信息系统、质量管理、生产管理、库存管理、会计等职能的集成，以有效地规划、利用和控制生产或服务机构</p></li><li><p>背后没有成套的系统、流程、培训、监控是不可能的。运营管理的价值就体现在对这些系统的设计、运营和改进。而且只有从日常运营的繁杂琐事中上升到流程、系统的实质问题并改进，运营管理者才能脱颖而出。这点同样适用于供应链管理。</p></li></ul><h2 id="从美国三大协会说供应链管理的演变"><a href="#从美国三大协会说供应链管理的演变" class="headerlink" title="从美国三大协会说供应链管理的演变"></a>从美国三大协会说供应链管理的演变</h2><h2 id="供应链是产品流、信息流和资金流的集成"><a href="#供应链是产品流、信息流和资金流的集成" class="headerlink" title="供应链是产品流、信息流和资金流的集成"></a>供应链是产品流、信息流和资金流的集成</h2><h2 id="供应链：我们离集成管理还有多远"><a href="#供应链：我们离集成管理还有多远" class="headerlink" title="供应链：我们离集成管理还有多远"></a>供应链：我们离集成管理还有多远</h2><h2 id="复杂度是供应链管理的大敌"><a href="#复杂度是供应链管理的大敌" class="headerlink" title="复杂度是供应链管理的大敌"></a>复杂度是供应链管理的大敌</h2><h2 id="供应链：大并不是伟大"><a href="#供应链：大并不是伟大" class="headerlink" title="供应链：大并不是伟大"></a>供应链：大并不是伟大</h2><h2 id="供应链设计：产品、信息和资金流的优化"><a href="#供应链设计：产品、信息和资金流的优化" class="headerlink" title="供应链设计：产品、信息和资金流的优化"></a>供应链设计：产品、信息和资金流的优化</h2><h2 id="供应链设计：是救命药，也可能是毒药"><a href="#供应链设计：是救命药，也可能是毒药" class="headerlink" title="供应链设计：是救命药，也可能是毒药"></a>供应链设计：是救命药，也可能是毒药</h2><h2 id="供应链设计中的一级供应商选择"><a href="#供应链设计中的一级供应商选择" class="headerlink" title="供应链设计中的一级供应商选择"></a>供应链设计中的一级供应商选择</h2><h2 id="从苹果和本田说下级供应商管理"><a href="#从苹果和本田说下级供应商管理" class="headerlink" title="从苹果和本田说下级供应商管理"></a>从苹果和本田说下级供应商管理</h2><h2 id="从波音787的紧固件说供应链的末端"><a href="#从波音787的紧固件说供应链的末端" class="headerlink" title="从波音787的紧固件说供应链的末端"></a>从波音787的紧固件说供应链的末端</h2><h2 id="控制牛鞭效应，控制供应链的波动"><a href="#控制牛鞭效应，控制供应链的波动" class="headerlink" title="控制牛鞭效应，控制供应链的波动"></a>控制牛鞭效应，控制供应链的波动</h2><h2 id="专注供应链库存，遏制“打不死的妖怪”"><a href="#专注供应链库存，遏制“打不死的妖怪”" class="headerlink" title="专注供应链库存，遏制“打不死的妖怪”"></a>专注供应链库存，遏制“打不死的妖怪”</h2><h2 id="推动工艺和设计优化，跨越供应链降本三台阶"><a href="#推动工艺和设计优化，跨越供应链降本三台阶" class="headerlink" title="推动工艺和设计优化，跨越供应链降本三台阶"></a>推动工艺和设计优化，跨越供应链降本三台阶</h2><blockquote><p>待整理更新</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近有面试供应链的工作，便开个分支学习记录一二&lt;/p&gt;
&lt;p&gt;本篇笔记主要参考&lt;a class=&quot;link&quot;   href=&quot;https://weread.qq.com/web/reader/bfe32cb07171204dbfe1955&quot; &gt;采购</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="供应链" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/%E4%BE%9B%E5%BA%94%E9%93%BE/"/>
    
    
    <category term="供应链" scheme="https://www.lzp.zone/tags/%E4%BE%9B%E5%BA%94%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>武功滞涩处（算法篇）</title>
    <link href="https://www.lzp.zone/2022/03/25/%E6%AD%A6%E5%8A%9F%E6%BB%9E%E6%B6%A9%E5%A4%84%EF%BC%88%E7%AE%97%E6%B3%95%E7%AF%87%EF%BC%89/"/>
    <id>https://www.lzp.zone/2022/03/25/%E6%AD%A6%E5%8A%9F%E6%BB%9E%E6%B6%A9%E5%A4%84%EF%BC%88%E7%AE%97%E6%B3%95%E7%AF%87%EF%BC%89/</id>
    <published>2022-03-25T14:45:34.000Z</published>
    <updated>2022-03-25T15:20:00.730Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章格式提醒：问题2级、答案分支依次递减 ; 未解决的结尾用”?”进行标识；倒序更新。</p></blockquote><h2 id="Java常用的数据结构？"><a href="#Java常用的数据结构？" class="headerlink" title="Java常用的数据结构？"></a>Java常用的数据结构？</h2><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><h4 id="List-–-有序可重复列表"><a href="#List-–-有序可重复列表" class="headerlink" title="List – 有序可重复列表"></a>List – 有序可重复列表</h4><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><p>1、底层是用数组实现的，重要的成员有 元素数组/数组中元素数 size/ modCount 修改次数；操作系统层面：数组在内存中存储是地址连续的，而链表节点是分散的，这就可能造成前驱 节点在一页，后继节点在另一页，在遍历时可能会发生页表置换</p><p>2、进行 add 添加时，若没有指定添加位置，就会根据 size 确定添加的新元素在数组中的下标进行添加， 若 size &gt;= 数组长度，则需要扩容</p><p>3、在进行扩容时，会将 modCount++，并且会将原数组中的元素，拷贝至新数组中，新数组的大小是 原数组的 1.5 倍，默认的初始容量是 0，且在第一次添加元素时，设置数组大小为 10</p><p>4、若指定 i 为添加元素的位置，会调用 System.ArrayCopy 方法对 i 下标以后的元素进行拷贝，拷贝完成 后再把添加的元素放在 i 位置</p><p>5、调用 get 方法时，由于 ArrayList 底层基于数组，因此他实现了一个 RandomAccess 标识接口，表示 按下标读取数据速度很快，主要是由于数组在内存中是连续存储，可以通过第一个元素的存储地址和偏移量 offset 直接计算得到访问的元素的存储地址</p><p>6、若 get 方法是通过元素的值进行查找，则需要遍历数组</p><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><p>1、LinkedList 是基于链表存储的，链表中节点 Node 重要包含存储的元素的引用 E，指向前驱节点指针 prev 和指向后继节点的指针 next，LinkedList 中重要成员主要有 size/头节点  first/尾节点 last</p><p>2、LinkedList 由于 Node 在内存中是分散存储的，因此没有对 size 限制，在执行 add 方法时，默认添加在 链表的尾部</p><p>3、若指定添加元素在链表中的位置，LinkedList 需要调用 node 方法，传入参数 Index 找到对应的节点， 在查找对应的节点时，若 Index &lt; size / 2，从头节点向后遍历，若 Index &gt; size / 2，从尾节点向前遍历， 因此即使添加元素只需要改变节点的指针，但查找添加的位置的耗时仍然不小，开销不比 ArrayList 少</p><p>4、调用 get 方法时，若按下标查找，也需要进行同样的遍历，性能比 ArrayList 差很多，按元素值进行查找时， 也需要进行遍历，与 ArrayList 相比半斤八两</p><p>5、链表节点除了元素值，还需要维护两个指针，导致 LinkedList 存储的内存开销远大于 ArrayList</p><h5 id="Vector-amp-Stack"><a href="#Vector-amp-Stack" class="headerlink" title="Vector &amp; Stack"></a>Vector &amp; Stack</h5><p>1、Vector 也是基于数组进行存储，其原理与 ArrayList 类似，区别在于，Vector 中会维护一个 CapacityIncrement 变量，每一次进行扩容时，只增加一个 CapacityIncrement 变量的大小，若没有指定 CapacityInc，默认为 0，且在 扩容时，若 CapacityInc 为 0，则将数组大小翻倍</p><p>2、Vector 中的所有增删改查方法，包括 get 方法，都通过在方法上加 Sychronized 锁方式锁住 Vector 对象， 实现线程安全，性能较差</p><h4 id="Set-–-不可重复列表"><a href="#Set-–-不可重复列表" class="headerlink" title="Set – 不可重复列表"></a>Set – 不可重复列表</h4><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><p>内部有一个成员变量的 HashMap，实际上就是使用的 HashMap 的方法</p><h5 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h5><p>内部有一个成员变量的 TreeMap，底层就是 TreeMap</p><p>LinkedHashSet：底层调用的 HashSet 的方法，HashSet 中的 HashMap 也可以是 LinkedHashMap，因此实际是由 LinkedHashMap 实现</p><h4 id="Queue-Deque"><a href="#Queue-Deque" class="headerlink" title="Queue / Deque"></a>Queue / Deque</h4><p>LinkedList 实现 Queue 和 Deque，LinkedList 中使用 first 和 last 两个节点的指针用来标记链表的头/尾节点， 当进行 add 方法添加时，默认是在链表尾部添加，调用 poll 方法时，就会返回 first 节点，调用 pop 方法时， 返回 last 节点</p><h5 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h5><p>数组的方式实现了双端队列，主要是使用 head 和 tail 两个指针来标记 队列头/栈底 和 队列尾/栈顶</p><h5 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h5><p>使用数组的方式实现了优先队列，内部其实是一个二叉堆结构（小顶堆），原理逻辑与堆排序一致</p><p>重要属性有 size，用来标记数组中元素的个数，即新添加的元素的下标</p><p>执行 offer 方法时，先确认 size 是否大于等于数组长度，若大于等于则进行扩容，执行 siftup 方法</p><p>siftup 方法中，若制定了 Comparator，按照 Comparator 的 compare 方法与父节点比较，也就是 (size - 1) &gt;&gt;&gt; 1  下标对应的元素进行堆的插入，若没有指定，按元素实现的 Comparable 接口的 compareTo 方法进行比较</p><p>执行 poll() 方法时，若 size 为 0，返回空值，否则返回数组中下标为 0 的堆顶元素，将数组下标 0 位置替换为 size - 1  位置的元素，并减小 size，调用 siftdown 方法整理堆</p><p>siftdown 方法同样也分为根据 Comparator 和 Comparable 两种比较，主要是对 0 位置新换上来的元素与子节点进行 比较，将其与最大的并大于 0 位置的子节点进行交换，并循环直到将其放到合适的位置</p><h5 id="BlockQueue"><a href="#BlockQueue" class="headerlink" title="BlockQueue"></a>BlockQueue</h5><p>阻塞队列，详见并发</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p>重要成员变量</p><p>1、负载因子：默认为 0.75，表示 HashMap 存储的元素数到达 HashMap 散列数组长度的 0.75 时就进行扩容</p><p>负载因子越大，散列数组的</p><p>2、散列数组：HashMap 通过分离链表法解决哈希冲突的问题，在散列数组中存储的就是链表中的一个个头节点</p><p>3、K-V 键值对以 Node 节点的方式进行存储，Node 继承自 Map.Entry，包含 Next 指针，Key，Value 和 hash</p><p>4、threshold 门限，就是 负载因子 * 数组容量</p><p>5、size，HashMap 中当前存储的节点数</p><h5 id="put-方法流程"><a href="#put-方法流程" class="headerlink" title="put 方法流程"></a>put 方法流程</h5><p>1、再哈希：首先对 Key 进行再哈希，将 Key 的 HashCode 按位有符号右移 16 位，再与原本的 HashCode 进行抑或 # 目的：在对散列数组长度取余时，高位通常不参与运算，再哈希让高位参与哈希运算，让低位尽量不同，使哈希分 布更均匀</p><p>2、检查散列数组是否为空，若为空</p><p>3、若 Key 的 HashCode 对应的散列数组位置上节点为空，则直接将新节点加入</p><p>4、若不为空，比较链表的头节点 Key 与 put Key 的 HashCode 是否相等（== || equals），若相等，进行更新， 若不相等，顺着链表按同样的逻辑进行比较</p><p>5、若是 1.8 的HashMap，会先判断链表的头节点是否是 TreeNode，若是，则按照红黑树的逻辑 进行插入</p><p>6、1.7 的 HashMap 中，若遍历完链表仍未找到 Key 相同的节点，则将新节点加入到链表头，会造成并发扩容的死链问题， 1.8 中，将头插法改为了尾插法，解决了死链问题，但并发环境下的其他基本问题，如更新丢失等，仍然没有解决</p><p>7、若添加后 size &gt;= threshold，就会进行扩容</p><h5 id="扩容流程"><a href="#扩容流程" class="headerlink" title="扩容流程"></a>扩容流程</h5><p>1、首先 HashMap 的初始容量是 16，并且每次对原数组长度 * 2 进行扩容，当 size &gt; threshold 时就会进行扩容 # HashMap 每次 * 2 的原因：1）2 的幂次可以用 &amp; 的方式进行取余运算，效率更高；2）在扩容移动链表节点时， 节点在新数组中的位置只可能是原位置 i 或 i + oldCap 旧数组长度，扩容时效率更高</p><p>2、创建新的散列数组，并将旧的散列数组中的链表的头节点拷贝至新数组中，在移动时，节点的 hash 与 oldCap 进行 &amp; 运算，若结果为 0，表示在新数组中位置不变，若不为 0，表示在新数组中位置为 i + oldCap</p><p>3、在移动节点时，会使用一个 loHead/loTail 和 hiHead/hiTail 分别指向新数组中位置 i 和 i + oldCap 的链表的头尾节点， 用一个 next 指针指向当前正在移动节点的下一个节点，在 1.8 中，由于使用尾插法，每一次移动节点都会添加至 loTail/hiTail 之后，不会发生死链问题，而在 1.7 中，由于使用头插法，每一次移动节点都会添加至 head 之前，会发生扩容死链问题</p><p>4、1.7 扩容死链问题：t1 线程正在移动 A 节点，next 节点指向 A 节点的下一个节点 B，即 A -&gt; B，此时 t2 线程完成了 A 和 B 的移动， 此时 B.next = A，在 t1 移动 A 到新数组中后，当前正在移动节点 e 指向 B，next 指向 B.next = A，此时就形成了链表中的环，最终导致 程序崩溃</p><h5 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h5><p>1、红黑树类似于 AVL 树，他的查找效率略差于 AVL 树，为树的深度 2log(N + 1)，相比于 AVL 树，红黑树通过节点到叶子节点路径 上黑色节点的数目控制树的平衡，AVL 树通过比较两棵子树的高度差是否超过 1 决定是否平衡，因此红黑树对平衡性要求更低，并且 AVL 树 只能通过单旋转或双旋转重新平衡树，红黑树可以通过修改节点的颜色进行平衡，发生旋转的次数更少，插入删除的效率更高</p><p>2、特点</p><p>每个节点不是黑色就是红色，根节点是黑色</p><p>红色节点的子节点必须是黑色</p><p>从一个节点到每一个叶子节点的路径上的黑色节点数必须相同</p><p>3、HashMap 中什么时候树化/树退化</p><p>1、当链表长度达到 8 时进行树化 # 在 HashMap 源码注解中有解释为什么是 8，大概意思是，红黑树的节点大小大约是正常节点大小的两倍， 并且当节点数较少时链表与红黑树的查找效率差距可以忽略不记，在理想情况下，使用 0.75 作为负载因子， 采用随机哈希算法，树化阈值与树化频率遵循泊松分布，选择 8  的概率是 千万分之 6，7 的概率约是 十万分之 1</p><p>2、当扩容后链表长度小于等于 6 进行树的退化 # 红黑树的节点大小大约是正常节点大小的两倍，并且当节点数较少时链表与红黑树的查找效率差距可以忽略不记， 并且在插入和删除时维护红黑树的平衡性需要额外的开销</p><h4 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h4><p>通过分段锁 Segment 保证线程安全，Segment 继承自 ReentrantLock，每一个 Segment 中都包含一个 volatile 的 HashEntry 数组， 一个 volatile 的 count 表示当前 Segment 中存储的 K-V 节点数，一个 Threshold 表示扩容阈值</p><p>HashEntry 是基本存储单位，与 HashMap 中的Entry 基本一样，包含 Key，Value，next，hash，区别在于 HashEntry 的 Value 是 volatile 的，因此对 value 的修改对所有线程可见，并且 next 指针是 final 修饰，防止扩容时发生死链</p><p>ConcurrentHashMap 默认有一个长度为 16 的 Segment 数组，在进行增删改查时，会根据 Key 对 16 取余得到具体处于哪个 Segment， 对于 get 操作不加锁执行，对于 put 等修改操作，调用 Segment 的 lock 方法锁住当前段进行修改，不影响其他段的并发操作，在进行扩容 时，也仅是对单个 Segment 进行扩容</p><p>1.8 的 ConcurrentHashMap 摒弃了 Segment，采用 CAS 和类似于分段锁的方式保证线程安全</p><p>大体结构与 HashMap 一样，在 put 操作时，若 Node 数组对应下标处为空，使用 CAS 的方式不加锁添加节点，若数组中当前位置链表 头节点不为空，则对链表头节点加锁，在 Sychronized 同步代码块中执行与 HashMap 同样的逻辑</p><p>ConcurrentHashMap 在扩容时的移动原数组节点到新数组的操作，可以由多个线程并发完成，从而大大提高效率，在进行移动时， 会将当前线程正在移动的头节点包装为一个 ForwardNode，用来标识当前位置正在移动，当其他线程遍历到数组中的 ForwardNode 节点时，就会忽略并继续遍历，从而保证线程安全，并且在扩容时，仍然可以执行增删改查操作，这些操作通过头节点的 hash 判断 是否是一个 ForwardNode 节点，若是，则调用 helpTransfer 方法，并发的帮助完成扩容动作，完成后再回到循环中执行 put</p><p>get 方法也是通过 Unsafe 的 getObjectVolatile 进行读取，不加锁</p><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><p>底层是红黑树</p><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><p>采用 HashMap 来存储节点，用一个双向链表存储 HashMap 的 Node 节点使其有序</p><h4 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h4><p>使用 Sychronized 锁住方法来保证线程安全，并且默认初始容量为 11，每一次扩容为 oldCap * 2 + 1</p><h3 id="Iterator-迭代器"><a href="#Iterator-迭代器" class="headerlink" title="Iterator 迭代器"></a>Iterator 迭代器</h3><p>1、用来进行集合的遍历，不同的集合有不同的实现，例如 ArrayList 通过一个 cursor 指向下一个遍历的 元素的下标，用一个 lastRet 表示上一个遍历的元素的下标</p><p>2、Iterator 接口中主要包含三个基本方法，hasNext 判断是否还有下一个元素，next 表示遍历获取下一个 元素，remove 表示删除元素</p><p>3、常见的三种遍历方式，fori，foreach，Iterator，其中 fori 只能用于知道集合中具体元素数量时， fori 和 foreach 只能用于知道集合中元素具体类型时，foreach 底层就是 Iterator 的方式遍历</p><h4 id="三种遍历方式的删除"><a href="#三种遍历方式的删除" class="headerlink" title="三种遍历方式的删除"></a>三种遍历方式的删除</h4><h5 id="fori"><a href="#fori" class="headerlink" title="fori"></a>fori</h5><p>在 fori 进行删除时，问题在于删除当前下标会导致之后的元素前移， 比如 “A，B，B，C，C”，在 fori 中判断若元素等于 B 就删除，则会导致 i = 1 时，进行 删除后，i = 2 位置的 B 到达 1 的位置，即 “A，B，C，C”，而此时 i 已经到达 2 的位置， 即 i 指向 C，从而造成漏删，可以通过删除后让 i - 1，或者反向遍历删除解决</p><h5 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h5><p>对于 ArrayList 等迭代器是 fail-fast 的集合，在遍历时底层是使用迭代器进行遍历， 但在删除元素时，由于没有显式的获取迭代器，因此调用的是 List 的 remove 方法，会触发 迭代器的 fail-fast 机制，抛出异常中断程序</p><h5 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h5><p>没有任何问题</p><h4 id="fail-fast"><a href="#fail-fast" class="headerlink" title="fail-fast"></a>fail-fast</h4><p>迭代器实现了 fail-fast 机制的集合，在集合中都会维护一个 modCount 成员变量，用来表示对集合的修改次数， 在获取迭代器时，在迭代器中会为一个 ExpectedModCount 变量赋值为当前的 modCount，在执行 next，remove，hasnext 方法之前，会先对迭代器的 ExpectedModCount 与集合的 modCount 进行比较，若不相等直接抛出异常</p><h4 id="fail-safe"><a href="#fail-safe" class="headerlink" title="fail-safe"></a>fail-safe</h4><p>Java 中实现 fail-safe 迭代器的集合主要都是通过 Copy-On-Write 方法实现的，例如 CopyOnWriteList，其内 部有一个 ReentrantLock 锁对象，在进行增删改操作时，先加锁，将原有的数组拷贝一份，在新的数组上进行修改，而获取 迭代器时，会用一个 final 变量指向当前的数组，在旧的数组上进行遍历</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;文章格式提醒：问题2级、答案分支依次递减 ; 未解决的结尾用”?”进行标识；倒序更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Java常用的数据结构？&quot;&gt;&lt;a href=&quot;#Java常用的数据结构？&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Java" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
    <category term="算法" scheme="https://www.lzp.zone/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="https://www.lzp.zone/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Spring事务</title>
    <link href="https://www.lzp.zone/2022/03/25/Spring%E4%BA%8B%E5%8A%A1/"/>
    <id>https://www.lzp.zone/2022/03/25/Spring%E4%BA%8B%E5%8A%A1/</id>
    <published>2022-03-25T11:32:13.000Z</published>
    <updated>2022-03-25T13:18:51.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>事务是数据库操作最基本单元，逻辑上的一组操作。要么都成功，如果有一个失败所有操作都失败。</p><h2 id="事务四个特性"><a href="#事务四个特性" class="headerlink" title="事务四个特性"></a>事务四个特性</h2><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul><h2 id="事务操作-Spring-事务管理介绍"><a href="#事务操作-Spring-事务管理介绍" class="headerlink" title="事务操作(Spring 事务管理介绍)"></a>事务操作(<strong>Spring</strong> 事务管理介绍)</h2><p><strong>1</strong>、事务添加到 <strong>JavaEE</strong> 三层结构里面 <strong>Service</strong> 层(业务逻辑层)</p><p><strong>2</strong>、在 <strong>Spring</strong> 进行事务管理操作</p><p>两种方式:</p><ul><li>编程式事务管理</li><li>声明式事务管理(使用)<ul><li>基于注解方式(使用) </li><li>基于 xml 配置文件方式</li></ul></li></ul><p><strong>3</strong>、在 <strong>Spring</strong> 进行声明式事务管理，底层使用 <strong>AOP</strong> 原理</p><p><strong>4</strong>、<strong>Spring</strong> 事务管理 <strong>API</strong></p><p> (1)提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0mf60og0yj20q10b1ju8.jpg"                      alt="image-20220325205145678"                ></p><h2 id="事务操作事务操作-注解声明式事务管理"><a href="#事务操作事务操作-注解声明式事务管理" class="headerlink" title="事务操作事务操作(注解声明式事务管理)"></a>事务操作事务操作(注解声明式事务管理)</h2><p><strong>1</strong>、在 <strong>spring</strong> 配置文件配置事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建事务管理器--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line"><span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、在 <strong>spring</strong> 配置文件，开启事务注解</p><p> （1）在 spring 配置文件引入名称空间 tx</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）开启事务注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3</strong>、在 <strong>service</strong> 类上面(或者 <strong>service</strong> 类里面方法上面)添加事务注解</p><p>（1）@Transactional，这个注解添加到类上面，也可以添加方法上面</p><p>（2）如果把这个注解添加类上面，这个类里面所有的方法都添加事务 </p><p>（3）如果把这个注解添加方法上面，为这个方法添加事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br></pre></td></tr></table></figure><h2 id="事务相关参数"><a href="#事务相关参数" class="headerlink" title="事务相关参数"></a>事务相关参数</h2><blockquote><p>在 <strong>service</strong> 类上面添加注解**@Transactional**，在这个注解里面可以配置事务相关参数</p><p>@Transactional(propagation = Propagation.REQUIRED)</p></blockquote><h3 id="propagation（事务传播行为）"><a href="#propagation（事务传播行为）" class="headerlink" title="propagation（事务传播行为）"></a>propagation（事务传播行为）</h3><p>（1）<strong>多</strong>事务方法直接进行调用，这个过程中事务 是如何进行管理的</p><blockquote><p>事务方法：对数据库表中的数据进行变化（增删改）的操作</p><p>传播行为：多事务方法之间进行调用操作的行为</p></blockquote><p>事务之间的传播行为可以由传播属性指定，Spring定义了7种传播行为：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0mddgue0sj20pn0ewwhm.jpg"                      alt="image-20220325194944109"                ></p><h3 id="isolation（事务隔离级别）"><a href="#isolation（事务隔离级别）" class="headerlink" title="isolation（事务隔离级别）"></a>isolation（事务隔离级别）</h3><p>（1）在并发过程中可能会产生一些问题，隔离级别就是用来解决这些问题的这么一个事务特性，也即多事务操作之间不会产生不良影响。不考虑隔离性会产生很多问题。</p><p>（2）三个读问题：脏读、不可重复读、虚（幻）读</p><ul><li><p>脏读：一个未提交的事务读取到另一个未提交事务<strong>变化中</strong>的数据</p><blockquote><p>举个例子，东方不败读取到岳不群修改后的Lucy的工资“60000”后，岳不群的事务B又进行了回滚，将Lucy的工资还原到了5000，这明显与东方不败读取到的数据（60000）不符，产生错误！</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0mdlqp4l8j20pj09oaap.jpg"                      alt="image-20220325195741525"                ></p></li><li><p>不可重复读：一个未提交的事务读取到了另一个事务修改的数据</p><blockquote><p>两人都对Lucy的工资进行操作便都开启了事务，起先两个人都读取到了Lucy的原始工资“5000”，后面岳不群眼疾手快，啪一下把5000改成了900并迅速提交，而这个900又被东方不败读到，致使原先读取的数据丢失的这么一种现象。</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0me0a3k1fj20pn091q3i.jpg"                      alt="2022-03-25.200407"                ></p></li><li><p>虚读（幻读）：一个未提交的事务读取另一个事务添加的数据，过程跟上一个相似。</p></li></ul><p>（3）通过设置事务隔离性，来解决读问题</p><blockquote><p>@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)</p><p>MySQL中默认的隔离级别就是可重复读</p></blockquote><table><thead><tr><th align="center"></th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">READ UNCOMMITTED（读未提取）</td><td align="center">有</td><td align="center">有</td><td align="center">有</td></tr><tr><td align="center">READ COMMITTED（读已提取）</td><td align="center">无</td><td align="center">有</td><td align="center">有</td></tr><tr><td align="center">REPEATABLE READ（可重复读）</td><td align="center">无</td><td align="center">无</td><td align="center">有</td></tr><tr><td align="center">SERIALIZABLE（串行化）</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr></tbody></table><h3 id="timeout（超时时间）"><a href="#timeout（超时时间）" class="headerlink" title="timeout（超时时间）"></a>timeout（超时时间）</h3><blockquote><p>参数设置写法同上</p></blockquote><p>（1）事务需要在一定时间内进行提交，如果不提交进行回滚；</p><p> （2）默认值是 -1 （即不超时），设置时间以秒单位进行计算。</p><h3 id="readOnly（是否只读）"><a href="#readOnly（是否只读）" class="headerlink" title="readOnly（是否只读）"></a>readOnly（是否只读）</h3><p>（1）读:查询操作，写:添加修改删除操作；</p><p>（2）readOnly 默认值 false，表示可以查询，也可以添加修改删除操作 ；</p><p>（3）设置 readOnly 值是 true，设置成 true 之后，<u>只能</u>查询。</p><h3 id="rollbackFor（回滚）"><a href="#rollbackFor（回滚）" class="headerlink" title="rollbackFor（回滚）"></a>rollbackFor（回滚）</h3><blockquote><p>写法：参数 = 异常类</p></blockquote><p>(1)设置出现哪些异常进行事务回滚</p><h3 id="noRollbackFor（不回滚）"><a href="#noRollbackFor（不回滚）" class="headerlink" title="noRollbackFor（不回滚）"></a>noRollbackFor（不回滚）</h3><blockquote><p>写法同上</p></blockquote><p>(1)设置出现哪些异常不进行事务回滚</p><h2 id="事务操作-XML-声明式事务管理"><a href="#事务操作-XML-声明式事务管理" class="headerlink" title="事务操作(XML 声明式事务管理)"></a>事务操作(<strong>XML</strong> 声明式事务管理)</h2><p><strong>1</strong>、在 <strong>spring</strong> 配置文件中进行配置</p><p>第一步 配置事务管理器 </p><p>第二步 配置通知</p><p>第三步 配置切入点和切面</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0mfluleorj20ov0l5q6a.jpg"                      alt="image-20220325210658289"                ></p><h2 id="事务操作-完全注解声明式事务管理"><a href="#事务操作-完全注解声明式事务管理" class="headerlink" title="事务操作(完全注解声明式事务管理)"></a>事务操作(完全注解声明式事务管理)</h2><p><strong>1</strong>、创建配置类，使用配置类替代 <strong>xml</strong> 配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu&quot;)</span> <span class="comment">//组件扫描 </span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建数据库连接池</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">getDruidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">dataSource.setUrl(<span class="string">&quot;jdbc:mysql:///user_db&quot;</span>);</span><br><span class="line">dataSource.setUsername(<span class="string">&quot;root&quot;</span>); dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//创建 JdbcTemplate 对象</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123; </span><br><span class="line"> <span class="comment">//到 ioc 容器中根据类型找到 dataSource</span></span><br><span class="line"> JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line"> <span class="comment">//注入 dataSource </span></span><br><span class="line"> jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">  <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建事务管理器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">DataSourceTransactionManager transactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">transactionManager.setDataSource(dataSource);</span><br><span class="line">  <span class="keyword">return</span> transactionManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;事务是数据库操作最基本单元，逻辑上的一组操作。要么都成功，如果有一个失败所有操作都失败。&lt;/p&gt;
&lt;h2 id=&quot;事务四个特性&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Spring" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/Spring/"/>
    
    
    <category term="Spring" scheme="https://www.lzp.zone/tags/Spring/"/>
    
    <category term="事务" scheme="https://www.lzp.zone/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring常用接口、常用类</title>
    <link href="https://www.lzp.zone/2022/03/25/Spring%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    <id>https://www.lzp.zone/2022/03/25/Spring%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%B8%B8%E7%94%A8%E7%B1%BB/</id>
    <published>2022-03-25T11:17:32.000Z</published>
    <updated>2022-03-25T11:28:19.630Z</updated>
    
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Spring" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/Spring/"/>
    
    
    <category term="Spring" scheme="https://www.lzp.zone/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>算法智力题</title>
    <link href="https://www.lzp.zone/2022/03/24/%E7%AE%97%E6%B3%95%E6%99%BA%E5%8A%9B%E9%A2%98/"/>
    <id>https://www.lzp.zone/2022/03/24/%E7%AE%97%E6%B3%95%E6%99%BA%E5%8A%9B%E9%A2%98/</id>
    <published>2022-03-24T15:28:30.000Z</published>
    <updated>2022-03-24T15:42:20.616Z</updated>
    
    <content type="html"><![CDATA[<p>原文请参见<a class="link"   href="https://www.nowcoder.com/discuss/807456" >Li-Xiao-Hu的博客<i class="fas fa-external-link-alt"></i></a></p><p>[toc]</p><h2 id="二进制问题"><a href="#二进制问题" class="headerlink" title="二进制问题"></a>二进制问题</h2><h3 id="毒药问题"><a href="#毒药问题" class="headerlink" title="毒药问题"></a>毒药问题</h3><blockquote><p>问题：有1000个一模一样的瓶子，其中有999瓶是普通的水，有1瓶是毒药。任何喝下毒药的生命都会在一星期之后死亡。现在你只有10只小白鼠和1个星期的时间，如何检验出哪个瓶子有毒药？ </p></blockquote><p>首先一共有1000瓶，2的10次方是1024，刚好大于1000， 也就是说，1000瓶药品可以使用10位二进制数就可以表示。 </p><p>从第一个开始： </p><ul><li>第一瓶 ： 00 0000 0001 </li><li>第二瓶 ： 00 0000 0010 </li><li>第三瓶 ： 00 0000 0011 </li><li>…… </li><li>第999瓶： 11 1111 0010 </li><li>第1000瓶：11 1111 0011 </li></ul><p>需要十只老鼠，如果按顺序编号，ABCDEFGHIJ分别代表从低位到高位每一个位。 每只老鼠对应一个二进制位，如果该位上的数字为1，则给老鼠喝瓶里的药。 观察，若死亡的老鼠编号为：ACFGJ，一共死去五只老鼠，则对应的编号为 10 0110 0101， 则有毒的药品为该编号的药品，转为十进制数为：613号。 </p><h3 id="分金块问题"><a href="#分金块问题" class="headerlink" title="分金块问题"></a>分金块问题</h3><blockquote><p>问题：工人为老板打工，工作七天可以获得一块金子，工人每天可以分得一点金子，老板必须每天发金子，不能多给，也不能少给，把这个金子切两刀，就可以每天给工人发工资，请问怎么切？ </p></blockquote><p>切两刀将金子分成三份，1/7、2/7、4/7； </p><ul><li>工作第一天 把1/7分给工人； </li><li>工作第二天 把2/7分给工人，并要回1/7那块金子，工人有2/7的金子； </li><li>工作第三天 把1/7给工人 工人有3/7金子； </li><li>工作第四天 把前两块金子要回，给工人4/7的金子 工人有4/7的金子； </li><li>工作第五天 把1/7分给工人 工人有5/7的金子； </li><li>工作第六天 把2/7分给工人，并要回1/7那块金子，工人有6/7的金子； </li><li>工作第七天 把1/7给工人 工人有完整的金子； </li></ul><p><strong>扩展：如何给工人发15天的工资？把金块分成1/15、2/15、4/15、8/15。</strong></p><h2 id="先手必胜问题"><a href="#先手必胜问题" class="headerlink" title="先手必胜问题"></a>先手必胜问题</h2><h3 id="抢-30的必胜策略"><a href="#抢-30的必胜策略" class="headerlink" title="抢 30的必胜策略"></a>抢 30的必胜策略</h3><blockquote><p>问题：抢 30 是双人游戏，游戏规则是：第一个人喊“ 1 ”或“ 2 ”，第二个人要接着往下喊一个或两个数，然后再轮到第一个人。两人轮流进行下去，最后喊 30 的人获胜，问喊数字的最佳策略。 </p></blockquote><ul><li>尽量喊3的倍数； </li></ul><p>解析： 倒着看，其实，喊 27 时，就决定胜负了。 </p><p>假设 A 喊了 27，B只能喊 28 或 29 ， 下个回合，A 一定可以喊30。也就是说，喊 27 者必胜。 </p><p>再倒着看，其实喊 24 时，就定胜负了。假设 A 喊了 24 ，B 只能喊 25 或 26 ， 下个回合 A 一定能喊 27 。 </p><p>由于喊 27 者必胜，因此喊 24 者也必胜。 </p><p>同理可以推出：喊 3 的倍数者必胜。 </p><p>然后就会发现，这个游戏，谁先喊，谁一定输 </p><h3 id="100本书，每次能够拿1-5本，怎么拿能保证最后一次是你拿？"><a href="#100本书，每次能够拿1-5本，怎么拿能保证最后一次是你拿？" class="headerlink" title="100本书，每次能够拿1~5本，怎么拿能保证最后一次是你拿？"></a>100本书，每次能够拿1~5本，怎么拿能保证最后一次是你拿？</h3><p>如果最后一次是我拿，那么上回合最少剩下6本； </p><p>只要保持每个回合结束后都剩下6的倍数，且在这个回合中我拿的书和对方拿的书加起来为6本； </p><p>第一次我必须先手拿4本(100 % 6 = 4)，这不算在第一回合内。 </p><h3 id="轮流拿石子"><a href="#轮流拿石子" class="headerlink" title="轮流拿石子"></a>轮流拿石子</h3><blockquote><p>问题1：一共有N颗石子（或者其他乱七八糟的东西），每次最多取M颗最少取1颗，A，B轮流取，谁最后会获胜？（假设他们每次都取最优解）。 </p></blockquote><p>答案：简单的巴什博奕： <a class="link"   href="https://www.cnblogs.com/StrayWolf/p/5396427.html" >https://www.cnblogs.com/StrayWolf/p/5396427.html<i class="fas fa-external-link-alt"></i></a></p><blockquote><p>问题2：有若干堆石子，每堆石子的数量是有限的，二个人依次从这些石子堆中拿取任意的石子，至少一个（不能不取），最后一个拿光石子的人胜利。 </p></blockquote><p>答案：较复杂的尼姆博弈: <a class="link"   href="https://blog.csdn.net/BBHHTT/article/details/80199541" >https://blog.csdn.net/BBHHTT/article/details/80199541<i class="fas fa-external-link-alt"></i></a></p><h2 id="推理题"><a href="#推理题" class="headerlink" title="推理题"></a>推理题</h2><h3 id="掰巧克力问题"><a href="#掰巧克力问题" class="headerlink" title="掰巧克力问题"></a>掰巧克力问题</h3><blockquote><p>问题：一块N * M大小的巧克力，每次掰一块的一行或一列，全部掰成 1 * 1 大小的巧克力需要掰多少次？ </p></blockquote><ul><li><strong>N * M - 1次；</strong></li></ul><p>不管怎么掰，每次只能把一个大块掰成两个小块，即每次掰只能增加1块巧克力； 那么将1块巧克力掰成N * M块小巧克力就需要掰N * M - 1次。 </p><h3 id="辩论赛问题"><a href="#辩论赛问题" class="headerlink" title="辩论赛问题"></a>辩论赛问题</h3><blockquote><p>问题：1000个人参加辩论赛，1对1进行辩论，淘汰输掉的一方，问需要安排多少场比赛才能角出冠军？ </p></blockquote><p>每场辩论赛只能淘汰一个人，要淘汰999个人则需要安排999场比赛。 </p><h3 id="在24小时里面时针分针秒针可以重合几次"><a href="#在24小时里面时针分针秒针可以重合几次" class="headerlink" title="在24小时里面时针分针秒针可以重合几次"></a>在24小时里面时针分针秒针可以重合几次</h3><p>24小时中时针走2圈，而分针走24圈，时针和分针重合24-2=22次， 而只要时针和分针重合，秒针一定有机会重合，所以总共重合22次 </p><h3 id="N只蚂蚁走树枝，问总距离或者总时间"><a href="#N只蚂蚁走树枝，问总距离或者总时间" class="headerlink" title="N只蚂蚁走树枝，问总距离或者总时间"></a>N只蚂蚁走树枝，问总距离或者总时间</h3><blockquote><p>问题：放N只蚂蚁在一条长度为M树枝上，蚂蚁与蚂蚁之间碰到就各自往反方向走，问总距离或者时间为多少？ </p></blockquote><p>参考回答：这个其实就一个诀窍：蚂蚁相碰就往反方向走，可以直接看做没有发生任何事：大家都相当于独立的，A蚂蚁与B蚂蚁相碰后你可以看做没有发生这次碰撞，这样无论是求时间还是距离都很简单了。 </p><h3 id="旅馆的1元钱问题"><a href="#旅馆的1元钱问题" class="headerlink" title="旅馆的1元钱问题"></a>旅馆的1元钱问题</h3><blockquote><p>问题：有三个人去住旅馆，住三间房，每一间房10元，于是他们一共付给老板30，第二天，老板觉得三间房只需要25元就够了于是叫小弟退回5给三位客人，谁知小弟贪心,只退回每人1，自己偷偷拿了2，这样一来便等于那三位客人每人各花了九元，于是三个人一共花了27，再加上小弟独吞了不2，总共是29。可是当初他们三个人一共付出30那么还有$1呢？ </p></blockquote><p>他们所消费的27元里已经包括小弟贪污的2元了，再加退还的3元=30元； 这30元现在的分布是：老板拿25元，伙计拿2元，三人各拿1元，正好！ </p><h2 id="概率问题"><a href="#概率问题" class="headerlink" title="概率问题"></a>概率问题</h2><h3 id="家里有两个孩子，一个是女孩，另一个也是女孩的概率是多少？"><a href="#家里有两个孩子，一个是女孩，另一个也是女孩的概率是多少？" class="headerlink" title="家里有两个孩子，一个是女孩，另一个也是女孩的概率是多少？"></a>家里有两个孩子，一个是女孩，另一个也是女孩的概率是多少？</h3><blockquote><p>1/3 </p></blockquote><p>样本空间为（男男）（女女）（男女）（女男） </p><p>A＝（已知其中一个是女孩）＝（女女）（男女）（女男） </p><p>B＝（另一个也是女孩）＝（女女） </p><p>于是P（B／A）＝P（AB）／P（A）＝（1／4）／（3／4）＝1／3 </p><h3 id="一条绳子砍两刀，能构成一个三角形的概率？"><a href="#一条绳子砍两刀，能构成一个三角形的概率？" class="headerlink" title="一条绳子砍两刀，能构成一个三角形的概率？"></a>一条绳子砍两刀，能构成一个三角形的概率？</h3><p>设绳子总长为L，分成三段为：x，y，L - x - y； 其中x &gt; 0，y &gt; 0， L - x - y &gt; 0，取值范围如图中蓝***域所示； </p><p>又因为任意两边之和要大于第三边，故有如下条件： x + y &gt; L - x - y =&gt; y &gt; -x + L / 2； x + (L - x - y) &gt; y =&gt; y &lt; L / 2; y + (L - x - y) &gt; x =&gt; x &lt; L / 2; </p><p>该区域为图中绿<em><strong>域，占蓝</strong></em>域的 <strong>四分之一</strong>； </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0le4smjf1j20pg0ii74t.jpg"                      alt="img"                > </p><h3 id="一个圆上随机画两条弦，求相交的概率？"><a href="#一个圆上随机画两条弦，求相交的概率？" class="headerlink" title="一个圆上随机画两条弦，求相交的概率？"></a>一个圆上随机画两条弦，求相交的概率？</h3><p>四个点确定两条线，在一个圆上取四个点； 四个点画两条线有三种情况，其中只有一种情况是相交的，故相交概率为 <strong>三分之一；</strong> </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0le4qcw1uj20pd09rwfe.jpg"                      alt="img"                ></p><h3 id="犯人猜颜色"><a href="#犯人猜颜色" class="headerlink" title="犯人猜颜色"></a>犯人猜颜色</h3><blockquote><p>问题：一百个犯人站成一纵列，每人头上随机带上黑色或白色的帽子，各人不知道自己帽子的颜色，但是能看见自己前面所有人帽子的颜色．然后从最后一个犯人开始，每人只能用同一种声调和音量说一个字：”黑”或”白”，如果说中了自己帽子的颜色，就存活，说错了就拉出去斩了，说的答案所有犯人都能听见，是否说对，其他犯人不知道，在这之前，所有犯人可以聚在一起商量策略，问如果犯人都足够聪明而且反应足够快，100个人最大存活率是多少？</p></blockquote><p>1、最后一个人如果看到奇数顶黑帽子报“黑”否则报“白”，他可能死 </p><p>2、其他人记住这个值（实际是黑帽奇偶数），在此之后当再听到黑时，黑帽数量减一 </p><p>3、从倒数第二人开始，就有两个信息：记住的值与看到的值，相同报“白”，不同报“黑” </p><p><strong>99人能100%存活，1人50%能活</strong></p><h3 id="火枪手决斗，谁活下来的概率大？"><a href="#火枪手决斗，谁活下来的概率大？" class="headerlink" title="火枪手决斗，谁活下来的概率大？"></a>火枪手决斗，谁活下来的概率大？</h3><blockquote><p>问题：彼此痛恨的甲、乙、丙三个枪手准备决斗。甲枪法最好，十发八中；乙枪法次之，十发六中；丙枪法最差，十发四中。如果三人同时开枪，并且每人每轮只发一枪；那么枪战后，谁活下来的机会大一些？ </p></blockquote><p>参考回答： 一般人认为甲的枪法好，活下来的可能性大一些。但合乎推理的结论是，<strong>枪法最糟糕的丙活下来的几率最大；</strong></p><p>那么我们先来分析一下各个枪手的策略：</p><p>如同田忌赛马一般，枪手甲一定要对枪手乙先。因为乙对甲的威胁要比丙对甲的威胁更大，甲应该首先干掉乙，这是甲的最佳策略。</p><p>同样的道理，枪手乙的最佳策略是第一枪瞄准甲。乙一旦将甲干掉，乙和丙进行对决，乙胜算的概率自然大很多。</p><p>枪手丙的最佳策略也是先对甲。乙的枪法毕竟比甲差一些，丙先把甲干掉再与乙进行对决，丙的存活概率还是要高一些。</p><p>我们根据分析来计算一下三个枪手在上述情况下的存活几率：</p><p>第一轮：甲射乙，乙射甲，丙射甲。</p><ul><li>甲的活率为24%（40% X 60%） </li><li>乙的活率为20%(100% - 80%) </li><li>丙的活率为100%（无人射丙） </li></ul><p>由于丙100％存活率，因此根据上轮甲乙存活的情况来计算三人第二轮的存活几率：</p><p>情况1：甲活乙死（24% X 80% = 19.2%） 甲射丙，丙射甲：甲的活率为60%，丙的活率为20%。</p><p>情况2：乙活甲死（20% X 76% = 15.2%） 乙射丙，丙射乙：乙的活率为60%，丙的活率为40%。</p><p>情况3：甲乙同活（24% X 20% = 4.8%） 重复第一轮。</p><p>情况4：甲乙同死（76% X 80% = 60.8%） 枪战结束。</p><p>据此来计算三人活率：</p><ul><li>甲的活率为(19.2% X 60%) + (4.8% X 24%) = 12.672% </li><li>乙的活率为(15.2% X 60%) + (4.8% X 20%) = 10.08% </li><li>丙的活率为(19.2% X 20%) + (15.2% X 40%) + (4.8% X 100%) + (60.8% X 100%) = 75.52% </li></ul><p><strong>通过对两轮枪战的详细概率计算，我们发现枪法最差的丙存活的几率最大，枪法较好的甲和乙的存活几率却远低于丙的存活几率。</strong></p><h3 id="100个奴隶猜帽子颜色"><a href="#100个奴隶猜帽子颜色" class="headerlink" title="100个奴隶猜帽子颜色"></a>100个奴隶猜帽子颜色</h3><blockquote><p>问题：一百个奴隶站成一纵列，每人头上随机带上黑色或白色的帽子，各人不知道自己帽子的颜色，但是能看见自己前面所有人帽子的颜色． 然后从最后一个奴隶开始，每人只能用同一种声调和音量说一个字：”黑”或”白”， 如果说中了自己帽子的颜色，就存活，说错了就拉出去斩了，说的参考回答所有奴隶都能听见。 是否说对，其他奴隶不知道。 在这之前，所有奴隶可以聚在一起商量策略，问如果奴隶都足够聪明而且反应足够快，100个人最大存活率是多少？ </p></blockquote><p>1、最后一个人如果看到奇数顶黑帽子报“黑”否则报“白”，他可能死 </p><p>2、其他人记住这个值（实际是黑帽奇偶数），在此之后当再听到黑时，黑帽数量减一 </p><p>3、从倒数第二人开始，就有两个信息：记住的值与看到的值，相同报“白”，不同报“黑” 99人能100%存活，1人50%能活 </p><p>另外，此题还有变种：每个奴隶只能看见前面一个人帽子颜色又能最多存活多少人？ 参考回答：增加限制条件后，上面的方法就失效了， 此时只能约定偶数位奴隶说他前一个人的帽子颜色， 奇数奴隶获取信息100%存活，偶数奴隶50几率存活。 </p><h2 id="水桶问题"><a href="#水桶问题" class="headerlink" title="水桶问题"></a>水桶问题</h2><h3 id="水资源无限，3L和5L水桶各一个，怎样取4L的水？"><a href="#水资源无限，3L和5L水桶各一个，怎样取4L的水？" class="headerlink" title="水资源无限，3L和5L水桶各一个，怎样取4L的水？"></a>水资源无限，3L和5L水桶各一个，怎样取4L的水？</h3><ul><li>初始时0，5 </li><li>然后3，2 </li><li>然后0，2 </li><li>然后2，0 </li><li>然后2，5 </li><li>然后1，4 </li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0le4omurxj20u00w1gnv.jpg"                      alt="img"                > </p><h3 id="水资源无限，5L和6L水桶各一个，怎样取3L的水？"><a href="#水资源无限，5L和6L水桶各一个，怎样取3L的水？" class="headerlink" title="水资源无限，5L和6L水桶各一个，怎样取3L的水？"></a>水资源无限，5L和6L水桶各一个，怎样取3L的水？</h3><ul><li>step 1 , 6L水桶装满水倒入5L水桶，余下1L水 </li><li>step 2 , 5L水桶倒空，将6L水桶中剩余的1L水倒入5L水桶 </li><li>step 3 , 6L水桶再次装满水倒入5L水桶，余下2L水 </li><li>step 4 , 5L水桶倒空， 将6L水桶中剩余2L水倒入5L水桶 </li><li>step 5 , 6L水桶再次装满水倒入5L水桶，余下3L水 </li></ul><h3 id="一个装了10L水的桶，一个7L的空桶，一个3L的空桶，怎样变成2个5L？"><a href="#一个装了10L水的桶，一个7L的空桶，一个3L的空桶，怎样变成2个5L？" class="headerlink" title="一个装了10L水的桶，一个7L的空桶，一个3L的空桶，怎样变成2个5L？"></a>一个装了10L水的桶，一个7L的空桶，一个3L的空桶，怎样变成2个5L？</h3><ul><li>初始时为10，0，0； </li><li>第二步7，0，3； </li><li>然后7，3，0； </li><li>然后4，3，3； </li><li>然后4，6，0； </li><li>然后1，6，3； </li><li>然后1，7，2； </li><li>然后8，0，2； </li><li>然后8，2，0； </li><li>然后5，2，3； </li><li>然后5，5，0； </li></ul><h3 id="舀酒问题：只有两个舀酒的勺子，分别能舀7两和11两酒，如何舀出2两酒？"><a href="#舀酒问题：只有两个舀酒的勺子，分别能舀7两和11两酒，如何舀出2两酒？" class="headerlink" title="舀酒问题：只有两个舀酒的勺子，分别能舀7两和11两酒，如何舀出2两酒？"></a>舀酒问题：只有两个舀酒的勺子，分别能舀7两和11两酒，如何舀出2两酒？</h3><blockquote><p>问题：据说有人给酒肆的老板娘出了一个难题：此人明明知道店里只有两个舀酒的勺子，分别能舀7两和11两酒，却硬要老板娘卖给他2两酒。聪明的老板娘毫不含糊，用这两个勺子在酒缸里舀酒，并倒来倒去，居然量出了2两酒，聪明的你能做到吗？ </p></blockquote><p>思路：大勺子装满酒,再倒满小勺,于是大勺子还有4两,倒出小勺的酒,把大勺的4两倒入小勺中,再次在大勺中装满酒,大小勺加起来就是15两,把大勺中的酒倒入小勺中,使小勺装满,于是大勺中还有8两,倒掉小勺中的酒,再次把大勺中的酒倒入小勺中,使小勺装满,于是大勺中还有1两.重复以上动作一次,就可以得到2两酒 </p><ul><li>初始0，11 </li><li>然后7，4 </li><li>然后0，4 </li><li>然后4，0 </li><li>然后4，11 </li><li>然后7，8 </li><li>然后0，8 </li><li>然后7，1 </li><li>然后0，1 </li><li>然后1，11 </li><li>然后7，5 </li><li>然后0，5 </li><li>然后5，0 </li><li>然后5，11 </li><li>然后7，9 </li><li>然后0，9 </li><li>然后7，2 </li></ul><h2 id="计时问题"><a href="#计时问题" class="headerlink" title="计时问题"></a>计时问题</h2><h3 id="有一个能计时6分钟的小沙漏和一个能计时8分钟的大沙漏，如何计时10分钟？"><a href="#有一个能计时6分钟的小沙漏和一个能计时8分钟的大沙漏，如何计时10分钟？" class="headerlink" title="有一个能计时6分钟的小沙漏和一个能计时8分钟的大沙漏，如何计时10分钟？"></a>有一个能计时6分钟的小沙漏和一个能计时8分钟的大沙漏，如何计时10分钟？</h3><ul><li>两个沙漏同时倒置开始计时，等小沙漏漏完，大沙漏还剩2分钟，这时倒置小沙漏继续计时； </li><li>大沙漏漏完小沙漏还剩4分钟，再把大沙漏倒置继续计时； </li><li>小沙漏漏完大沙漏还剩4分钟，这时准备工作已经完毕； </li><li>等待大沙漏漏完（4分钟）+ 小沙漏（6分钟） = 10分钟。 </li></ul><h3 id="烧一根绳子需要一个小时，现有若干条相同的绳子，问如何计时15分钟？"><a href="#烧一根绳子需要一个小时，现有若干条相同的绳子，问如何计时15分钟？" class="headerlink" title="烧一根绳子需要一个小时，现有若干条相同的绳子，问如何计时15分钟？"></a>烧一根绳子需要一个小时，现有若干条相同的绳子，问如何计时15分钟？</h3><ul><li>点燃绳子A的一头，同时点燃绳子B的两头； 绳子B烧完的时候绳子A还剩一半，此时点燃绳子A的另一头开始计时； </li><li>15分钟绳子A烧完。 </li></ul><h3 id="蜡烛燃烧问题：两根蜡烛，燃烧完都需要1小时，怎么确定15分钟是多久？"><a href="#蜡烛燃烧问题：两根蜡烛，燃烧完都需要1小时，怎么确定15分钟是多久？" class="headerlink" title="蜡烛燃烧问题：两根蜡烛，燃烧完都需要1小时，怎么确定15分钟是多久？"></a>蜡烛燃烧问题：两根蜡烛，燃烧完都需要1小时，怎么确定15分钟是多久？</h3><ul><li>点燃第一根的一端，第二根的两端。 </li><li>第二根烧完代表半小时后，点燃第一根另一端，烧完代表15分钟。 </li></ul><h2 id="赛马问题"><a href="#赛马问题" class="headerlink" title="赛马问题"></a>赛马问题</h2><h3 id="25匹马5条跑道找最快的3匹马，需要跑几次？"><a href="#25匹马5条跑道找最快的3匹马，需要跑几次？" class="headerlink" title="25匹马5条跑道找最快的3匹马，需要跑几次？"></a>25匹马5条跑道找最快的3匹马，需要跑几次？</h3><p>参考回答：7 </p><ul><li>将25匹马分成ABCDE5组，假设每组的排名就是A1&gt;A2&gt;A3&gt;A4&gt;A5,用边相连，这里比赛5次 </li><li>第6次，每组的第一名进行比赛，可以找出最快的马，这里假设A1&gt;B1&gt;C1&gt;D1&gt;E1 D1，E1肯定进不了前3，直接排除掉 </li><li>第7次，B1 C1 A2 B2 A3比赛，可以找出第二，第三名 </li></ul><p>所以最少比赛需要7次； </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0le4rncggj20jq0gcaas.jpg"                      alt="img"                > </p><h3 id="64匹马8条跑道找最快的4匹马，需要跑几次？"><a href="#64匹马8条跑道找最快的4匹马，需要跑几次？" class="headerlink" title="64匹马8条跑道找最快的4匹马，需要跑几次？"></a>64匹马8条跑道找最快的4匹马，需要跑几次？</h3><blockquote><p>参考回答：11 </p></blockquote><p><strong>第一步：</strong>全部马分为8组，每组8匹，每组各跑一次，然后淘汰掉每组的后四名（需要比赛8场） </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0le4ptr00j20nd0ep3zp.jpg"                      alt="img"                > </p><p><strong>第二步：</strong>取每组第一名进行一次比赛，然后淘汰最后四名所在组的所有马，如下图（需要比赛1场） </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0le4qqj6uj20ob0evwfs.jpg"                      alt="img"                > </p><p>这个时候总冠军已经诞生，它就是A1，蓝域（它不需要比赛了）。 </p><p>而其他可能跑得最快的三匹马只可能是下图中的黄域了（A2,A3,A4,B1,B2,B3,C1,C2,D1，共9匹马） </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0le4s3hj9j20og0el3zq.jpg"                      alt="img"                > </p><p><strong>第三步：</strong>只要从上面的9匹马中找出跑得最快的三匹马就可以了，但是现在只要8个跑道，怎么办？ </p><p>那就随机选出8匹马进行一次比赛吧（需要比赛一场） </p><p><strong>第四步：</strong>上面比赛完，选出了前三名，但是9匹马中还有一匹马没跑呢，它可能是一个潜力股啊，那就和前三名比一比吧，这四匹马比一场，选出前三名。最后加上总冠军，跑得最快的四匹马诞生了！！！（需要一场比赛） </p><p><strong>最后，一共需要比赛的场次：8 + 1 + 1 + 1 = 11 场</strong></p><h3 id="25匹马5条跑道找最快的5匹马，需要跑几次？"><a href="#25匹马5条跑道找最快的5匹马，需要跑几次？" class="headerlink" title="25匹马5条跑道找最快的5匹马，需要跑几次？"></a>25匹马5条跑道找最快的5匹马，需要跑几次？</h3><blockquote><p>参考回答：最少8次最多9次 </p></blockquote><p>(1) 首先将25匹马分成5组，并分别进行5场比赛之后得到的名次排列如下：</p><p>A组： [A1 A2 A3 A4 A5]</p><p>B组： [B1 B2 B3 B4 B5]</p><p>C组： [C1 C2 C3 C4 C5]</p><p>D组： [D1 D2 D3 D4 D5]</p><p>E组： [E1 E2 E3 E4 E5]</p><p>其中，每个小组最快的马为[A1、B1、C1、D1、E1]。</p><p>(2) 将[A1、B1、C1、D1、E1]进行第6场，选出第1名的马，不妨设 A1&gt;B1&gt;C1&gt;D1&gt;E1. 此时第1名的马为A1。</p><p>(3) 将[A2、B1、C1、D1、E1]进行第7场，此时选择出来的必定是第2名的马，不妨假设为B1。因为这5匹马是除去A1之外每个小组当前最快的马。</p><p>(3) 进行第8场，选择[A2、B2、C1、D1、E1]角逐出第3名的马。</p><p>(4) 依次类推，第9，10场可以分别决出第4，5名的吗。</p><p>因此，依照这种竞标赛<a href="">排序</a>思想，需要10场比赛是一定可以取出前5名的。</p><p>仔细想一下，如果需要减少比赛场次，就一定需要在某一次比赛中同时决出2个名次，而且每一场比赛之后，有一些不可能进入前5名的马可以提前出局。</p><p>当然要做到这一点，就必须小心选择每一场比赛的马匹。我们在上面的方法基础上进一步思考这个问题，希望能够得到解决。</p><p>(1) 首先利用5场比赛角逐出每个小组的排名次序是绝对必要的。</p><p>(2) 第6场比赛选出第1名的马也是必不可少的。假如仍然是A1马(A1&gt;B1&gt;C1&gt;D1&gt;E1)。那么此时我们可以得到一个重要的结论：有一些马在前6场比赛之后就决定出局的命运了(下面粉色字体标志出局)。</p><p>A组： [A1 A2 A3 A4 A5]</p><p>B组： [B1 B2 B3 B4 B5 ]</p><p>C组： [C1 C2 C3 C4 C5 ]</p><p>D组： [D1 D2 D3 D4 D5 ]</p><p>E组： [E1 E2 E3 E4 E5 ]</p><p>(3) 第7场比赛是关键，能否同时决出第2，3名的马呢？我们首先做下分析：</p><p>在上面的方法中，第7场比赛[A2、B1、C1、D1、E1]是为了决定第2名的马。但是在第6场比赛中我们已经得到(B1&gt;C1&gt;D1&gt;E1)，试问？有B1在的比赛，C1、D1、E1还有可能争夺第2名吗？ 当然不可能，也就是说第2名只能在A2、B1中出现。实际上只需要2条跑道就可以决出第2名，剩下C1、D1、E1的3条跑道都只能用来凑热闹的吗？</p><p>能够优化的关键出来了，我们是否能够通过剩下的3个跑道来决出第3名呢？当然可以，我们来进一步分析第3名的情况？</p><p>● 如果A2&gt;B1(即第2名为A2)，那么根据第6场比赛中的(B1&gt;C1&gt;D1&gt;E1)。 可以断定第3名只能在A3和B1中产生。</p><p>● 如果B1&gt;A2(即第2名为B1)，那么可以断定的第3名只能在A2, B2,C1 中产生。</p><p>好了，结论也出来了，只要我们把[A2、B1、A3、B2、C1]作为第7场比赛的马，那么这场比赛的第2，3名一定是整个25匹马中的第2，3名。</p><p>我们在这里列举出第7场的2，3名次的所有可能情况：</p><p>① 第2名=A2，第3名=A3</p><p>② 第2名=A2，第3名=B1</p><p>③ 第2名=B1，第3名=A2</p><p>④ 第2名=B1，第3名=B2</p><p>⑤ 第2名=B1，第3名=C1</p><p>(4) 第8场比赛很复杂，我们要根据第7场的所有可能的比赛情况进行分析。</p><p>① 第2名=A2，第3名=A3。那么此种情况下第4名只能在A4和B1中产生。</p><p>● 如果第4名=A4，那么第5名只能在A5、B1中产生。</p><p>● 如果第4名=B1，那么第5名只能在A4、B2、C1中产生。</p><p>不管结果如何，此种情况下，第4、5名都可以在第8场比赛中决出。其中比赛马匹为[A4、A5、B1、B2、C1]</p><p>② 第2名=A2，第3名=B1。那么此种情况下第4名只能在A3、B2、C1中产生。</p><p>● 如果第4名=A3，那么第5名只能在A4、B2、C1中产生。</p><p>● 如果第4名=B2，那么第5名只能在A3、B3、C1中产生。</p><p>● 如果第4名=C1，那么第5名只能在A3、B2、C2、D1中产生。</p><p>那么，第4、5名需要在马匹[A3、B2、B3、C1、A4、C2、D1]七匹马中产生，则必须比赛两场才行，也就是到第9场角逐出全部的前5名。</p><p>③ 第2名=B1，第3名=A2。那么此种情况下第4名只能在A3、B2、C1中产生。</p><p>情况和②一样，必须角逐第9场</p><p>④ 第2名=B1，第3名=B2。 那么此种情况下第4名只能在A2、B3、C1中产生。</p><p>● 如果第4名=A2，那么第5名只能在A3、B3、C1中产生。</p><p>● 如果第4名=B3，那么第5名只能在A2、B4、C1中产生。</p><p>● 如果第4名=C1，那么第5名只能在A2、B3、C2、D1中产生。</p><p>那么，第4、5名需要在马匹[A2、B3、B4、C1、A3、C2、D1]七匹马中产 生，则必须比赛两场才行，也就是到第9场角逐出全部的前5名。</p><p>⑤ 第2名=B1，第3名=C1。那么此种情况下第4名只能在A2、B2、C2、D1中产生。</p><p>● 如果第4名=A2，那么第5名只能在A3、B2、C2、D1中产生。</p><p>● 如果第4名=B2，那么第5名只能在A2、B3、C2、D1中产生。</p><p>● 如果第4名=C2，那么第5名只能在A2、B2、C3、D1中产生。</p><p>● 如果第4名=D1，那么第5名只能在A2、B2、C2、D2、E2中产生。</p><p>那么，第4、5名需要在马匹[A2、B2、C2、D1、A3、B3、C3、D2、E1]九匹马中 产 生，因此也必须比赛两场，也就是到第9长决出胜负。</p><p><strong>总结：最好情况可以在第8场角逐出前5名，最差也可以在第9场搞定。</strong></p><h2 id="过河-过桥问题"><a href="#过河-过桥问题" class="headerlink" title="过河/过桥问题"></a>过河/过桥问题</h2><h3 id="三人三鬼过桥"><a href="#三人三鬼过桥" class="headerlink" title="三人三鬼过桥"></a>三人三鬼过桥</h3><blockquote><p>问题：有三个人跟三个鬼要过河,河上没桥只有条小船,然后船一次只能渡一个人和一个鬼,或者两个鬼或者两个人,无论在哪边岸上,只有是人比鬼少的情况下(如两鬼一人,三鬼两人,三鬼一人)人会被鬼吃,然而船又一定需要人或鬼操作才能航行(要有人或鬼划船),问,如何安全的把三人三鬼渡过河对岸? </p></blockquote><p>参考回答： </p><ul><li>先两鬼过去。在一鬼回来。对面有一鬼。这边有三人两鬼。 </li><li>再两鬼过去。在一鬼回来。对面有两鬼。这边有三人一鬼。 </li><li>再两人过去。一人一鬼回来。对面一人一鬼。这边两人两鬼。 </li><li>最后两人过去。一鬼回来。对面三人。这边三鬼。 </li><li>剩下的就三个鬼二个过去一个回来在接另外个就OK了。 </li></ul><h3 id="限时过桥问题"><a href="#限时过桥问题" class="headerlink" title="限时过桥问题"></a>限时过桥问题</h3><blockquote><p>问题：在一个夜晚，同时有4人需要过一桥，一次最多只能通过两个人，且只有一只手电筒，而且每人的速度不同。A，B，C，D需要时间分别为：1，2，5，10分钟。问：在17分钟内这四个人怎么过桥？ </p></blockquote><p>总共是17分钟 </p><ul><li>第一步：A、B过花时间2分钟。 </li><li>第二步：B回花时间2分钟。 </li><li>第三步：C、D过花时间10分钟。 </li><li>第四步：A回花时间1分钟。 </li><li>第五步：A、B再过花时间2分钟。 </li></ul><h2 id="最优解问题"><a href="#最优解问题" class="headerlink" title="最优解问题"></a>最优解问题</h2><h3 id="猴子搬香蕉"><a href="#猴子搬香蕉" class="headerlink" title="猴子搬香蕉"></a>猴子搬香蕉</h3><blockquote><p>问题：一个小猴子边上有100根香蕉，它要走过50米才能到家，每次它最多搬50根香蕉，（多了就被压死了），它每走1米就要吃掉一根，请问它最多能把多少根香蕉搬到家里。 </p><p>（提示：他可以把香蕉放下往返的走，但是必须保证它每走一米都能有香蕉吃。也可以走到n米时，放下一些香蕉，拿着n根香蕉走回去重新搬50根。） </p></blockquote><p><strong>答案：</strong> 这种试题通常有一个迷惑点，让人看不懂题目的意图。此题迷惑点在于：走一米吃一根香蕉，一共走50米，那不是把50根香蕉吃完了吗？如果要回去搬另外50根香蕉，则往回走的时候也要吃香蕉，这样每走一米需要吃掉三根香蕉，走50米岂不是需要150根香蕉？</p><p>其实不然，本题关键点在于：猴子搬箱子的过程其实分为两个阶段，第一阶段：来回搬，当香蕉数目大于50根时，猴子每搬一米需要吃掉三根香蕉。第二阶段：香蕉数《=50，直接搬回去。每走一米吃掉1根。</p><p>我们分析第一阶段：假如把100根香蕉分为两箱。一箱50根。</p><ul><li>第一步，把A箱搬一米，吃一根。 </li><li>第二步，往回走一米，吃一根。 </li><li>第三步，把B箱搬一米，吃一根。 </li></ul><p>这样，把所有香蕉搬走一米需要吃掉三根香蕉。</p><p>这样走到第几米的时候，香蕉数刚好小于50呢？ 100-(n*3)&lt;50 &amp;&amp; 100-(n-1*3)&gt;50</p><p>走到16米的时候，吃掉48根香蕉，剩52根香蕉。这步很有意思，它可以直接搬50往前走，也可以再来回搬一次，但结果都是一样的。到17米的时候，猴子还有49根香蕉。这时猴子就轻松啦。直接背着走就行。</p><p>第二阶段：走一米吃一根。</p><p>把剩下的50-17=33米走完。还剩49-33=16根香蕉。</p><h3 id="高楼扔鸡蛋"><a href="#高楼扔鸡蛋" class="headerlink" title="高楼扔鸡蛋"></a>高楼扔鸡蛋</h3><blockquote><p>问题：有2个鸡蛋，从100层楼上往下扔，以此来测试鸡蛋的硬度。比如鸡蛋在第9层没有摔碎，在第10层摔碎了，那么鸡蛋不会摔碎的临界点就是9层。如何用最少的尝试次数，测试出鸡蛋不会摔碎的临界点？ </p></blockquote><p>首先要说明的是这道题你要是一上来就说出正确答案，那说明你的智商不是超过160就是你做过这题。所以建议你循序渐进的回答，一上来就说最优解可能结果不会让你和面试官满意。</p><p><strong>1.暴力法</strong></p><p>举个栗子，最笨的测试方法，是什么样的呢？把其中一个鸡蛋，从第1层开始往下扔。如果在第1层没碎，换到第2层扔；如果在第2层没碎，换到第3层扔…….如果第59层没碎，换到第60层扔；如果第60层碎了，说明不会摔碎的临界点是第59层。</p><p>在最坏情况下，这个方法需要扔100次。</p><p><strong>2. 二分法</strong></p><p>采用类似于 <a class="link"   href="https://www.nowcoder.com/jump/super-jump/word?word=%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE" >二分查找<i class="fas fa-external-link-alt"></i></a> 的方法，把鸡蛋从一半楼层（50层）往下扔。</p><p>如果第一枚鸡蛋，在50层碎了，第二枚鸡蛋，就从第1层开始扔，一层一层增长，一直扔到第49层。</p><p>如果第一枚鸡蛋在50层没碎了，则继续使用二分法，在剩余楼层的一半（75层）往下扔……</p><p>这个方法在最坏情况下，需要尝试50次。</p><p><strong>3.均匀法</strong></p><p>如何让第一枚鸡蛋和第二枚鸡蛋的尝试次数，尽可能均衡呢？</p><p>很简单，做一个平方根运算，100的平方根是10。</p><p>因此，我们尝试每10层扔一次：第1次从10层扔，第2次从20层扔，第3次从30层…一直扔到100层。</p><p>这样的最好情况是在第10层碎掉，尝试次数为 1 + 9 = 10次。</p><p>最坏的情况是在第100层碎掉，尝试次数为 10 + 9 = 19次。</p><p>不过，这里有一个小小的优化点，我们可以从15层开始扔，接下来从25层、35层扔……一直到95层。</p><p>这样最坏情况是在第95层碎掉，尝试次数为 9 + 9 = 18次。</p><p>4.最优解法</p><p>最优解法是反向思考的经典：如果最优解法在最坏情况下需要扔X次，那第一次在第几层扔最好呢？</p><p>答案是：从X层扔</p><p>假设最优的尝试次数的x次，为什么第一次扔就要选择第x层呢？</p><p>这里的解释会有些烧脑，请小伙伴们坐稳扶好：</p><p><strong>假设第一次扔在第x+1层：</strong></p><p>如果第一个鸡蛋碎了，那么第二个鸡蛋只能从第1层开始一层一层扔，一直扔到第x层。</p><p>这样一来，我们总共尝试了x+1次，和假设尝试x次相悖。由此可见，第一次扔的楼层必须小于x+1层。</p><p><strong>假设第一次扔在第x-1层：</strong></p><p>如果第一个鸡蛋碎了，那么第二个鸡蛋只能从第1层开始一层一层扔，一直扔到第x-2层。</p><p>这样一来，我们总共尝试了x-2+1 = x-1次，虽然没有超出假设次数，但似乎有些过于保守。</p><p><strong>假设第一次扔在第x层：</strong></p><p>如果第一个鸡蛋碎了，那么第二个鸡蛋只能从第1层开始一层一层扔，一直扔到第x-1层。</p><p>这样一来，我们总共尝试了x-1+1 = x次，刚刚好没有超出假设次数。</p><p>因此，要想尽量楼层跨度大一些，又要保证不超过假设的尝试次数x，那么第一次扔鸡蛋的最优选择就是第x层。</p><p>那么算最坏情况，第二次你只剩下x-1次机会，按照上面的说法，你第二次尝试的位置必然是X+（X-1）；</p><p>以此类推我们可得：</p><p>x + (x-1) + (x-2) + … + 1 = 100</p><p>这个方程式不难理解：</p><p>左边的多项式是各次扔鸡蛋的楼层跨度之和。由于假设尝试x次，所以这个多项式共有x项。</p><p>右边是总的楼层数100。</p><p>下面我们来解这个方程：</p><p>x + (x-1) + (x-2) + … + 1 = 100 转化为 (x+1)*x/2 = 100</p><p>最终x向上取整，得到 x = 14</p><p>因此，最优解在最坏情况的尝试次数是14次，第一次扔鸡蛋的楼层也是14层。</p><p>最后，让我们把第一个鸡蛋没碎的情况下，所尝试的楼层数完整列举出来：</p><p>14，27， 39， 50， 60， 69， 77， 84， 90， 95， 99， 100</p><p>举个栗子验证下： </p><p>假如鸡蛋不会碎的临界点是65层， 那么第一个鸡蛋扔出的楼层是14，27，50，60，69。这时候啪的一声碎了。 第二个鸡蛋继续，从61层开始，61，62，63，64，65，66，啪的一声碎了。 因此得到不会碎的临界点65层，总尝试次数是 6 + 6 = 12 &lt; 14 。 </p><p><strong><a href="">leetcode</a>：</strong> <a class="link"   href="https://leetcode-cn.com/problems/egg-drop-with-2-eggs-and-n-floors/" >https://leetcode-cn.com/problems/egg-drop-with-2-eggs-and-n-floors/<i class="fas fa-external-link-alt"></i></a></p><h3 id="利用空瓶换饮料，最多喝几瓶"><a href="#利用空瓶换饮料，最多喝几瓶" class="headerlink" title="利用空瓶换饮料，最多喝几瓶"></a>利用空瓶换饮料，最多喝几瓶</h3><blockquote><p>问题：1000瓶饮料，3个空瓶子能够换1瓶饮料，问最多能喝几瓶？ </p></blockquote><p>第一种思路:</p><p>拿走3瓶，换回1瓶，相当于减少2瓶。但是最后剩下4瓶的时候例外，这时只能换1瓶。所以我们计算1000减2能减多少次，直到剩下4.（1000-4=996，996/2=498）所以1000减2能减498次直到剩下4瓶，最后剩下的4瓶还可以换一瓶，所以总共是1000+498+1=1499瓶。</p><p>第二种思路:</p><ul><li><p>1000瓶饮料，3个空瓶子能换1瓶饮料，最多可以喝几瓶？ </p></li><li><p>第一种思维：可以考虑成dp思路 </p></li><li><p>初始情况，3个瓶子时将发生一次交换，因此视为特殊情况 </p></li><li><p>之后每增加两个瓶子又可以再换一瓶 </p></li><li><p>即dp[i] = dp[i - 2] + (i - (i - 2)) + 1 </p></li><li><p>由dp[i - 2]可求得dp[i] </p></li><li><p>(i - (i - 2))，即为当前增加的2瓶饮料（写成这样便于理解） </p></li><li><p>1即为增加了2个空瓶，之后又可以换一瓶饮料 </p></li><li><p>简化为dp[i] = dp[i - 2] + 2 + 1 </p></li></ul><p><a href="#">复制代码</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public` `int` `method(``int` `n) &#123;``   ``// n为0/1/2的特殊情况省略了``   ``// 定义dp数组``   ``int``[] dp = ``new` `int``[n + 1];``   ``// 初始状态``   ``dp[0] = 0;``   ``dp[1] = 1;``   ``dp[2] = 2;``   ``for` `(``int` `i = 3; i &lt;= n; i++) &#123;``    ``dp[i] = dp[i - 2] + 2 + 1;``  ``&#125;``   ``return` `dp[n];`` ``&#125;</span><br></pre></td></tr></table></figure><ul><li><p>回归正题 </p></li><li><p>特殊情况：从上面的分析中，留下2个瓶子 </p></li><li><p>剩下998个瓶子相当于每消耗2个瓶子即可获得一瓶，即为499瓶 </p></li><li><p>最后剩下的2个瓶子无法再进行兑换，因此总共为1000 + 499 = 1499 </p></li><li><p>第二种思维：利用借瓶子的思想 </p></li><li><p>因为兑换一瓶饮料需要三个空瓶，这瓶饮料如果是找老板借来的，那么喝完后这个空瓶将会还给他，同时需要附赠给他另外两个空瓶，即每消耗手里两个空瓶就获得一瓶饮料 </p></li><li><p>但是值得注意的是，上面只是一种假设，实际情况老板是不会借给你的，因此我们至少需要保留2个空瓶，这样可以在998个瓶子剩下一个瓶子时，对其进行补足为3个空瓶，从而兑换一瓶新饮料 </p></li><li><p>此时使用998个瓶子进行上述的兑换，将获得499瓶饮料 </p></li><li><p>之前留下的两个瓶子正好无法兑换，最终获得饮料为1000 + 499 = 1499瓶 </p></li></ul><h2 id="数字问题"><a href="#数字问题" class="headerlink" title="数字问题"></a>数字问题</h2><h3 id="11-22-33-44问题"><a href="#11-22-33-44问题" class="headerlink" title="11-22-33-44问题"></a>11-22-33-44问题</h3><blockquote><p>问题：有8个数，11-22-33-44，将其排列，要求结果满足：两个1之间有一个数，两个2之间有两个数，两个3之间有三个数，两个4之间有四个数。问这个结果是多少？ </p></blockquote><p>答案：①4131-2432  ②2342-1314 </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0le4rbzduj20ko09xmxf.jpg"                      alt="img"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0le4pdq8dj20ns0ff0tl.jpg"                      alt="img"                > </p><h3 id="给定随机函数，生成别的随机数"><a href="#给定随机函数，生成别的随机数" class="headerlink" title="给定随机函数，生成别的随机数"></a>给定随机函数，生成别的随机数</h3><blockquote><p>问题：给定生成1到5的随机数Rand5()，如何得到生成1到7的随机数函数Rand7()？ </p></blockquote><p>思路 ：由大的生成小的容易，比如由Rand7()生成Rand5()，所以我们先构造一个大于7的随机数生成函数。 记住下面这个式子：</p><p><a href="#">复制代码</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RandNN= N( RandN()-1 ) + RandN() ;``// 生成1到N^2之间的随机数``可以看作是在数轴上撒豆子。N是跨度/步长，是RandN()生成的数的范围长度，``RandN()-1的目的是生成0到N-1的数，是跳数。后面+RandN()的目的是填满中间的空隙</span><br></pre></td></tr></table></figure><p>比如 Rand25= 5( Rand5()-1 ) + Rand5() 可以生成1到25之间的随机数。我们可以只要1到21（3*7）之间的数字，所以可以这么写</p><p><a href="#">复制代码</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int` `rand7()&#123;`` ``int` `x=INT_MAX;`` ``while``(x&gt;21)&#123;``  ``x=5*(rand5()-1)+rand5();`` ``&#125;`` ``return` `x%7+1;``&#125;</span><br></pre></td></tr></table></figure><h2 id="11-重量问题"><a href="#11-重量问题" class="headerlink" title="11. 重量问题"></a>11. 重量问题</h2><h3 id="乒乓球重量问题：8个乒乓球，其中一个重，有一个秤，问至少几次能够找出重的那个乒乓球"><a href="#乒乓球重量问题：8个乒乓球，其中一个重，有一个秤，问至少几次能够找出重的那个乒乓球" class="headerlink" title="乒乓球重量问题：8个乒乓球，其中一个重，有一个秤，问至少几次能够找出重的那个乒乓球"></a>乒乓球重量问题：8个乒乓球，其中一个重，有一个秤，问至少几次能够找出重的那个乒乓球</h3><blockquote><p>2次，分成3堆，3，3，2。 </p></blockquote><ul><li>①称3和3，如果一样重，代表重的在2。 </li><li>②称2个那一堆的。 </li></ul><p>或 </p><ul><li>①称3和3，不一样重，重的在3里面重的那堆。 </li><li>②3个里面随便取2个，一样重，第三个重，不一样重，重的那个就是。 </li></ul><h3 id="盐重量问题：有7克、2克砝码各一个，天平一只，如何只用这些物品五次内将140克的盐分成50、90克各一份？"><a href="#盐重量问题：有7克、2克砝码各一个，天平一只，如何只用这些物品五次内将140克的盐分成50、90克各一份？" class="headerlink" title="盐重量问题：有7克、2克砝码各一个，天平一只，如何只用这些物品五次内将140克的盐分成50、90克各一份？"></a>盐重量问题：有7克、2克砝码各一个，天平一只，如何只用这些物品五次内将140克的盐分成50、90克各一份？</h3><ul><li>第一次：先分成70和70 </li><li>第二次：通过7和2砝码将70分成9和61 </li><li>第三次：通过9克盐和2砝码将61分成50和11 </li></ul><h3 id="有一个天平，九个砝码，其中一个砝码比另八个要轻一些，问至少要用天平称几次才能将轻的那个找出来？"><a href="#有一个天平，九个砝码，其中一个砝码比另八个要轻一些，问至少要用天平称几次才能将轻的那个找出来？" class="headerlink" title="有一个天平，九个砝码，其中一个砝码比另八个要轻一些，问至少要用天平称几次才能将轻的那个找出来？"></a>有一个天平，九个砝码，其中一个砝码比另八个要轻一些，问至少要用天平称几次才能将轻的那个找出来？</h3><blockquote><p>需要称2次； </p></blockquote><p>天平一边放三个砝码，哪边轻就在哪边，一样重就在剩下的三个砝码中； </p><p>现在已经锁定了三个砝码，天平一边放一个，哪边轻是哪个，一样重就是剩下的那个； </p><h3 id="十组砝码每组十个，每个砝码都是10g重，但是现在其中有一组砝码每个都只有9g重，现有一个能显示克数的秤，最少称几次能找到轻的那组？"><a href="#十组砝码每组十个，每个砝码都是10g重，但是现在其中有一组砝码每个都只有9g重，现有一个能显示克数的秤，最少称几次能找到轻的那组？" class="headerlink" title="十组砝码每组十个，每个砝码都是10g重，但是现在其中有一组砝码每个都只有9g重，现有一个能显示克数的秤，最少称几次能找到轻的那组？"></a>十组砝码每组十个，每个砝码都是10g重，但是现在其中有一组砝码每个都只有9g重，现有一个能显示克数的秤，最少称几次能找到轻的那组？</h3><blockquote><p>称一次即可； </p></blockquote><p>将砝码分组编号1~10， 第1组拿1个砝码、第2组拿2个…第10组拿10个，全部放到秤上计算总克数X； Y = (1*10 + 2 * 10 + … + 10 * 10) - X = 550 - X，Y即为轻的那组的编号。 </p><h3 id="药丸问题：有20瓶药丸，其中19瓶装有1克-粒的药丸，余下一瓶装有1-1克-粒的药丸。给你一台称重精准的天平，怎么找出比较重的那瓶药丸？天平只能用一次；"><a href="#药丸问题：有20瓶药丸，其中19瓶装有1克-粒的药丸，余下一瓶装有1-1克-粒的药丸。给你一台称重精准的天平，怎么找出比较重的那瓶药丸？天平只能用一次；" class="headerlink" title="药丸问题：有20瓶药丸，其中19瓶装有1克/粒的药丸，余下一瓶装有1.1克/粒的药丸。给你一台称重精准的天平，怎么找出比较重的那瓶药丸？天平只能用一次；"></a>药丸问题：有20瓶药丸，其中19瓶装有1克/粒的药丸，余下一瓶装有1.1克/粒的药丸。给你一台称重精准的天平，怎么找出比较重的那瓶药丸？天平只能用一次；</h3><blockquote><p>从药瓶#1取出一粒药丸，从药瓶#2取出两粒，从药瓶#3取出三粒，依此类推。 </p><p>如果每粒药丸均重1克，则称得总重量为210克（1 + 2 + … + 20 = 20 * 21 / 2 = 210），“多出来的”重量必定来自每粒多0.1克的药丸。 </p><p>药瓶的编号可由算式(weight - 210) / 0.1 得出。因此，若这堆药丸称得重量为211.3克，则药瓶#13装有较重的药丸。 </p></blockquote><h3 id="药丸问题：你有四个装药丸的罐子，每个药丸都有一定的重量，被污染的药丸是没被污染的重量-1-只称量一次，如何判断哪个罐子的药被污染了？"><a href="#药丸问题：你有四个装药丸的罐子，每个药丸都有一定的重量，被污染的药丸是没被污染的重量-1-只称量一次，如何判断哪个罐子的药被污染了？" class="headerlink" title="药丸问题：你有四个装药丸的罐子，每个药丸都有一定的重量，被污染的药丸是没被污染的重量+1.只称量一次，如何判断哪个罐子的药被污染了？"></a>药丸问题：你有四个装药丸的罐子，每个药丸都有一定的重量，被污染的药丸是没被污染的重量+1.只称量一次，如何判断哪个罐子的药被污染了？</h3><blockquote><p>从第一盒中取出一颗，第二盒中取出2 颗，第三盒中取出三颗。 </p><p>依次类推，称其总量。减去10，多的数字就是药丸罐子序号。 </p></blockquote><h2 id="灯泡开关问题"><a href="#灯泡开关问题" class="headerlink" title="灯泡开关问题"></a>灯泡开关问题</h2><h3 id="在房里有三盏灯，房外有三个开关，在房外看不见房内的情况，你只能进门一次，你用什么方法来区分那个开关控制那一盏灯？"><a href="#在房里有三盏灯，房外有三个开关，在房外看不见房内的情况，你只能进门一次，你用什么方法来区分那个开关控制那一盏灯？" class="headerlink" title="在房里有三盏灯，房外有三个开关，在房外看不见房内的情况，你只能进门一次，你用什么方法来区分那个开关控制那一盏灯？"></a>在房里有三盏灯，房外有三个开关，在房外看不见房内的情况，你只能进门一次，你用什么方法来区分那个开关控制那一盏灯？</h3><p>打开一个开关，过10分钟后关掉开关，并打开另一个开关。进屋确认可知： </p><ul><li>亮的灯是由第二次打开的开关控制； </li><li>摸上去发热的不发亮的灯是由第一次打开的开关控制 </li><li>剩下的第三盏灯是由未操作过的开关控制。 </li></ul><h3 id="一个圆环上有-100-个灯泡，灯泡有亮和暗两种状态。按一个灯泡的开关可以改变它和与它相邻两个灯泡的状态。设计一种算法，对于任意初始状态，使所有灯泡全亮。"><a href="#一个圆环上有-100-个灯泡，灯泡有亮和暗两种状态。按一个灯泡的开关可以改变它和与它相邻两个灯泡的状态。设计一种算法，对于任意初始状态，使所有灯泡全亮。" class="headerlink" title="一个圆环上有 100 个灯泡，灯泡有亮和暗两种状态。按一个灯泡的开关可以改变它和与它相邻两个灯泡的状态。设计一种算法，对于任意初始状态，使所有灯泡全亮。"></a>一个圆环上有 100 个灯泡，灯泡有亮和暗两种状态。按一个灯泡的开关可以改变它和与它相邻两个灯泡的状态。设计一种<a href="">算法</a>，对于任意初始状态，使所有灯泡全亮。</h3><p>将灯泡编号 1 ~ 100 </p><p>步骤一：将灯泡变为全亮或只剩一个为暗 </p><p>从 1 循环到 98 ，遇到暗的则按它下一个，使之变亮。循环完毕，1 ~ 98 必然全亮。99 和 100可能为亮亮、暗亮、亮暗、暗暗四种状态。 </p><ul><li>若为亮亮，皆大欢喜，满足题目要求 </li><li>暗亮、亮暗，达到只剩一个为暗的状态； </li><li>若为暗暗。则按下编号 100 的灯泡，使编号 99 、100 变为亮，编号 1 的灯泡变为暗，从而达到只剩一个为暗的状态。 </li></ul><p>步骤二：将灯泡变为全暗 </p><p>由于灯泡环形摆放，我们指定暗的灯泡编号为 1 ，将剩下 99 个亮着的灯泡每 3 个为一组。按下每组中间的灯泡后，使得所有灯泡变为暗。 </p><p>步骤三：将灯泡变为全亮 </p><p>将所有灯泡按一下，灯泡变为全亮; </p><p><strong>扩展:</strong></p><p>对于 N 个灯泡的任意初始状态 ( N &gt; 3 ) ，能否经过若干次操作使得所有灯泡全亮？ </p><p>答案：N 个灯泡做分类讨论。 </p><ol><li>N = 3*k+1一定可以。方法与上述步骤相同，在步骤二中可以将3k个亮的灯泡分为k组。</li><li>N = 3*k+2一定可以。将上述步骤一目标状态的只剩一个为暗改成<strong>剩两个相邻为暗</strong>，其余 3 * k 个灯泡分组按即可。因为，对于任意只剩一个为暗的状态，按下该灯泡左右任意一个就可以变成剩两个相邻为暗的状态！ </li><li>N = 3*k不一定。如果经过上述步骤一可以将灯泡变成全亮的状态则有解；否则，无解。（该结论有待证明）</li></ol><p><strong>附:</strong></p><p>对于这道题，以下两个状态可以相互转化 </p><p>大家可以琢磨下，对理解这道题会有帮助。 </p><ol><li>全暗 &lt;=&gt; 全亮。全暗和全亮状态可以相互转化，方法就是将每个灯泡按一次。这样每个灯泡都被改变了 3 次状态，使得全暗变为全亮，全亮也可变为全暗。 </li><li>剩一个为暗 &lt;=&gt; 剩两个相邻为暗。剩一个为暗时，按下该灯泡左右任意一个，就变成了剩两个相邻为暗的状态；剩两个相邻为暗时，按下第二个暗，便可变成了剩一个为暗的状态。 </li></ol><h2 id="蓝眼-疯狗-耳光问题"><a href="#蓝眼-疯狗-耳光问题" class="headerlink" title="蓝眼/疯狗/耳光问题"></a>蓝眼/疯狗/耳光问题</h2><h3 id="蓝眼睛问题"><a href="#蓝眼睛问题" class="headerlink" title="蓝眼睛问题"></a>蓝眼睛问题</h3><blockquote><p>问题：有个岛上住着一群人，有一天来了个游客，定了一条奇怪的规矩：所有蓝眼睛的人都必须尽快离开这个岛。每晚8点会有一个航班离岛。每个人都看得见别人眼睛的颜色，但不知道自己的（别人也不可以告知）。此外，他们不知道岛上到底有多少人是蓝眼睛的，只知道至少有一个人的眼睛是蓝色的。所有蓝眼睛的人要花几天才能离开这个岛？ </p></blockquote><p><strong>有多少个蓝眼睛的人就会花多少天。</strong></p><ul><li>c=1 </li></ul><p>假设岛上所有人都是聪明的，蓝眼睛的人四处观察之后，发现没有人是蓝眼睛的。但他知道至少有一人是蓝眼睛的，于是就能推导出自己一定是蓝眼睛的。因此，他会搭乘当晚的飞机离开。 </p><ul><li>c=2 </li></ul><p>两个蓝眼睛的人看到对方，并不确定c是1还是2，但是由上一种情况，他们知道，如果c = 1，那个蓝眼睛的人第一晚就会离岛。因此，发现另一个蓝眼睛的人仍在岛上，他一定能推断出c = 2，也就意味着他自己也是蓝眼睛的。于是，两个蓝眼睛的人都会在第二晚离岛。 </p><ul><li>c&gt;2 </li></ul><p>逐步提高c时，我们可以看出上述逻辑仍旧适用。如果c = 3，那么，这三个人会立即意识到有2到3人是蓝眼睛的。如果有两人是蓝眼睛的，那么这两人会在第二晚离岛。因此，如果过了第二晚另外两人还在岛上，每个蓝眼睛的人都能推断出c = 3，因此这三人都有蓝眼睛。他们会在第三晚离岛。 </p><p>不论c为什么值，都可以套用这个模式。所以，如果有c人是蓝眼睛的，则所有蓝眼睛的人要用c晚才能离岛，且都在同一晚离开。 </p><h3 id="疯狗问题"><a href="#疯狗问题" class="headerlink" title="疯狗问题"></a>疯狗问题</h3><blockquote><p>问题：有50家人家，每家一条狗。有一天警察通知，50条狗当中有病狗，行为和正常狗不一样。每人只能通过观察别人家的狗来判断自己家的狗是否生病，而不能看自己家的狗，如果判断出自己家的狗病了，就必须当天一枪打死自己家的狗。结果，第一天没有枪响，第二天没有枪响，第三天开始一阵枪响，问：一共死了几条狗？ </p></blockquote><p><strong>死了3条（第</strong> <strong>几天枪响就有几条）。</strong></p><p>从有一条不正常的狗开始，显然第一天将会听到一声枪响。这里的要点是你只需站在那条不正常狗的主人的角度考虑。有两条的话思路继续，只考虑有两条不正常狗的人，其余人无需考虑。通过第一天他们了解了对方的信息。第二天杀死自己的狗。换句话说每个人需要一天的时间证明自己的狗是正常的。有三条的话，同样只考虑那三个人，其中每一个人需要两天的时间证明自己的狗是正常的狗。 </p><h3 id="耳光问题"><a href="#耳光问题" class="headerlink" title="耳光问题"></a>耳光问题</h3><blockquote><p>问题：一群人开舞会，每人头上都戴着一顶帽子。帽子只有黑白两种，黑的至少有一顶。每个人都能看到其他人帽子的颜色，却看不到自己的。主持人先让大家看看别人头上戴的是什么帽子，然后关灯，如果有人认为自己戴的是黑帽子，就打自己一个耳光。第一次关灯，没有声音。于是再开灯，大家再看一遍，关灯时仍然鸦雀无声。一直到第三次关灯，才有劈劈啪啪打耳光的声音响起。问有多少人戴着黑帽子？ </p></blockquote><p><strong>答案：有三个人戴黑帽。</strong></p><p>假设有N个人戴黑帽，当N＝1时，戴黑帽的人看见别人都为白则能肯定自己为黑。于是第一次关灯就应该有声。可以断定N＞1。对于每个戴黑帽的人来说，他能看见N-1顶黑帽，并由此假定自己为白。但等待N-1次还没有人打自己以后，每个戴黑人都能知道自己也是黑的了。所以第N次关灯就有N个人打自己。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原文请参见&lt;a class=&quot;link&quot;   href=&quot;https://www.nowcoder.com/discuss/807456&quot; &gt;Li-Xiao-Hu的博客&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="数据结构与算法" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://www.lzp.zone/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="https://www.lzp.zone/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Bean,POJO,PO,DTO,VO,BO,EJB一锅端</title>
    <link href="https://www.lzp.zone/2022/03/21/(Java)Bean,POJO%EF%BC%8CPO%EF%BC%8CDTO%EF%BC%8CVO%EF%BC%8CBO,EJB,EntityBean%E4%B8%80%E9%94%85%E7%AB%AF/"/>
    <id>https://www.lzp.zone/2022/03/21/(Java)Bean,POJO%EF%BC%8CPO%EF%BC%8CDTO%EF%BC%8CVO%EF%BC%8CBO,EJB,EntityBean%E4%B8%80%E9%94%85%E7%AB%AF/</id>
    <published>2022-03-21T08:05:21.000Z</published>
    <updated>2022-03-24T15:43:16.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是POJO-？"><a href="#什么是POJO-？" class="headerlink" title="什么是POJO ？"></a>什么是POJO ？</h2><p><code>POJO（Plain Old Java Object）</code>这种叫法是Martin Fowler、Rebecca Parsons和Josh MacKenzie在2000年的一次演讲的时候提出来的。</p><p> 按照 Martin Fowler 的解释是<code>Plain Old Java Object</code>，从字面上翻译为“纯洁老式的 Java 对象”，但大家都使用“简单java对象”来称呼它。<code>POJO</code>的内在含义是指：那些没有继承任何类、也没有实现任何接口，更没有被其它框架侵入的java对象。</p><p>先给一个定义吧:</p><p><code>POJO</code>是一个简单的、普通Java对象，它包含业务逻辑处理或持久化逻辑等，但不是<code>JavaBean</code>、<code>EntityBean</code>等，不具有任何特殊角色，不继承或不实现任何其它<code>Java</code>框架的类或接口。 可以包含类似与<code>JavaBean</code>属性和对属性访问的<code>setter</code>和<code>getter</code>方法的。</p><p><code>POJO(Plain Old Java Object)</code>这个名字用来强调它是一个普通java对象，而不是一个特殊的对象。</p><p>2005年11月时，“POJO”主要用来指代那些没用遵从特定的Java对象模型，约定或框架如<code>EJB</code>的<code>Java</code>对象。</p><p>理想地讲，一个<code>POJO</code>是一个不受任何限制的<code>Java</code>对象（除了<code>Java</code>语言规范）。例如一个<code>POJO</code>不应该是</p><ol><li><p>扩展预定的类，如      <code> public class Foo extends javax.servlet.http.HttpServlet &#123; ...</code></p></li><li><p>实现预定的接口，如  <code> public class Bar implements javax.ejb.EntityBean &#123; ...</code></p></li><li><p>包含预定的标注，如 <code>  @javax.ejb.Entity public class Baz&#123; ...</code></p></li></ol><p>然后，因为技术上的困难及其他原因，许多兼容<code>POJO</code>风格的软件产品或框架事实上仍然要求使用预定的标注，譬如用于更方便的持久化。</p><p>一般在<code>web</code>应用程序中建立一个数据库的映射对象时，我们只能称它为<code>POJO</code>。</p><p>对此我一开始也是存在误区的，我原来是这样理解的：</p><p><code> POJO</code>是这样的一种“纯粹的”<code>JavaBean</code>，在它里面除了<code>JavaBean</code>规范的方法和属性没有别的东西，即<code>private</code>属性以及对这个属性方法的<code>public</code>的<code>get</code>和<code>set</code>方法。我们会发现这样的<code>JavaBean</code>很“单纯”，它只能装载数据，作为数据存储的载体，而不具有业务逻辑处理的能力。</p><p>所以下面的代码被认为是<code>POJO</code>了。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbHello</span> <span class="keyword">implements</span> <span class="title">Hello</span> </span>&#123; </span><br><span class="line">       <span class="comment">//实现了接口，就不能称之为POJO，这已经不是简单的Java类了</span></span><br><span class="line">   　　<span class="keyword">private</span> DictionaryDAO dao;</span><br><span class="line">   　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(DictionaryDAO dao)</span> </span>&#123;</span><br><span class="line">          　　<span class="keyword">this</span>.dao = dao;</span><br><span class="line">   　　&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>其实，这样的认为是错误的，仔细阅读了《POJOs in Action》这本书的有关部分和<code>POJO</code>的<a class="link"   href="http://martinfowler.com/bliki/POJO.html" >最原始的出处<i class="fas fa-external-link-alt"></i></a>，<code>The term was coined while Rebecca Parsons, Josh MacKenzie and I were preparing for a talk at a conference in September 2000</code>.</p><blockquote><p> In the talk we were pointing out the many benefits of encoding business logic into regular java objects rather than using Entity Beans.We wondered why people were so against using regular objects in their systems and concluded that it was because simple objects lacked a fancy name. So we gave them one, and it’’s caught on very nicely.  </p></blockquote><p>基本的意思是，将业务逻辑写进规则的<code>Java</code>对象（regular java objects）中，比使用<code>Entity Beans</code>更有好处。另外，我们要给具有业务逻辑处理的规则的<code>Java</code>对象（regular java objects）起了一个名字——<code>POJO</code>，这些<code>Java</code>对象不是<code>EntityBeans</code>（<code>EJB</code>规范中专门用于封装数据库访问的一种组件，以面向对象的方式进行数据库的访问）。</p><p>又在<a class="link"   href="http://www.webopedia.com/TERM/P/POJO.htm" >维基百科<i class="fas fa-external-link-alt"></i></a>查到解释如下：</p><blockquote><p>POJO, or Plain Old Java Object, is a normal Java object class (that is, not a JavaBean, EntityBean etc.)  and does not serve any other special role nor does it implement any special interfaces of any of the Java frameworks. This term was coined by Martin Fowler, Rebbecca Parsons and Josh MacKenzie who believed that by creating the acronym POJO, such objects would have a “fancy name”, thereby convincing people that they were worthy of use.</p></blockquote><p>基本意思是说<code>POJO</code>一个普通的<code>Java</code>对象（不是<code>JavaBean</code>，<code>EntityBean</code>等），也不担当任何的特殊的角色，也不实现任何<code>Java</code>框架指定的接口。</p><p>我觉得上面的解释很准确，<code>POJO</code>应该不是我们开始认为的<code>JavaBean</code>，当然更不是<code>EJB</code>，它不应该依赖于框架（即继承或实现某些框架类或接口）。总之，<code>POJO</code>就是一个很简单的<code>Java</code>类，没那么多复杂的东西。例如：<code>Struts1</code>中的<code>Action</code>和<code>ActionForm</code>当然不属于<code>POJO</code>了，而在<code>Struts2</code>中的<code>Action</code>由于可以不继承任何的接口，所以在这种情况下<code>Action</code>是<code>POJO</code>，但是<code>Struts2</code>中的<code>Action</code>也可以继承<code>ActionSupport</code>类就不再属于<code>POJO</code>了。<code>POJO</code>里面是可以包含业务逻辑处理和持久化逻辑，也可以包含类似与<code>JavaBean</code>属性和对属性访问的<code>set</code>和<code>get</code>方法的。</p><p>最后，我们总结一下给一个定义把，<code>POJO</code>是一个简单的、普通Java对象，它包含业务逻辑处理或持久化逻辑等，但不是<code>JavaBean``、EntityBean</code>等，不具有任何特殊角色，不继承或不实现任何其它<code>Java</code>框架的类或接口。</p><p>POJO例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.spring;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbHello</span> </span>&#123; <span class="comment">//简单的Java类，称之为POJO，不继承，不实现接口</span></span><br><span class="line"></span><br><span class="line">   　　<span class="keyword">private</span> DictionaryDAO dao;</span><br><span class="line">   　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(DictionaryDAO dao)</span> </span>&#123;</span><br><span class="line">​      　　<span class="keyword">this</span>.dao = dao;</span><br><span class="line">   　　&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>辅助理解：<code>POJO</code>可以认为是一个中间对象：</p><p>一个中间对象，可以转化为<code>PO</code>、<code>DTO</code>、<code>VO</code>。</p><ol><li><p><code>POJO</code>持久化之后==〉<code>PO</code>（在运行期，由<code>Hibernate</code>中的<code>cglib</code>动态把<code>POJO</code>转换为<code>PO</code>，<code>PO</code>相对于<code>POJO</code>会增加一些用来管理数据库<code>entity</code>状态的属性和方法。<code>PO</code>对于<code>programmer</code>来说完全透明，由于是运行期生成<code>PO</code>，所以可以支持增量编译，增量调试。）</p></li><li><p><code>POJO</code>传输过程中==〉<code>DTO</code></p></li><li><p><code>POJO</code>用作表示层==〉<code>VO</code></p></li></ol><p>参考引用<a class="link"   href="https://blog.csdn.net/chenchunlin526/article/details/69939337" >chunlynn的博客<i class="fas fa-external-link-alt"></i></a></p><h2 id="什么是JavaBean？"><a href="#什么是JavaBean？" class="headerlink" title="什么是JavaBean？"></a>什么是JavaBean？</h2><p><code>JavaBean</code>实际上是指一种特殊的<code>Java</code>类，它通常用来实现一些比较常用的简单功能，并可以很容易的被重用或者是插入其他应用程序中去。所有遵循“<u>一定编程原则</u>”的Java类都可以被称作JavaBean。</p><p><code>JavaBean</code>是一个遵循特定写法的<code>Java</code>类，是一种<code>Java</code>语言编写的可重用组件，它的方法命名，构造及行为必须符合特定的约定：</p><ol><li>这个类必须具有一个公共的(<code>public</code>)无参构造函数；</li><li>所有属性私有化（<code>private</code>）；</li><li>私有化的属性必须通过<code>public</code>类型的方法（<code>getter</code>和<code>setter</code>）暴露给其他程序，并且方法的命名也必须遵循一定的命名规范。 </li><li>这个类应是可序列化的。（比如可以实现<code>Serializable </code>接口，用于实现<code>bean</code>的持久性）</li></ol><p><code>JavaBean</code>在<code>Java EE</code>开发中，通常用于<strong>封装数据</strong>，对于遵循以上写法的<code>JavaBean</code>组件，其它程序可以通过反射技术实例化<code>JavaBean</code>对象（内省机制），并且通过反射那些遵循命名规范的方法，从而获知<code>JavaBean</code>的属性，进而调用其属性保存数据。</p><p>因为这些要求主要是靠约定而不是靠实现接口，所以许多开发者把<code>JavaBean</code>看作遵从特定命名约定的<code>POJO</code>。（可以这么理解，<code>POJO</code>按<code>JavaBean</code>的规则来，就可以变成<code>JavaBean</code>）。</p><p>简而言之，当一个<code>POJO</code>可序列化，有一个无参的构造函数，使用<code>getter</code>和<code>setter</code>方法来访问属性时，他就是一<code>个JavaBean</code>。（没毛病！）</p><hr><p><code>JavaBean</code>是一种组件技术，就好像你做了一个扳手，而这个扳手会在很多地方被拿去用，这个扳子也提供多种功能(你可以拿这个扳手扳、锤、撬等等)，而这个扳手就是一个组件。</p><ul><li><p>对于<code>JavaBean</code>，就是一个<code>Java</code>模型组件，他为使用<code>Java</code>类提供了一种标准的格式，在用户程序和可视化管理工具中可以自动获得这种具有标准格式的类的信息，并能够创建和管理这些类。 </p></li><li><p><code>JavaBean</code>可以使应用程序更加面向对象，可以把数据封装起来，把应用的业务逻辑和显示逻辑分离开，降低了开发的复杂程度和维护成本！</p></li><li><p><code>JavaBean</code> 是一种<code>Java</code>语言写成的可重用组件。为写成<code>JavaBean</code>，类必须是具体的和公共的，并且具有无参数的构造器。<code>JavaBeans</code> 通过提供符合一致性设计模式的公共方法将内部域暴露称为属性。众所周知，属性名称符合这种模式，其他<code>Java </code>类可以通过内省机制发现和操作这些<code>JavaBean </code>属性。</p></li><li><p>通常情况下，由于<code>Java Bean</code>是被容器所创建（如 <code>Tomcat</code>) 的，所以<code>Java Bean</code>应具有一个无参的构造器，另外，通常 <code>Java Bean </code>还要实现<code>Serializable</code>接口用于实现<code> Bean</code> 的持久性。<code> Java Bean</code> 是不能被跨进程访问的。</p></li><li><p><code>JavaBean </code>是使用<code>java.beans</code>包开发的，它是<code>Java 2</code>标准版的一部分。<code>JavaBean</code> 是一台机器上同一个地址空间中运行的组件。<code>JavaBean</code> 是进程内组件。</p></li></ul><h2 id="什么是Bean？"><a href="#什么是Bean？" class="headerlink" title="什么是Bean？"></a>什么是Bean？</h2><p><code>Bean</code>的中文含义是“豆子”，<code>Bean</code>的含义是可重复使用的<code>Java</code>组件。所谓组件就是一个由可以自行进行内部管理的一个或几个类所组成、外界不了解其内部信息和运行方式的群体。使用它的对象只能通过接口来操作。</p><p><code>Bean</code>并不需要继承特别的基类(<code>BaseClass</code>)或实现特定的接口<code>(Interface</code>)。<code>Bean</code>的编写规范使<code>Bean</code>的容器(<code>Container</code>)能够分析一个<code>Java</code>类文件，并将其方法(<code>Methods</code>)翻译成属性(<code>Properties</code>)，即把<code>Java</code>类作为一个<code>Bean</code>类使用。<code>Bean</code>的编写规范包括<code>Bean</code>类的构造方法、定义属性和访问方法编写规则。</p><p><code>Java Bean</code>是基于<code>Java</code>的组件模型，由属性、方法和事件3部分组成。在该模型中，<code>JavaBean</code>可以被修改或与其他组件结合以生成新组件或完整的程序。它是一种<code>Java</code>类，通过封装成为具有某种功能或者处理某个业务的对象。因此，也可以通过嵌在JSP页面内的<code>Java</code>代码访问<code>Bean</code>及其属性。</p><h2 id="什么是EJB-、Entity-Bean？"><a href="#什么是EJB-、Entity-Bean？" class="headerlink" title="什么是EJB 、Entity Bean？"></a>什么是EJB 、Entity Bean？</h2><p><code>Enterprise Bean</code>，也就是<code>Enterprise JavaBean（EJB）</code>，是<code>J2EE</code>的一部分，定义了一个用于开发基于组件的企业多重应用程序的标准。其特点包括网络服务支持和核心开发工具(SDK)。</p><p>在<code> J2EE</code>里，<code>Enterprise Java Beans(EJB)</code>称为<code>Java </code>企业<code>Bean</code>，是<code>Java</code>的核心代码，分别是<code>会话 Bean（Session Bean）</code>，<code>实体Bean（Entity Bean）</code>和<code>消息驱动Bean（MessageDriven Bean）</code>。 </p><ol><li><p><code>Session Bean</code>用于实现业务逻辑，它可以是有状态的，也可以是无状态的。每当客户端请求时，容器就会选择一个<code>Session Bean</code>来为客户端服务。<code>Session Bean</code>可以直接访问数据库，但更多时候，它会通过<code>Entity Bean</code>实现数据访问。 这个类一般用单例模式来实现，因为每次连接都需要用到它。</p></li><li><p><code>Entity Bean</code>是域模型对象，用于实现<code>O/R</code>映射，负责将数据库中的表记录映射为内存中的<code>Entity</code>对象，事实上，创建一个<code>Entity Bean</code>对象相当于新建一条记录，删除一个<code> Entity Bean</code>会同时从数据库中删除对应记录，修改一个<code>Entity Bean</code>时，容器会自动将<code>Entity Bean</code>的状态和数据库同步。 </p></li></ol><p><code>Enterprise Bean</code> 是使用 javax.ejb 包开发的，它是标准 JDK 的扩展，是<code>Java 2 Enterprise Edition</code>的一部分。<code>Enterprise Bean </code>是在多台机器上跨几个地址空间运行的组件。因此<code> Enterprise Bean</code> 是进程间组件。</p><p>我们一般所熟悉的<code>tomcat</code>仅仅只实现了<code>j2ee</code>的一小部分规范，它只是一个<code>serlvet</code>的（Web）容器，它不能跑<code>J2EE</code>的程序，<code>EJB</code>说到底也是种规范，它是<code>j2EE</code>下面的一个子分类（核心类），所以<code>j2ee</code>包含<code>EJB</code>，同时我们都可以说<code>JBOSS``，Weblogic</code>，<code>WebSphere</code>是<code>J2EE</code>容器，也可以叫<code>EJB</code>容器。因为它们能跑<code>EJB</code>组件。那么什么是<code>EJB</code>组件呢？其实就是<code>java</code>写出来的一段程序被打包成<code>EAR</code>包，这个<code>EAR</code>包放在某个<code>EJB</code>的容器的特定目录下启动就可以跑了。类似于互联网公司经常使用的<code>WAR</code>包（部署在<code>tomcat</code>上）。</p><p>然后要说的是<code>EJB</code>是一种是很老、很繁琐的技术标准（规范）了，现如今基本已经被淘汰了。因为<code>EJB</code>的繁琐、难用，<code>spring</code>的出现彻底革了<code>EJB</code>的命，不然怎么说是<code>Java</code>的春天（spring）来了呢。</p><p><code>EJB</code>实现原理： 就是把原来放到客户端实现的代码放到服务器端，并依靠RMI进行通信。</p><p><a class="link"   href="http://blog.csdn.net/jojo52013145/article/details/5783677" >这篇博文<i class="fas fa-external-link-alt"></i></a>对EJB的原理和实质的解释非常清晰 。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0hmtye42pj20og0c0tai.jpg"                      alt="img"                ></p><h2 id="什么是PO？"><a href="#什么是PO？" class="headerlink" title="什么是PO？"></a>什么是PO？</h2><p><code>PO</code> ：<code>persistent object持久对象</code>。<br><code>O/R Mapping </code>是<code> Object Relational Mapping（对象关系映射）</code>的缩写。通俗点讲，就是将对象与关系数据库绑定，用对象来表示关系数据。</p><p><code>PO</code>是<code>在O/R</code>映射的时候出现的概念，如果没有<code>O/R</code>映射，没有这个概念存在了。常用的<code>O/R</code>映射框架有<code>hibernate</code>等。通常对应数据模型(数据库)，本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的<code>java</code>对象。最简单的<code>PO</code>就是对应数据库中某个表中的一条记录，多个记录可以用<code>PO</code>的集合。<code>PO</code>中应该不包含任何对数据库的操作。</p><p>1、有时也被称为<code>Data</code>对象，对应数据库中的<code>entity</code>，可以简单认为一个<code>PO</code>对应数据库中的一条记录。<br>2、在<code>hibernate</code>持久化框架中与<code>insert/delet</code>操作密切相关。<br>3<code>、PO</code>中不应该包含任何对数据库的操作。<br>4、<code>PO</code>的属性是跟数据库表的字段一一对应的。<br>5、<code>PO</code>对象需要实现序列化接口。</p><p>就是说在一些<code>Object/Relation Mapping</code>工具中，能够做到维护数据库表记录的<code>persisent object</code>完全是一个符合<code>Java Bean</code>规范的纯<code>Java</code>对象，没有增加别的属性和方法。全都是这样子的： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是DTO？"><a href="#什么是DTO？" class="headerlink" title="什么是DTO？"></a>什么是DTO？</h2><p><code>DTO （TO）</code> ：<code>Data Transfer Object 数据传输对象</code>。<br>主要用于远程调用等需要大量传输对象的地方。</p><p>可以将<code>PO</code>中的部分属性抽取出来，就形成了<code>DTO</code>。</p><p>比如我们一张表有100个字段，那么对应的<code>PO</code>就有100个属性。<br>但是我们界面上只要显示10个字段，客户端用<code>WEB service</code>来获取数据，没有必要把整个<code>PO</code>对象传递到客户端，这时我们就可以用只有这10个属性的<code>DTO</code>来传递结果到客户端，这样也不会暴露服务端表结构.到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为<code>VO（View Object）</code>。</p><p>用在需要跨进程或远程传输时，它不应该包含业务逻辑。<br>比如一张表有100个字段，那么对应的<code>PO</code>就有100个属性（大多数情况下，<code>DTO</code> 内的数据来自多个表）。但<code>view</code>层只需显示10个字段，没有必要把整个<code>PO</code>对象传递到<code>client</code>，这时我们就可以用只有这10个属性的<code>DTO</code>来传输数据到<code>client</code>，这样也不会暴露<code>server</code>端表结构。到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为<code>VO（View Object）</code>。</p><h2 id="什么是VO？"><a href="#什么是VO？" class="headerlink" title="什么是VO？"></a>什么是VO？</h2><p><code> VO ：value object 值对象</code> / <code>view object 表现层（视图）对象</code>。</p><p>先说 <code>value object </code>值对象：<br>通常用于业务层之间的数据传递，和<code>PO</code>一样也是仅仅包含数据而已。但应是抽象出的业务对象，可以和表对应，也可以不，这根据业务的需要。个人觉得同<code>DTO</code>(数据传输对象)，在<code>web</code>上传递。</p><p>①<code>VO（value object）</code>是值对象，精确点讲它是业务对象，是存活在业务层的，是业务逻辑使用的，它存活的目的就是为数据提供一个生存的地方。<code>VO</code>的属性是根据当前业务的不同而不同的，也就是说，它的每一个属性都一一对应当前业务逻辑所需要的数据的名称。<br><code>VO</code>是什么？它是值对象，准确地讲，它是业务对象，是生活在业务层的，是业务逻辑需要了解，需要使用的，再简单地讲，它是概念模型转换得到的。 </p><p>首先说<code>PO</code>和<code>VO</code>吧，它们的关系应该是相互独立的，一个<code>VO</code>可以只是<code>PO</code>的部分，也可以是多个<code>PO</code>构成，同样也可以等同于一个<code>PO</code>（当然我是指他们的属性）。正因为这样，<code>PO</code>独立出来，数据持久层也就独立出来了，它不会受到任何业务的干涉。又正因为这样，业务逻辑层也独立开来，它不会受到数据持久层的影响，业务层关心的只是业务逻辑的处理，至于怎么存怎么读交给别人吧！不过，另外一点，如果我们没有使用数据持久层，或者说没有使用<code>hibernate</code>，那么<code>PO</code>和<code>VO</code>也可以是同一个东西，虽然这并不好。</p><p>②<code> VO（view object）</code>表现层对象，视图对象。<br>用一个<code>VO</code>对象对应整个界面的值。</p><p>1、主要对应页面显示（<code>web</code>页面/<code>swt</code>、<code>swing</code>界面）的数据对象。<br>2、可以和表对应，也可以不，这根据业务的需要。<br>注 ：在<code>struts</code>中，用<code>ActionForm</code>做<code>VO</code>，需要做一个转换，因为<code>PO</code>是面向对象的，而<code>ActionForm</code>是和<code>view</code>对应的，要将几个<code>PO</code>要显示的属性合成一个<code>ActionForm</code>，可以使用<code>BeanUtils</code>的<code>copy</code>方法。</p><h2 id="什么是DAO？"><a href="#什么是DAO？" class="headerlink" title="什么是DAO？"></a>什么是DAO？</h2><p><code>DAO </code>：<code>data access object 数据访问对象</code>。<br>这个大家最熟悉，和上面几个<code>O</code>区别最大，基本没有互相转化的可能性和必要.<br>主要用来封装对数据库的访问。通过它可以把<code>POJO</code>持久化为<code>PO</code>，用<code>PO</code>组装出来<code>VO</code>、<code>DTO</code>。</p><p>是一个<code>sun</code>的一个标准<code>j2ee</code>设计模式，这个模式中有个接口就是<code>DAO</code>，它负持久层的操作。为业务层提供接口。此对象用于访问数据库。通常和<code>PO</code>结合使用，<code>DAO</code>中包含了各种数据库的操作方法。通过它的方法，结合<code>PO</code>对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合<code>VO</code>，提供数据库的<code>CRUD</code>操作…</p><p>1、主要用来封装对<code>DB</code>（数据库）的访问（<code>CRUD</code>操作）。<br>2、通过接收业务层的数据，把<code>POJO</code>持久化为<code>PO</code>。</p><h2 id="什么是BO？"><a href="#什么是BO？" class="headerlink" title="什么是BO？"></a>什么是BO？</h2><p><code>JavaBean</code>是一种组件技术，就好像你做了一个扳手，而这个扳手会在很多地方被拿去用，这个扳子也提供多种功能(你可以拿这个扳手扳、锤、撬等等)，而这个扳手就是一个组件。</p><p><code>BO</code> ：<code>business object 业务对象</code>。<br>主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。<br>比如一个简历，有教育经历、工作经历、社会关系等等。<br>我们可以把教育经历对应一个<code>PO</code>，工作经历对应一个<code>PO</code>，社会关系对应一个<code>PO</code>。<br>建立一个对应简历的<code>BO</code>对象处理简历，每个<code>BO</code>包含这些<code>PO</code>。<br>这样处理业务逻辑时，我们就可以针对<code>BO</code>去处理。</p><p>封装业务逻辑的<code>java</code>对象，通过调用<code>DAO</code>方法，结合<code>PO</code>，<code>VO</code>进行业务操作。<br>封装业务逻辑为一个对象（可以包括多个<code>PO</code>，通常需要将<code>BO</code>转化成<code>PO</code>，才能进行数据的持久化，反之，从数据库中得到的<code>PO</code>，需要转化成<code>BO</code>才能在业务层使用）。<br>关于<code>BO</code>主要有三种概念</p><ol><li><p>只包含业务对象的属性；</p></li><li><p>只包含业务方法；</p></li><li><p>两者都包含。</p></li></ol><p>在实际使用中，认为哪一种概念正确并不重要，关键是实际应用中适合自己项目的需要。</p><p>参考引用<a class="link"   href="https://blog.csdn.net/chenchunlin526/article/details/69939337" >博客<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是POJO-？&quot;&gt;&lt;a href=&quot;#什么是POJO-？&quot; class=&quot;headerlink&quot; title=&quot;什么是POJO ？&quot;&gt;&lt;/a&gt;什么是POJO ？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;POJO（Plain Old Java Object）&lt;/code&gt;这种</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Java" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
    <category term="JavaBean" scheme="https://www.lzp.zone/tags/JavaBean/"/>
    
    <category term="POJO" scheme="https://www.lzp.zone/tags/POJO/"/>
    
    <category term="PO" scheme="https://www.lzp.zone/tags/PO/"/>
    
    <category term="DTO" scheme="https://www.lzp.zone/tags/DTO/"/>
    
    <category term="VO" scheme="https://www.lzp.zone/tags/VO/"/>
    
    <category term="BO" scheme="https://www.lzp.zone/tags/BO/"/>
    
    <category term="EJB" scheme="https://www.lzp.zone/tags/EJB/"/>
    
    <category term="EntityBean" scheme="https://www.lzp.zone/tags/EntityBean/"/>
    
  </entry>
  
  <entry>
    <title>Java中属性与字段的区别</title>
    <link href="https://www.lzp.zone/2022/03/21/Java%E4%B8%AD%E5%B1%9E%E6%80%A7%E4%B8%8E%E5%AD%97%E6%AE%B5%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://www.lzp.zone/2022/03/21/Java%E4%B8%AD%E5%B1%9E%E6%80%A7%E4%B8%8E%E5%AD%97%E6%AE%B5%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-03-21T08:05:21.000Z</published>
    <updated>2022-03-24T15:43:47.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java中的属性和字段有什么区别？"><a href="#Java中的属性和字段有什么区别？" class="headerlink" title="Java中的属性和字段有什么区别？"></a>Java中的属性和字段有什么区别？</h2><p>答：Java中的属性(property)，通常可以理解为get和set方法。而字段(field)，通常叫做“类成员”，或 “类成员变量”，有时也叫“域”，理解为“数据成员”，用来承载数据的。这两个概念是完全不同的。</p><h2 id="2、属性和字段详解"><a href="#2、属性和字段详解" class="headerlink" title="2、属性和字段详解"></a>2、属性和字段详解</h2><h3 id="字段（filed）"><a href="#字段（filed）" class="headerlink" title="字段（filed）"></a>字段（filed）</h3><p>类成员(字段)，通常是在类中定义的类成员变量，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String s = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以说A类中有一个成员变量叫做 s，A 类有一个字段 s 。字段一般用来承载数据，所以为了安全性，一般定义为私有的。</p><p>字段和常量描述了类的数据（域），当这些数据的某些部分不允许外界访问时，根据 “对象封装” 的原则，应尽量避免将一个类型的字段以公有方式提供给外部。除了final修饰的常量。一般将其设置为private类型。既然是私有，那外界怎么访问呢? </p><p>当然是通过Java的属性方法！</p><h3 id="属性（property）"><a href="#属性（property）" class="headerlink" title="属性（property）"></a>属性（property）</h3><p>属性只局限于类中方法的声明，并不与类中其他成员相关，属于JavaBean的范畴。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setA</span><span class="params">(String s)</span></span>&#123;&#125;</span><br><span class="line"><span class="function">String <span class="title">getA</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>当一个类中拥有这样一对方法时，我们可以说，这个类中拥有一个可读写的a属性(注意是小写a)。如果去掉了set的方法，则是可读属性，反之亦然。</p><p>其规则是：去掉get或set后其剩余的字符串，如果第二个字母是小写的，则把第一个字母也变成小写 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getAge----&gt;age </span><br><span class="line">getCPU----&gt;CPU </span><br></pre></td></tr></table></figure><p>比如有下面这个类: </p><blockquote><p>注：下面的User类不是JavaBean。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">           <span class="keyword">private</span> String id; <span class="comment">//私有字段</span></span><br><span class="line">           <span class="keyword">private</span> String name; <span class="comment">//私有字段</span></span><br><span class="line">           <span class="keyword">private</span> String identifier = <span class="string">&quot;440282199008098076&quot;</span>; <span class="comment">//私有字段</span></span><br><span class="line">           </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="comment">//id的可读属性</span></span><br><span class="line">               <span class="keyword">return</span> id;</span><br><span class="line">           &#125;</span><br><span class="line">      </span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123; <span class="comment">//id的可写属性</span></span><br><span class="line">               <span class="keyword">this</span>.id = id;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="comment">//name的可读属性</span></span><br><span class="line">               <span class="keyword">return</span> name;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; <span class="comment">//name的可写属性</span></span><br><span class="line">               <span class="keyword">this</span>.name = name;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="function"><span class="keyword">public</span> String <span class="title">getIdentifier</span><span class="params">()</span> </span>&#123; <span class="comment">//identifier只有一个get方法，所以它是只读属性</span></span><br><span class="line">           <span class="keyword">return</span> identifier;</span><br><span class="line">           &#125;</span><br><span class="line"> </span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Integer SHOW_STATUS_YES = <span class="number">1</span>; <span class="comment">//公共字段</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Integer SHOW_STATUS_No = <span class="number">0</span>; <span class="comment">//公共字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我操作这个类时，比如调用<code>getName()</code>方法时，我们要说是获得<code>name</code>属性，调用<code>setName(String name)</code>方法时要说设置<code>name</code>属性，因为对我们来说<code>name</code>字段是私有的，我们操作该<code>Person</code>类时根本看不到有这个<code>name</code>字段 。一个类主要包括字段、属性和方法。属性在此时指的就是<code>get/set</code>访问器。</p><p>同时我们可以看到，这个类有3个属性，5个字段。</p><ul><li><p><code>SHOW_STATUS_YES </code>  为公用字段，一般修饰为<code> final   static</code> 类型，可以通过<code>User</code>类直接访问该字段。</p></li><li><p><code>getIdentifier </code>为只读属性，只能读取私有的<code> identifier</code> 字段，这样就起到了保护数据的安全性的作用。</p></li><li><p><code>id</code>和<code>name</code>为私有字段，且有两个操作他们的<code>public</code>属性。可以通过 <code>getId ()</code>、<code> setId(String   id)</code>、 <code>getName ()</code>、 <code>setName(String   name)</code> 来读取和设置他们的值。</p></li></ul><p>更形象的说就是：</p><p><strong>属性是对字段的封装，供外部访问。</strong></p><p><strong>通常属性将相应的私有字段通过封装成公共属性，以便于外界访问和修改。当然你在封装成属性时，也可以设置该属性为只读，可读写等等权限。</strong></p><p>为了便于测试，可在上方代码末端加上加上<code>toString</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="comment">//只有拥有属性的字段，才会被toString方法调用      </span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;User [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, identifier=&quot;</span> + identifier + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                User user = <span class="keyword">new</span> User();</span><br><span class="line">                user.setId(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">                user.setName(<span class="string">&quot;chunlynn&quot;</span>);</span><br><span class="line">       </span><br><span class="line">                String identifier = user.getIdentifier();</span><br><span class="line">                System.out.println(<span class="string">&quot;identifier==&quot;</span> + identifier);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 4402322BDFV323230001</span></span><br><span class="line">                System.out.println(user);</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">                <span class="comment">// User [id=100, name=chunlynn, identifier=4402322BDFV323230001</span></span><br><span class="line">                Integer status = User.SHOW_STATUS_YES; </span><br><span class="line">              </span><br><span class="line">              <span class="comment">// public字段的访问</span></span><br><span class="line">                System.out.println(status);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然在实际项目的开发过程中，公共字段和属性在合适的条件下都可以使用，但是我们应该：</p><p>尽可能的使用<u>属性（property）</u>，而不是<u>数据成员（field）</u>；</p><p>把所有的字段都设置为私有字段，如果要暴露它们，则把它们封装成属性，这也是最佳实践推荐的方式。除了一些常量不能修改的字段，可以设置为<code>public final static</code>类型。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>区别开属性与字段是为了更好的实现<strong>数据安全</strong>，比如当我们想给一个类的属性赋值或者其他类用到了，就需要将这个字段设置为<code>public</code>，然而这样可以对字段进行任意的读写操作，非常不利于数据安全。</p><p>于是就加上了属性，简单说属性实现了字段的封装，属性有<code>get</code>、<code>set </code>方法来控制字段，该字段的属性只有<code>set</code>方法没有<code>get</code>方法，就只可以对该方法进行赋值操作，没有读操作，反之亦然。就是对对字段的操作通过属性来控制。</p><p>可以创建属性，将字段和属性封装在一起。通过属性可以像访问字段一样访问数据成员，实现数据的封装，避免使用非法数据赋值，保证数据完整性，同时类内部发生修改时，避免整个程序的修改。</p><p>基于get,set方法的反射不会破坏对象数据，IDE可以通过约定做些智能提示。如果你自己用反射，你想做些通用处理，去遍历每个字段，没人跟你说哪个字段能写，那个能读，你没法处理嘛。</p><p>在我们项目中用到属性和字段的多半就是<code>POJO</code>、<code>JavaBean</code>、<code>DTO</code>、<code>VO</code> 等等了。</p><p>标准的<code>JavaBean</code>：<br><code>JavaBean</code>是一种特殊的类，主要用于传递数据信息，这种类中的方法主要用于访问私有的字段，且方法名符合某种命名规则。</p><p>如果在两个模块之间传递信息，可以将信息封装进<code>JavaBean</code>中，这种对象称为<code>值对象(Value Object)</code>，或<code>VO</code>，有时也叫<code>DTO（数据传输对象）</code>。方法比较少。这些信息储存在类的私有变量中，通过<code>set()</code>、<code>get()</code>获得。</p><p><code>JavaBean</code>在<code>Java EE开发</code>中，通常用于封装数据，对于遵循以上写法的<code>JavaBean</code>组件，其它程序可以通过反射技术实例化<code>JavaBean</code>对象（内省机制），并且通过反射那些遵循命名规范的方法，从而获知<code>JavaBean</code>的属性，进而调用其属性保存数据。</p><p>引用：<a class="link"   href="https://blog.csdn.net/chenchunlin526/article/details/71424844" >地址1<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java中的属性和字段有什么区别？&quot;&gt;&lt;a href=&quot;#Java中的属性和字段有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;Java中的属性和字段有什么区别？&quot;&gt;&lt;/a&gt;Java中的属性和字段有什么区别？&lt;/h2&gt;&lt;p&gt;答：Java中的属性</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Java" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
    <category term="Java属性" scheme="https://www.lzp.zone/tags/Java%E5%B1%9E%E6%80%A7/"/>
    
    <category term="Java字段" scheme="https://www.lzp.zone/tags/Java%E5%AD%97%E6%AE%B5/"/>
    
    <category term="Spring" scheme="https://www.lzp.zone/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>武功滞涩处Java篇</title>
    <link href="https://www.lzp.zone/2022/03/21/%E6%AD%A6%E5%8A%9F%E6%BB%9E%E6%B6%A9%E5%A4%84%EF%BC%88java%E7%AF%87%EF%BC%89/"/>
    <id>https://www.lzp.zone/2022/03/21/%E6%AD%A6%E5%8A%9F%E6%BB%9E%E6%B6%A9%E5%A4%84%EF%BC%88java%E7%AF%87%EF%BC%89/</id>
    <published>2022-03-21T08:05:21.000Z</published>
    <updated>2022-03-27T14:34:24.596Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章格式提醒：问题2级、答案分支依次递减；未解决的结尾用”?”进行标识；倒序更新。</p></blockquote><h2 id="主键策略？"><a href="#主键策略？" class="headerlink" title="主键策略？"></a>主键策略？</h2><h2 id="持久层，业务层？"><a href="#持久层，业务层？" class="headerlink" title="持久层，业务层？"></a>持久层，业务层？</h2><h2 id="Mybatis的作用及原理？"><a href="#Mybatis的作用及原理？" class="headerlink" title="Mybatis的作用及原理？"></a>Mybatis的作用及原理？</h2><h2 id="Java的动态代理机制？"><a href="#Java的动态代理机制？" class="headerlink" title="Java的动态代理机制？"></a>Java的动态代理机制？</h2><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>****回滚(rollback)****就是在事务提交之前将数据库数据恢复到事务修改之前数据库数据状态。为了保证在应用程序、数据库或系统出现错误后，数据库能够被还原，以保证数据库的完整性，所以需要进行回滚。</p><blockquote><p>例如，用户A给用户B转账，在数据库中就需要给A与B的账户信息进行修改(update)操作，而这两条sql语句必须都执行或者都不执行。 例如先执行用户B的修改(update)语句，使用户B的账户金额增加了1000，然后执行用户A的update语句，使用户A的账户金额减少了1000。 如果用户A的账户金额大于1000，则交易顺利进行，不存在任何问题，但是当用户A的账户金额小于1000时，由于转账金额不允许大于账户金额，第二条sql语句语句就无法正确执行，此时，数据库的状态必须回到没有执行B的update语句之前，需要进行回滚操作，回滚就是执行一遍相反的操作，此时再执行B的update金额减1000。</p></blockquote><h3 id="回滚与撤销的区别："><a href="#回滚与撤销的区别：" class="headerlink" title="回滚与撤销的区别："></a>回滚与撤销的区别：</h3><p>回滚是指将数据库的状态恢复到执行事务之前的状态，其中可能会使用UNDO日志进行回滚。</p><p>撤销是一种记录日志的方式，并不是主要服务于事务回滚，而是主要用于系统从故障中恢复。 例如，系统突然断电，系统要根据UNDO日志对未完成的事务进行处理，保证数据库的状态为执行这些事务之前的状态。</p><p>回滚的作用就是，当有一个SQL语句执行时，条件不符合要求，比如你要插入一个数据，但是插入的数据要有条件的，这时候你就可以用回滚，如果条件成功就COMMIT提交的意思，不然就ROLLBACK回滚，也就是说插入不成功<br><a class="link"   href="https://blog.csdn.net/bigdaddy_maybe/article/details/82748249" >原文链接<i class="fas fa-external-link-alt"></i></a></p><h3 id="Beanfactory接口？"><a href="#Beanfactory接口？" class="headerlink" title="Beanfactory接口？"></a>Beanfactory接口？</h3><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><h2 id="Spring常用注解？"><a href="#Spring常用注解？" class="headerlink" title="Spring常用注解？"></a>Spring常用注解？</h2><p>@Autowired / @Test /</p><p>@service</p><p>@Transactional</p><h2 id="连接池的定义原理等"><a href="#连接池的定义原理等" class="headerlink" title="连接池的定义原理等"></a>连接池的定义原理等</h2><p>转自<a class="link"   href="https://blog.csdn.net/qq_32392597/article/details/107512805" >王杰的博客<i class="fas fa-external-link-alt"></i></a>，<a class="link"   href="https://blog.csdn.net/weixin_42867975/article/details/90306610" >一天天的博客<i class="fas fa-external-link-alt"></i></a></p><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；</p><p>释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。</p><blockquote><p>———以上参考《百度百科》</p></blockquote><h3 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h3><p>建立一个数据库连接是一件非常耗时（消耗时间）耗力（消耗资源）的事情。之所以会这样，是因为连接到数据库服务器需要经历几个漫长的过程:建立物理通道（例如套接字或命名管道），与服务器进行初次握手，分析连接字符串信息，由服务器对连接进行身份验证，运行检查以便在当前事务中登记等等。</p><p>连接池就是这样一个容器：它存放了一定数量的与数据库服务器的物理连接。因此，当我们需要连接数据库服务器的时候，只需去池（容器）中取出一条空闲的连接，而不是新建一条连接。这样的话，我们就可以大大减少连接数据库的开销，从而提高了应用程序的性能。</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>连接池的工作原理主要由三部分组成，分别为</p><ul><li>连接池的建立</li><li>连接池中连接的使用管理</li><li>连接池的关闭</li></ul><h4 id="第一、连接池的建立。"><a href="#第一、连接池的建立。" class="headerlink" title="第一、连接池的建立。"></a>第一、连接池的建立。</h4><p>　　一般在系统初始化时，连接池会根据系统配置建立，并在池中创建了几个连接对象，以便使用时能从连接池中获取。连接池中的连接不能随意创建和关闭，这样避免了连接随意建立和关闭造成的系统开销。</p><p>Java中提供了很多容器类可以方便的构建连接池，例如Vector、Stack等。</p><h4 id="第二、连接池的管理。"><a href="#第二、连接池的管理。" class="headerlink" title="第二、连接池的管理。"></a>第二、连接池的管理。</h4><p>　　连接池管理策略是连接池机制的核心，连接池内连接的分配和释放对系统的性能有很大的影响。其管理策略是：</p><p>当客户请求数据库连接时，</p><p>1）如果池中有空闲连接可用，返回该连接。<br>2）如果没有空闲连接，池中连接都已用完，创建一个新连接添加到池中。<br>3）如果池中连接已达到最大连接数，请求按设定的最大等待时间进入等待队列直到有空闲连接可用。<br>4）如果超出最大等待时间，则抛出异常给客户。<br>当客户释放数据库连接时，先判断该连接的引用次数是否超过了规定值，如果超过就从连接池中删除该连接，否则保留为其他客户服务。</p><p>该策略保证了数据库连接的有效复用，避免频繁的建立、释放连接所带来的系统资源开销。</p><p>如果连接长时间空闲，或检测到与服务器的连接已断开，连接池管理器也会将该连接从池中移除。</p><h4 id="第三、连接池的关闭。"><a href="#第三、连接池的关闭。" class="headerlink" title="第三、连接池的关闭。"></a>第三、连接池的关闭。</h4><p>当应用程序退出时，关闭连接池中所有的连接，释放连接池相关的资源，该过程正好与创建相反。</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><h4 id="1、并发问题"><a href="#1、并发问题" class="headerlink" title="1、并发问题"></a>1、并发问题</h4><p>为了使连接管理服务具有最大的通用性，必须考虑多线程环境，即并发问题。</p><p>这个问题相对比较好解决，因为各个语言自身提供了对并发管理的支持像java,c#等等，使用<code>synchronized(java)lock(C#)</code>关键字即可确保线程是同步的。</p><h4 id="2、事务处理"><a href="#2、事务处理" class="headerlink" title="2、事务处理"></a>2、事务处理</h4><p>我们知道，事务具有原子性，此时要求对数据库的操作符合“<code>ALL-OR-NOTHING</code>”原则,即对于一组SQL语句要么全做，要么全不做。</p><p>我们知道当2个线程共用一个连接Connection对象，而且各自都有自己的事务要处理时候，对于连接池是一个很头疼的问题，因为即使Connection类提供了相应的事务支持，可是我们仍然不能确定那个数据库操作是对应那个事务的，这是由于我们有２个线程都在进行事务操作而引起的。</p><p>为此我们可以使用每一个事务独占一个连接来实现，虽然这种方法有点浪费连接池资源但是可以大大降低事务管理的复杂性。</p><h4 id="3、连接池的分配与释放"><a href="#3、连接池的分配与释放" class="headerlink" title="3、连接池的分配与释放"></a>3、连接池的分配与释放</h4><p>连接池的分配与释放，对系统的性能有很大的影响。合理的分配与释放，可以提高连接的复用度，从而降低建立新连接的开销，同时还可以加快用户的访问速度。</p><p>对于连接的管理可使用一个List。即把已经创建的连接都放入List中去统一管理。每当用户请求一个连接时，系统检查这个List中有没有可以分配的连接。如果有就把那个最合适的连接分配给他，如果没有就抛出一个异常给用户。</p><h4 id="４、连接池的配置与维护"><a href="#４、连接池的配置与维护" class="headerlink" title="４、连接池的配置与维护"></a>４、连接池的配置与维护</h4><p>连接池中到底应该放置多少连接，才能使系统的性能最佳？</p><p>系统可采取设置<strong>最小连接数（minConnection）和最大连接数（maxConnection）</strong>等参数来控制连接池中的连接。</p><p>比方说，最小连接数是系统启动时连接池所创建的连接数。如果创建过多，则系统启动就慢，但创建后系统的响应速度会很快；如果创建过少，则系统启动的很快，响应起来却慢。这样，可以在开发时，设置较小的最小连接数，开发起来会快，而在系统实际使用时设置较大的，因为这样对访问客户来说速度会快些。</p><p>最大连接数是连接池中允许连接的最大数目，具体设置多少，要看系统的访问量，可通过软件需求上得到。</p><p>如何确保连接池中的最小连接数呢？</p><p>有动态和静态两种策略：</p><ul><li>动态即每隔一定时间就对连接池进行检测，如果发现连接数量小于最小连接数，则补充相应数量的新连接,以保证连接池的正常运转。</li><li>静态是发现空闲连接不够时再去检查。</li></ul><h3 id="通过jdbcTemplat配置数据库连接池"><a href="#通过jdbcTemplat配置数据库连接池" class="headerlink" title="通过jdbcTemplat配置数据库连接池"></a>通过jdbcTemplat配置数据库连接池</h3><blockquote><p>最大的空闲时间：数据库连接对象所能存活的最大时间。</p><p>最小连接数：是连接池一直保持的数据库连接，所以如果应用程序对数据库连接的使用量不大，将会有大量的数据库连接资源被浪费。</p><p>最大连接数：所能创建连接池的最大数目，如果数据库连接池连接请求超过该数目，这个请求就先等待。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;com.zaxxer.hikari.HikariDataSource&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;idleTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--最大空闲时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maximumPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--最大连接数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minimumIdle&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 最小连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate &quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span>   <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.jd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Hash是个什么东东"><a href="#Hash是个什么东东" class="headerlink" title="Hash是个什么东东"></a>Hash是个什么东东</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>Hash一般翻译为散列，还有音译为哈希，本文我们统称为哈希（这么叫好听，哈希=散列），通过百度以及谷歌都没有直接找到Hash的定义，而是找到了一些相关的概念，哈希算法，哈希函数，哈希表等概念。</p><p>我所理解的哈希是指一个过程，这个过程就是把任意长度的输入，通过哈希算法，变换成固定长度的输出，所输出的称为哈希值。这种变换是一种压缩映射，也即哈希值所占的空间一般来说远小于输入值的空间，不同的输入可能会哈希出相同的输出（概率很小）。</p><h3 id="哈希函数、算法"><a href="#哈希函数、算法" class="headerlink" title="哈希函数、算法"></a>哈希函数、算法</h3><p>哈希算法将任意长度的二进制值映射为较短的固定长度的二进制值，这个小的二进制值称为哈希值。哈希值是一段数据唯一且极其紧凑的数值表示形式。如果散列一段明文而且哪怕只更改该段落的一个字母，随后的哈希都将产生不同的值。要找到散列为同一个值的两个不同的输入，在计算上是不可能的，所以数据的哈希值可以检验数据的完整性。一般用于快速查找和加密算法 —《数据结构与算法分析》</p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>如果两个哈希值是不相同的（根据同一函数），那么这两个散列值的原始输入一定是不相同的。<br>如果两个哈希值相同，两个输入值很可能(极大概率)是相同的，但也可能不同，这种情况称为“哈希碰撞”<br>抗篡改能力：对于一个数据块，哪怕只改动其一个比特位，其hash值的改动也会非常大。<br>它是一种单向函数是“非对称”的，即它是一个从明文到密文的不可逆的映射,只有加密过程,没有解密过程。</p><p>部分引自：<a class="link"   href="https://gist.github.com/arrayadd" >博文一<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://blog.csdn.net/qq_34858648/article/details/79545622" >博文二<i class="fas fa-external-link-alt"></i></a> ，更多请参考<a class="link"   href="https://www.zhihu.com/question/26762707/answer/890181997" >知乎问答<i class="fas fa-external-link-alt"></i></a></p><h2 id="常见的设计模式？"><a href="#常见的设计模式？" class="headerlink" title="常见的设计模式？"></a>常见的设计模式？</h2><h2 id="无法从static方法中引用非static方法"><a href="#无法从static方法中引用非static方法" class="headerlink" title="无法从static方法中引用非static方法"></a>无法从static方法中引用非static方法</h2><p>  代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.util.xml.impl.Input;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatePension</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// read inputs</span></span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;How much money do you need to retire? &quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> goal = in.nextDouble();</span><br><span class="line">        System.out.print(<span class="string">&quot;How much money will you contribute every year? &quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> payment = in.nextDouble();</span><br><span class="line">        System.out.print(<span class="string">&quot;Interest rate in %: &quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> interestRate = in.nextDouble();</span><br><span class="line">        <span class="keyword">double</span> balance = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> year = <span class="number">0</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            balance += payment;</span><br><span class="line">            <span class="keyword">double</span> interest = balance * interestRate / <span class="number">100</span>;</span><br><span class="line">            balance += interest;</span><br><span class="line">            year++;</span><br><span class="line"><span class="comment">// print current balance</span></span><br><span class="line"><span class="comment">// ask if ready to retire and get input</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (Input.equals(<span class="string">&quot;N&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>  报错：“java: 无法从静态上下文中引用非静态方法 equals(java.lang.Object)”</p></blockquote><p>  心得体会：</p><ul><li>静态方法又叫做类方法，不需要实例化而是通过类名称来进行调用，与实例无关；非静态方法又叫做实例对象方法，必须通过对方访问的方法；</li><li>解决方案：<ul><li>在外部定义了动态类而导致如此报错的，可以将该动态类改为静态类，即<code>static class </code></li><li>或者可在main主方法里实例化非静态方法的对象，再对非静态方法进行调用</li></ul></li></ul><h2 id="生成随机数有几种方法"><a href="#生成随机数有几种方法" class="headerlink" title="生成随机数有几种方法"></a>生成随机数有几种方法</h2><blockquote><p>1.根据强制类型转换来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> r=(<span class="keyword">int</span>)(Math.random()*n);</span><br></pre></td></tr></table></figure><p>2.直接调用随机数生成方法</p></blockquote><h2 id="类的访问器和修改器方法"><a href="#类的访问器和修改器方法" class="headerlink" title="类的访问器和修改器方法?"></a>类的访问器和修改器方法?</h2><h2 id="具体如何使用GregorianCanlendar对象"><a href="#具体如何使用GregorianCanlendar对象" class="headerlink" title="具体如何使用GregorianCanlendar对象?"></a>具体如何使用GregorianCanlendar对象?</h2><h2 id="IDEA的调试技巧"><a href="#IDEA的调试技巧" class="headerlink" title="IDEA的调试技巧"></a>IDEA的调试技巧</h2><h3 id="步过和步入"><a href="#步过和步入" class="headerlink" title="步过和步入"></a>步过和步入</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0ldvurc7yj20ig0c8jrw.jpg"                      alt="img"                ></p><h3 id="强行步入，步出"><a href="#强行步入，步出" class="headerlink" title="强行步入，步出"></a>强行步入，步出</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0ldvwtwy0j20gt0dr74s.jpg"                      alt="img"                ></p><h3 id="回退，和运行到光标处"><a href="#回退，和运行到光标处" class="headerlink" title="回退，和运行到光标处"></a>回退，和运行到光标处</h3><p>运行到光标处：光标点到哪里，他的断点执行到哪一行</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0ldvu9h9xj20fe0cxjrx.jpg"                      alt="在这里插入图片描述"                ></p><h3 id="计算表达式：可以改变变量的值"><a href="#计算表达式：可以改变变量的值" class="headerlink" title="计算表达式：可以改变变量的值"></a>计算表达式：可以改变变量的值</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0ldvxot6cj20ls0gn0u7.jpg"                      alt="在这里插入图片描述"                ></p><h3 id="条件断点：-for循环"><a href="#条件断点：-for循环" class="headerlink" title="条件断点： for循环"></a>条件断点： for循环</h3><p>当我们想查看for循环中i=300的值，一个个点是不可能的，此时需要条件断点。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0ldvyphd1j20nh0i1tab.jpg"                      alt="在这里插入图片描述"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0ldvvww7qj211n0f3acg.jpg"                      alt="在这里插入图片描述"                ></p><h3 id="放行"><a href="#放行" class="headerlink" title="放行"></a>放行</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0ldvy6uw4j211j0gradz.jpg"                      alt="在这里插入图片描述"                ></p><h3 id="多线程调试"><a href="#多线程调试" class="headerlink" title="多线程调试"></a>多线程调试</h3><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>通配符是一种特殊语句，主要有星号(*)和问号(?)，用来模糊搜索文件。当查找文件夹时，可以使用它来代替一个或多个真正字符；当不知道真正字符或者懒得输入完整名字时，常常使用通配符代替一个或多个真正的字符。</p><h3 id="星号（-）"><a href="#星号（-）" class="headerlink" title="星号（*）"></a>星号（*）</h3><p>可以使用星号代替零个、单个或多个字符。如果正在查找以AEW开头的一个文件，但不记得文件名其余部分，可以输入AEW*，查找以AEW开头的所有文件类型的文件，如AEWT.txt、AEWU.EXE、AEWI.dll等。</p><p>要缩小范围可以输入AEW*.txt，查找以AEW开头的所有文件类型并.txt为扩展名的文件如AEWIP.txt、AEWDF.txt。</p><p>2、问号（？）</p><p>可以使用问号代替一个字符。如果输入love?，查找以love开头的一个字符结尾文件类型的文件，如lovey、lovei等。要缩小范围可以输入love?.doc，查找以love开头的一个字符结尾文件类型并.doc为扩展名的文件如lovey.doc、loveh.doc。</p><p><a href="https://iknow-pic.cdn.bcebos.com/7dd98d1001e939014c4eb9fa75ec54e737d196a1"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0ldvzk95ej20jv0a30tn.jpg"                      alt="img"                ></a></p><h3 id="扩展资料"><a href="#扩展资料" class="headerlink" title="扩展资料"></a>扩展资料</h3><p>通配符使用方法——模糊条件求和：</p><p>1、例如要求：求出商品中包含“T恤”的总数量</p><p>需要在项目栏中求和出包含T恤的总数量，输入公式：=SUMIF(A2:A18,”<em>T恤</em>“,D2:D18) 因为我们不能确定“T恤”的前后有没有其他数据，所以条件为”<em>T恤</em>“，则可以把所有包含“T恤”的数量求出。</p><p>2、例如要求：求出商品中最后一个字是”裙”，且单元格是5个字符对应的总数量</p><p>在项目栏中输入公式：=SUMIF(A2:A18,“????裙”，D2:D18)，因为必须是5个字符且最后一个是“裙”，所以条件输入“????裙”1个“？”代表任意1个字符。</p><h2 id="从键盘接受输入的字符"><a href="#从键盘接受输入的字符" class="headerlink" title="从键盘接受输入的字符"></a>从键盘接受输入的字符</h2><ul><li><p>第一种方法:通过接收<a class="link"   href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020" >字符串<i class="fas fa-external-link-alt"></i></a> 再接收其第一个字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;    <span class="comment">//导包</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T1</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入字符或字符串&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> c =sc.next().charAt(<span class="number">0</span>);    <span class="comment">//只接收字符串的第一个字符</span></span><br><span class="line">System.out.println(c);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二种方法: 同样可以实现录入一个字符的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_01</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">       System.out.println(<span class="string">&quot;请输入一个字符&quot;</span>);  </span><br><span class="line">        <span class="keyword">char</span> c=(<span class="keyword">char</span>)System.in.read();  </span><br><span class="line">        System.out.println(c); </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p>第三种方法：利用类库中的Scanner类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);  <span class="comment">//定义一个Scanner类对象，用来接收数据</span></span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;Please input a string :&quot;</span>);</span><br><span class="line"></span><br><span class="line">Int a = in.nextInt();   <span class="comment">//把接收的整形数据放到a中</span></span><br><span class="line"></span><br><span class="line">String str = in.nextLine();   <span class="comment">//把输入的当前行数据放到字符串变量str中</span></span><br><span class="line"></span><br><span class="line">Char arr[] = str.toCharArray();    <span class="comment">//字符串转换成数组</span></span><br><span class="line"></span><br><span class="line">String st = arr.toString();   <span class="comment">//字符数组转换成字符串</span></span><br></pre></td></tr></table></figure></li><li><p>第四种方法：字符输入流InputStreamReader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(System.in);    <span class="comment">//定义一个字符输入流对象reader</span></span><br><span class="line"></span><br><span class="line">BufferedReader input = <span class="keyword">new</span> BufferedReader(reader);     <span class="comment">//把reader接收的字符放入到缓冲区input中</span></span><br><span class="line">System.out.print(<span class="string">&quot;Please enter your word:&quot;</span>);   </span><br><span class="line">String text =  input.readLine();   <span class="comment">//从input缓冲区中读取一行字符</span></span><br></pre></td></tr></table></figure></li><li><p>第五种方法:数据输入流：DataStreamReader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DataInputStream  in = <span class="keyword">new</span> DataInputStream(System.in);   <span class="comment">//定义一个数据输入流对象in，从键盘接收数据</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Please input a number:&quot;</span>);<span class="comment">//键盘读入的是数字类型，不是字符、字符串类型</span></span><br><span class="line"></span><br><span class="line">Int i = in.readInt();   <span class="comment">//读取一个整形数据放到i中</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="i-和-i异同与作用"><a href="#i-和-i异同与作用" class="headerlink" title="i++和++i异同与作用"></a>i++和++i异同与作用</h2><p>记得刚开始学编程的时候还是从c语言开始的，还是看的谭浩强写的那本书，上面对介绍i++和++i的区别如下：<br>i++是先赋值，然后再自增；++i是先自增，后赋值。<br>用代码表示就是：<br>若 a = i++; 则等价于 a=i;i=i+1;<br>而 a = ++i; 则等价于 i=i+1;a=i;</p><p>在使用i=i++的过程中，它会先把i的原始值0复制到操作数栈中，然后再对局部变量表中的0进行+1操作使得i变为了1，此时操作数栈顶的值为0，然后执行赋值操作时候使用的是弹出的操作数栈顶的值，所以最后i又被修改为了0；<br>而i=++i的过程则是先对局部变量表中i的原始值进行加1的操作，即使得i由0变为1，然后将i的值复制到操作数栈，最后赋值即弹出操作数栈顶的值。<br>i++；和++i;的执行过程和结果是一样的。<br>在使用i++和++i赋值的过程中，他们区别在于前者先复制当前数据，再进行原始值加1的操作，后者则先进行了原始值加1的操作，再对计算后的结果进行了复制，最后返回的其实都是放入操作数栈的拷贝。<br>看懂了上面的原理，你应该能明白为什么int i = 0;i=i++ + ++i；等于2了吧。如果按原来的定义取理解，也许会得出结果为1。</p><h2 id="资源绑定器"><a href="#资源绑定器" class="headerlink" title="资源绑定器"></a>资源绑定器</h2><blockquote><p>在一些需要配置较多参数（url，user，password等）的项目中可以采用此种方式，省力</p></blockquote><ol><li><p>在<code>src</code>目录下新建一个<code>resources</code>的包</p></li><li><p>在<code>resources</code>包下面新建一个<code>db.properties</code>的<code>file</code></p></li><li><p>在<code>db.properties</code>的文件中填写相应的配置内容</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0ldvvcrb0j20e605fq39.jpg"                      alt="image-20220307205447231"                ></p></li><li><p>在项目代码中写上如下代码，以完成资源的绑定</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResourceBundleTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 资源绑定器，只能绑定xxx.properties文件。并且这个文件必须在类路径下。文件扩展名也必须是properties， 并且在写路径的时候，路径后面的扩展名不能写。</span></span><br><span class="line"><span class="comment">//      ResourceBundle bundle = ResourceBundle.getBundle(&quot;reflectClassInfo2&quot;);</span></span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">&quot;javase/reflectBean/db&quot;</span>);</span><br><span class="line">        String className = bundle.getString(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        System.out.println(className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何将一个变量传到一个字符串里面呢"><a href="#如何将一个变量传到一个字符串里面呢" class="headerlink" title="如何将一个变量传到一个字符串里面呢"></a>如何将一个变量传到一个字符串里面呢</h2><blockquote><p>例如如何将<code>loginname</code>和<code>loginpwd</code>传输到下面这条语句的合适位置呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;select * from t_user where login_name = &#x27;&#x27; and login-pwd = &quot;</span>;</span><br></pre></td></tr></table></figure></blockquote><p><strong>方法</strong>：直接用双引号将字符串包起来，再用+将变量连起来</p><p><code>String sql = &quot;select * from t_user where login_name = &#39;&quot;+ loginname +&quot;&#39; and login-pwd =&#39;&quot;+  loginpwd +&quot;&quot;&#39; &quot;;</code></p><h2 id="SQL注入现象"><a href="#SQL注入现象" class="headerlink" title="SQL注入现象"></a>SQL注入现象</h2><blockquote><p>如在判断登录的底层代码中存在如下语句</p><p><code>String sql = &quot;select * from t_user where login_name = &#39;&quot;+ loginname +&quot;&#39; and login-pwd =&#39;&quot;+ loginpwd +&quot;&quot;&#39; &quot;;</code></p><p>登录时输入信息为</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名：fsda</span><br><span class="line">密码：fsda&#x27; or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p>此时执行登录操作之后也能成功</p></blockquote><ul><li><p>在用户登录时用户输入的用户名和密码信息中含有SQL语句的关键字，这些关键字和数据库底层的SQL语句进行了拼接，导致运行时原底层的SQL语句的含义被扭曲了，也能正常运行蒙混过了判断条件。</p></li><li><p>根本原因：使用了<code>Statement</code>对字符串进行了拼接，用户输入的信息参与了底层SQL语句的编译</p><blockquote><p><code>java.sql.Statement接口的特点：先进行了字符串的拼接。然后再进行sql语句的编译</code>；</p><p>优点：使用Statement可以进行sql语句的拼接</p><p>缺点：因为拼接的存在，导致可能给不法分子机会，导致SQL注入。</p><p>java.sql.PreparedStatement接口的特点：先进行SQL语句的编译，然后再进行SQL语句的传值</p><p>优点：避免SQL注入</p><p>缺点：没办法进行SQL 语句的拼接，只能给SQL语句传值。</p></blockquote></li><li><p>解决办法：不再使用<code>Statement</code>方法，改用<code>java.sql.PreparedStatement</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个问号表示一个占位符，一个占位符只能接受一个”一个值/一个数据“</span></span><br><span class="line">String sql = <span class="string">&quot;select * from t_user where login_namne = ? and login_pwd =?&quot;</span>;</span><br><span class="line">stmt.conn.prepareStatement(sql);<span class="comment">//将sql语句发送给DBMS，进行sql语句的编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给占位符传值，JDBC所有的下标都是从一开始的；</span></span><br><span class="line">stmt.setString(<span class="number">1</span>,loginName);</span><br><span class="line">stmt.setString(<span class="number">2</span>,loginPwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行SQL</span></span><br><span class="line"><span class="comment">//这个方法不需要将sql语句传递金曲，不能这样：rs=. stmt.executeQuery(sql);</span></span><br><span class="line">rs = stmt.executeQuery();</span><br></pre></td></tr></table></figure></li></ul><h2 id="静态代码块？"><a href="#静态代码块？" class="headerlink" title="静态代码块？"></a>静态代码块？</h2><h2 id="类加载？"><a href="#类加载？" class="headerlink" title="类加载？"></a>类加载？</h2><h2 id="悲观锁？乐观锁？"><a href="#悲观锁？乐观锁？" class="headerlink" title="悲观锁？乐观锁？"></a>悲观锁？乐观锁？</h2><h2 id="args-？"><a href="#args-？" class="headerlink" title="args[]？"></a>args[]？</h2><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p>Java中var是Java10版本新出的特性，用它来定义局部变量。</p><h3 id="使用var-定义变量的语法："><a href="#使用var-定义变量的语法：" class="headerlink" title="使用var 定义变量的语法："></a>使用var 定义变量的语法：</h3><p>var 变量名 = 初始值；</p><p>如果代码：<br>var a = 20；<br>var a =8.9；<br>这样的代码会报错 显示int到double的转换；<br>Java是强类型语言，每个变量都有固定的变量类型。</p><h3 id="var是什么："><a href="#var是什么：" class="headerlink" title="var是什么："></a>var是什么：</h3><p>var不是关键字，它相当于是一种动态类型；<br>var动态类型是编译器根据变量所赋的值来推断类型；<br>var 没有改变Java的本质，var只是一种简便的写法，<br>就是说在定义局部变量时，任意什么类型都可以用var定义变量的类型会根据所赋的值来判断。</p><h3 id="用var声明变量的注意事项："><a href="#用var声明变量的注意事项：" class="headerlink" title="用var声明变量的注意事项："></a>用var声明变量的注意事项：</h3><p>1，var只能在方法内定义变量，不允许定义类的成员变量。<br>2，var 定义变量必须赋初始值，——》以后不能在赋初始值。<br>3，var每次只能定义一个变量，不能复合声明变量。</p><h3 id="使用var定义变量的优缺点："><a href="#使用var定义变量的优缺点：" class="headerlink" title="使用var定义变量的优缺点："></a>使用var定义变量的优缺点：</h3><p>优点：使代码简洁和整齐。<br>缺点：降低了程序的可读性。<br>什么时候该用var定义变量：<br>如果你定义变量时，给变量赋给一个直观的值，这时就可以使用var定义变量，</p><h3 id="最不能使用var定义变量："><a href="#最不能使用var定义变量：" class="headerlink" title="最不能使用var定义变量："></a>最不能使用var定义变量：</h3><p>1，给var定义的变量赋给一个很复杂的表达式时，这样使表达式的返回值不直观，不能用var定义变量。<br>2，var定义的变量作用域很长时，方法长和var变量影响较大时，不用var定义变量。<br><a class="link"   href="https://blog.csdn.net/lzh_99999/article/details/102001216" >原文链接<i class="fas fa-external-link-alt"></i></a></p><h2 id="Spring注解的原理"><a href="#Spring注解的原理" class="headerlink" title="Spring注解的原理"></a>Spring注解的原理</h2><p>Spring框架的核心就是IOC,通过controller一类注解的bean的实例化过程可以大体总结spring注解的工作原理：</p><ul><li>利用asm技术扫描class文件，转化成Springbean结构，把符合扫描规则的（主要是是否有相关的注解标注，例如@Component）bean注册到Spring 容器中beanFactory</li><li>注册处理器，包括注解处理器</li><li>实例化处理器（包括注解处理器），并将其注册到容器的beanPostProcessors列表中</li><li>创建bean的过程中，属性注入或者初始化bean时会调用对应的注解处理器进行处理。</li></ul><h2 id="接口有什么用？"><a href="#接口有什么用？" class="headerlink" title="接口有什么用？"></a>接口有什么用？</h2><p>篇一：</p><blockquote><p>下面我给大家总结了4点关于JAVA中接口存在的意义：</p><p>　　1、重要性：在Java语言中， <a class="link"   href="https://so.csdn.net/so/search?q=abstract&spm=1001.2101.3001.7020" >abstract<i class="fas fa-external-link-alt"></i></a> class 和interface 是支持抽象类定义的两种机制。正是由于这两种机制的存在，才赋予了Java强大的 面向对象能力。</p><p>　　2、简单、规范性：如果一个项目比较庞大，那么就需要一个能理清所有业务的架构师来定义一些主要的接口，这些接口不仅告诉开发人员你需要实现那些业务，而且也将命名规范限制住了（防止一些开发人员随便命名导致别的程序员无法看明白）。</p><p>　　3、维护、拓展性：比如你要做一个画板程序，其中里面有一个面板类，主要负责绘画功能，然后你就这样定义了这个类。</p><p>​     可是在不久将来，你突然发现这个类满足不了你了，然后你又要重新设计这个类，更糟糕是你可能要放弃这个类，那么其他地方可能有引用他，这样修改起来很麻烦。</p><p>​     如果你一开始定义一个接口，把绘制功能放在接口里，然后定义类时实现这个接口，然后你只要用这个接口去引用实现它的类就行了，以后要换的话只不过是引用另一个类而已，这样就达到维护、拓展的方便性。</p><p>　　4、安全、严密性：接口是实现软件松耦合的重要手段，它描叙了系统对外的所有服务，而不涉及任何具体的实现细节。这样就比较安全、严密一些（一般软件服务商考虑的比较多）。</p></blockquote><p>篇二：</p><blockquote><p>接口是软件工程最重要的概念，在java上要格外感谢Spring的贡献。这个概念对于新人来讲，是比较难理解的，最重要的原因就是需要有一定的代码量，特别是做过一些项目的重构，维护，变更等事情的时候感触才会更深一些。</p><p><strong>1 “接口+实现”最常见的优势就是实现类和接口分离，在更换实现类的时候，不用更换接口功能。</strong></p><p>比较常见的例子是发送短信。一般发送短信的场景包括注册用户，找回密码，重要通知，修改交易密码等。短信现在的结构是先接上各家短信通道公司，再经由联通移动等发送出去。</p><p>一般而言，短信分成两种，一种注册短信，一次只发给用户一条。这种短信到达率比较高，可能会在99%以上，也要看各种短信通道方，更会区分移动和联通。另外一种是营销短信，这种短信常见于“某公司3周年大庆，1元领取程序员鼓励师”之类的。这种短信到达率非常低。而且也经常会被封掉。但是短信又是注册的第一步，用户体验做的再好，手机收不到验证码也没用。所以觉见的做法是，会备用两个或者是多个<a class="link"   href="https://www.zhihu.com/search?q=%E7%9F%AD%E4%BF%A1%E9%80%9A%E9%81%93&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:133071950%7D" >短信通道<i class="fas fa-external-link-alt"></i></a>。</p><p>刚刚已经讲过了，调用短信接口的地方比较多，可能是用户发起的，也可能是程序检测到某种行为触发的。也就是说，会有多个地方调用短信接口，那么我们这个时候要解决的问题就是，能否在更换短信通道方的时候，不更改其他模块中被引入的代码？接口在这个时候就完美的实现了这个功能点。无论是哪个模块，我要发送的内容和预期的结果是一致的，具体是用哪家短信通道的实现类，不重要。</p><p>所以通常是一个SMSService做为接口，不同的公司因为有不同的实现方式，所以会有多个实现类，比如说SMSService{CorpA}Impl，SMSService{CorpB}Impl。这是一个完美的抽象，无论未来有多少种短信公司接入，无论短信公司的营销人员送了多少个香吻给公司的商务总监，程序员总是能够开心的完成功能。</p><p><strong>2.这对于做<a class="link"   href="https://www.zhihu.com/search?q=%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:133071950%7D" >单元测试<i class="fas fa-external-link-alt"></i></a>也非常有帮助。</strong></p><p>如果你是一个有了那么点经验的程序员，如果你还没有习惯TDD的开发。可以体验一下这种写法。还是拿短信为例。</p><p>先写一个SMSServiceTest。然后写一个Test方法。这个时候什么都没有，不用管。先直接这么写。</p><p>int code=SMSSevice.sendTextMessage(mobile,content,type);</p><p>这个时候IDE会提示你没有这个SMSService，用代码自动生成工具去创建这么一个接口出来。再根据提示把方法创建出来。</p><p>再写 SMSService smsService=new SMSServiceCorpaImpl();</p><p>再根据代码把实现类生成了。一般来说IDE会自动留一个空的方法。不用管。</p><p>这里只是一个简单的例子，但是你发现，当你用TDD的这种方式去写代码的时候，完全不用关系SMSService是怎么内部实现的。你只需要继续写你的单元测试代码好了，明确的知道这个SMSService要做的功能是发送短信，需要传递手机号，内容，类型，返回一个状态码。</p><p>那么接着说为什么对单元测试很方便？一般而言会用Spring配置Bean，所以实际上你的单元测试代码也不用有改动，无论是测试哪一个实现类，都只通过更改配置文件就可以完成。</p><p>想想，如果没有接口呢？是不是要对每一个短信通道单独写一个单元测试的方法？</p><p><strong>3.对于不需要频繁更变实现类的方法，是不是就可以不用写接口了？</strong></p><p>答案是No。整个<a class="link"   href="https://www.zhihu.com/search?q=%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:133071950%7D" >系统架构<i class="fas fa-external-link-alt"></i></a>的代码可以单纯认为有四部分构成。<a class="link"   href="https://www.zhihu.com/search?q=Model+Interface+Service+Util&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:133071950%7D" >Model+Interface+Service+Util<i class="fas fa-external-link-alt"></i></a></p><p>Model是纯粹的Pojo，贫血模型，Inteface和Service是接口和实现分开的，Util是全项目通用，或者是跨项目通用的，跟业务逻辑没有任何关系的。</p><p>写接口最大的好处就是在你写的Controller代码，或者是Service里的主要业务逻辑代码的时候，屏蔽掉细节。</p><p>写一个业务逻辑的时候，比如说修真院的加入班级。</p><p>第一步，做校验，用户是否为空，班级是否不存在，是否已经加入了班级等等。</p><p>第二步，更新班级和用户的关系表，更新班级总人数，更新职业总人数，更新用户的最新班级ID。</p><p>第三步，发送系统通知，告知用户加入班级成功。</p><p>如果说不用接口，只用实现类的话，第一种方式就是把所有的代码都写在这个Controller里去，代码会非常非常繁琐，一个函数突破几千行轻轻松松，而且改动起来很麻烦。</p><p>第二种方式就是抽象出来函数。这种方式在某种程度上能够解决代码块大的问题，但是你必须要New一个实现类出来，想想在上述逻辑中，需要new几个实现类？这些实现类就会被New的各处都是，甚至改个名字都很蛋疼。</p><p>但是如果你使用接口的话，你会发现，接口是强制于你去将复杂的业务逻辑抽象成具体做的事儿。</p><p>比如说，</p><p>if(user==null){</p><p>// to do something</p><p>}</p><p>就变成了CheckUser（uid）这么一个接口。实现类也明确了自已要做的事情。</p><p>从某种程度上来说，抽象成一个私有方法也能解决这个问题，但是一般都会推荐，如果你发现你写了很多私有方法，要么是他们可以继续演化成一个util，要么是可以成为一个Service。</p></blockquote><h2 id="dao是什么？"><a href="#dao是什么？" class="headerlink" title="dao是什么？"></a>dao是什么？</h2><h3 id="定义优势"><a href="#定义优势" class="headerlink" title="定义优势"></a>定义优势</h3><p><strong>DAO (DataAccessobjects 数据存取对象)<strong>是指位于业务逻辑和持久化数据之间实现对持久化数据的访问。通俗来讲，就是将数据库操作都封装起来。在面向对象设计过程中，有一些”套路”用于解决特定问题称为模式。</strong>DAO 模式提供了访问关系型数据库系统所需操作的接口，将数据访问和业务逻辑分离对上层提供面向对象的数据访问接口</strong>。从以上 DAO 模式使用可以看出，DAO 模式的优势就在于它实现了两次隔离：</p><ol><li><strong>隔离了数据访问代码和业务逻辑代码。</strong>业务逻辑代码直接调用DAO方法即可，完全感觉不到数据库表的存在。分工明确，数据访问层代码变化不影响业务逻辑代码,这符合单一职能原则，降低了藕合性，提高了可复用性。</li><li><strong>隔离了不同数据库实现。</strong>采用面向接口编程，如果底层数据库变化，如由 MySQL 变成 Oracle 只要增加 DAO 接口的新实现类即可，原有 MySQ 实现不用修改。这符合 “开-闭” 原则。该原则降低了代码的藕合性，提高了代码扩展性和系统的可移植性。</li></ol><h3 id="典型的DAO-模式的主要组成："><a href="#典型的DAO-模式的主要组成：" class="headerlink" title="典型的DAO 模式的主要组成："></a>典型的DAO 模式的主要组成：</h3><p>1、DAO接口： 把对数据库的所有操作定义成抽象方法，可以提供多种实现。<br>2、DAO 实现类： 针对不同数据库给出DAO接口定义方法的具体实现。<br>3、实体类：用于存放与传输对象数据。<br>4、数据库连接和关闭工具类： 避免了数据库连接和关闭代码的重复使用，方便修改。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li>先看看DAO接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PetDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有宠物</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Pet&gt; <span class="title">findAllPets</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再看看DAO实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDao</span> <span class="keyword">implements</span> <span class="title">PetDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有宠物</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Pet&gt; <span class="title">findAllPets</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection conn=BaseDao.getConnection();</span><br><span class="line">        String sql=<span class="string">&quot;select * from pet&quot;</span>;</span><br><span class="line">        PreparedStatement stmt= conn.prepareStatement(sql);</span><br><span class="line">        ResultSet rs=    stmt.executeQuery();</span><br><span class="line">        List&lt;Pet&gt; petList=<span class="keyword">new</span> ArrayList&lt;Pet&gt;();</span><br><span class="line">        <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">            Pet pet=<span class="keyword">new</span> Pet(</span><br><span class="line">                    rs.getInt(<span class="string">&quot;id&quot;</span>),</span><br><span class="line">                    rs.getInt(<span class="string">&quot;owner_id&quot;</span>),</span><br><span class="line">                    rs.getInt(<span class="string">&quot;store_id&quot;</span>),</span><br><span class="line">                    rs.getString(<span class="string">&quot;name&quot;</span>),</span><br><span class="line">                    rs.getString(<span class="string">&quot;type_name&quot;</span>),</span><br><span class="line">                    rs.getInt(<span class="string">&quot;health&quot;</span>),</span><br><span class="line">                    rs.getInt(<span class="string">&quot;love&quot;</span>),</span><br><span class="line">                    rs.getDate(<span class="string">&quot;birthday&quot;</span>)</span><br><span class="line">                    );</span><br><span class="line">                petList.add(pet);</span><br><span class="line">        &#125;</span><br><span class="line">        BaseDao.closeAll(conn, stmt, rs);</span><br><span class="line">        <span class="keyword">return</span> petList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>宠物实体类(里面get/set方法就不列出了)：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;    </span><br><span class="line">    <span class="keyword">private</span> Integer ownerId;    <span class="comment">//主人ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer storeId;    <span class="comment">//商店ID</span></span><br><span class="line">    <span class="keyword">private</span> String name;    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String typeName;    <span class="comment">//类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> health;    <span class="comment">//健康值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> love;    <span class="comment">//爱心值</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;    <span class="comment">//生日</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>连接数据库</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/epet&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(driver);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(Connection conn,Statement stmt,ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeSQL</span><span class="params">(String preparedSql, Object[] param)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">/* 处理SQL,执行SQL */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = getConnection(); <span class="comment">// 得到数据库连接</span></span><br><span class="line">            pstmt = conn.prepareStatement(preparedSql); <span class="comment">// 得到PreparedStatement对象</span></span><br><span class="line">            <span class="keyword">if</span> (param != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; param.length; i++) &#123;</span><br><span class="line">                    pstmt.setObject(i + <span class="number">1</span>, param[i]); <span class="comment">// 为预编译sql设置参数</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ResultSet num = pstmt.executeQuery(); <span class="comment">// 执行SQL语句</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace(); <span class="comment">// 处理SQLException异常</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                BaseDao.closeAll(conn, pstmt, <span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;    </span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转自<a class="link"   href="https://blog.csdn.net/luyaran/article/details/80282655" >此处<i class="fas fa-external-link-alt"></i></a></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="MySQL-事务"><a href="#MySQL-事务" class="headerlink" title="MySQL 事务"></a>MySQL 事务</h3><p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你既需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p><ul><li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li><li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li><li>事务用来管理 insert,update,delete 语句</li></ul><p>一般来说，事务是必须满足4个条件（ACID）：：原子性（<strong>A</strong>tomicity，或称不可分割性）、一致性（<strong>C</strong>onsistency）、隔离性（<strong>I</strong>solation，又称独立性）、持久性（<strong>D</strong>urability）。</p><ul><li><strong>原子性：</strong>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li><li><strong>一致性：</strong>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li><li><strong>隔离性：</strong>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li><li><strong>持久性：</strong>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ul><blockquote><p>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交。</p></blockquote><h4 id="事务控制语句："><a href="#事务控制语句：" class="headerlink" title="事务控制语句："></a>事务控制语句：</h4><ul><li>BEGIN 或 START TRANSACTION 显式地开启一个事务；</li><li>COMMIT 也可以使用 COMMIT WORK，不过二者是等价的。COMMIT 会提交事务，并使已对数据库进行的所有修改成为永久性的；</li><li>ROLLBACK 也可以使用 ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li><li>SAVEPOINT identifier，SAVEPOINT 允许在事务中创建一个保存点，一个事务中可以有多个 SAVEPOINT；</li><li>RELEASE SAVEPOINT identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li><li>ROLLBACK TO identifier 把事务回滚到标记点；</li><li>SET TRANSACTION 用来设置事务的隔离级别。InnoDB 存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和 SERIALIZABLE。</li></ul><h4 id="MYSQL-事务处理主要有两种方法："><a href="#MYSQL-事务处理主要有两种方法：" class="headerlink" title="MYSQL 事务处理主要有两种方法："></a>MYSQL 事务处理主要有两种方法：</h4><p>1、用 BEGIN, ROLLBACK, COMMIT来实现</p><ul><li><strong>BEGIN</strong> 开始一个事务</li><li><strong>ROLLBACK</strong> 事务回滚</li><li><strong>COMMIT</strong> 事务确认</li></ul><p>2、直接用 SET 来改变 MySQL 的自动提交模式: </p><ul><li><strong>SET AUTOCOMMIT=0</strong> 禁止自动提交</li><li><strong>SET AUTOCOMMIT=1</strong> 开启自动提交</li></ul><h4 id="事务测试"><a href="#事务测试" class="headerlink" title="事务测试"></a>事务测试</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; CREATE TABLE runoob_transaction_test( id int(5)) engine=innodb;  # 创建数据表</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; select * from runoob_transaction_test;</span><br><span class="line">Empty set (0.01 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; begin;  # 开始事务</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; insert into runoob_transaction_test value(5);</span><br><span class="line">Query OK, 1 rows affected (0.01 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; insert into runoob_transaction_test value(6);</span><br><span class="line">Query OK, 1 rows affected (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; commit; # 提交事务</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt;  select * from runoob_transaction_test;</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">| 5    |</span><br><span class="line">| 6    |</span><br><span class="line">+------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; begin;    # 开始事务</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt;  insert into runoob_transaction_test values(7);</span><br><span class="line">Query OK, 1 rows affected (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; rollback;   # 回滚</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt;   select * from runoob_transaction_test;   # 因为回滚所以数据没有插入</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">| 5    |</span><br><span class="line">| 6    |</span><br><span class="line">+------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h4 id="PHP中使用事务实例"><a href="#PHP中使用事务实例" class="headerlink" title="PHP中使用事务实例"></a>PHP中使用事务实例</h4><h4 id="MySQL-ORDER-BY-测试："><a href="#MySQL-ORDER-BY-测试：" class="headerlink" title="MySQL ORDER BY 测试："></a>MySQL ORDER BY 测试：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dbhost</span> = <span class="string">&#x27;localhost&#x27;</span>;  <span class="comment">// mysql服务器主机地址</span></span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&#x27;root&#x27;</span>;            <span class="comment">// mysql用户名</span></span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&#x27;123456&#x27;</span>;          <span class="comment">// mysql用户名密码</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="variable">$dbhost</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>);</span><br><span class="line"><span class="keyword">if</span>(! <span class="variable">$conn</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;连接失败: &#x27;</span> . mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置编码，防止中文乱码</span></span><br><span class="line">mysqli_query(<span class="variable">$conn</span>, <span class="string">&quot;set names utf8&quot;</span>);</span><br><span class="line">mysqli_select_db( <span class="variable">$conn</span>, <span class="string">&#x27;RUNOOB&#x27;</span> );</span><br><span class="line">mysqli_query(<span class="variable">$conn</span>, <span class="string">&quot;SET AUTOCOMMIT=0&quot;</span>); <span class="comment">// 设置为不自动提交，因为MYSQL默认立即执行</span></span><br><span class="line">mysqli_begin_transaction(<span class="variable">$conn</span>);            <span class="comment">// 开始事务定义</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(!mysqli_query(<span class="variable">$conn</span>, <span class="string">&quot;insert into runoob_transaction_test (id) values(8)&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    mysqli_query(<span class="variable">$conn</span>, <span class="string">&quot;ROLLBACK&quot;</span>);     <span class="comment">// 判断当执行失败时回滚</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(!mysqli_query(<span class="variable">$conn</span>, <span class="string">&quot;insert into runoob_transaction_test (id) values(9)&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    mysqli_query(<span class="variable">$conn</span>, <span class="string">&quot;ROLLBACK&quot;</span>);      <span class="comment">// 判断执行失败时回滚</span></span><br><span class="line">&#125;</span><br><span class="line">mysqli_commit(<span class="variable">$conn</span>);            <span class="comment">//执行事务</span></span><br><span class="line">mysqli_close(<span class="variable">$conn</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;文章格式提醒：问题2级、答案分支依次递减；未解决的结尾用”?”进行标识；倒序更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;主键策略？&quot;&gt;&lt;a href=&quot;#主键策略？&quot; class=&quot;headerlink&quot; title=&quot;主键策略？&quot;</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Java" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
    <category term="Java" scheme="https://www.lzp.zone/tags/Java/"/>
    
    <category term="bug" scheme="https://www.lzp.zone/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Spring基础知识汇总</title>
    <link href="https://www.lzp.zone/2022/03/20/Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/"/>
    <id>https://www.lzp.zone/2022/03/20/Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</id>
    <published>2022-03-20T13:33:23.000Z</published>
    <updated>2022-03-24T15:43:57.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h2><p>Spring框架由Rod Johnson开发，2004年发布了Spring框架的第一版。Spring是一个从实际开发中抽取出来的框架，因此它完成了大量开发中的通用步骤，留给开发者的仅仅是与特定应用相关的部分，从而大大提高了企业应用的开发效率。</p><p>Spring总结起来优点如下：</p><ul><li>低侵入式设计，代码的污染极低。</li><li>独立于各种应用服务器，基于Spring框架的应用，可以真正实现Write Once，Run Anywhere的承诺。</li><li>Spring的IoC容器降低了业务对象替换的复杂性，提高了组件之间的解耦。</li><li>Spring的AOP支持允许将一些通用任务如安全、事务、日志等进行集中式管理，从而提供了更好的复用。</li><li>Spring的ORM和DAO提供了与第三方持久层框架的良好整合，并简化了底层的数据库访问。</li><li>Spring的高度开放性，并不强制应用完全依赖于Spring，开发者可自由选用Spring框架的部分或全部。</li></ul><p>Spring框架的组成结构图如下所示：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gogef4tmj20g30cfgn3.jpg"                      alt="spring-overview"                ></p><h2 id="Spring的核心机制"><a href="#Spring的核心机制" class="headerlink" title="Spring的核心机制"></a>Spring的核心机制</h2><h3 id="管理Bean"><a href="#管理Bean" class="headerlink" title="管理Bean"></a>管理Bean</h3><p>程序主要是通过Spring容器来访问容器中的Bean，ApplicationContext是Spring容器最常用的接口，该接口有如下两个实现类：</p><ul><li>ClassPathXmlApplicationContext: 从类加载路径下搜索配置文件，并根据配置文件来创建Spring容器。</li><li>FileSystemXmlApplicationContext: 从文件系统的相对路径或绝对路径下去搜索配置文件，并根据配置文件来创建Spring容器。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class BeanTest&#123;</span><br><span class="line">    public static void main(String args[]) throws Exception&#123;</span><br><span class="line">        ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">        Person p = ctx.getBean(&quot;person&quot;, Person.class);</span><br><span class="line">        p.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Eclipse使用Spring"><a href="#Eclipse使用Spring" class="headerlink" title="Eclipse使用Spring"></a>Eclipse使用Spring</h3><p>在Eclipse等IDE工具中，用户可以自建<code>User Library</code>，然后把Spring的Jar包都放入其中，当然也可以将Jar包直接放在项目的<code>/WEB-INF/lib</code>目录下，但是如果使用<code>User Library</code>，在项目发布时，需要将用户库所引用的Jar文件随应用一起发布，就是将User Library所使用的Jar复制到<code>/WEB-INF/lib</code>目录下，这是因为对于一个Web应用，Eclipse部署Web应用时不会将用户库的Jar文件复制到<code>/WEB-INF/lib</code>下，需要手动复制。</p><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>Spring框架的核心功能有两个：</p><ul><li>Spring容器作为超级大工厂，负责创建、管理所有的Java对象，这些Java对象被称为Bean。</li><li>Spring容器管理容器中Bean之间的依赖关系，Spring使用一种被称为”依赖注入”的方式来管理Bean之间的依赖关系。</li></ul><p>使用依赖注入，不仅可以为Bean注入普通的属性值，还可以注入其他Bean的引用。依赖注入是一种优秀的解耦方式，其可以让Bean以配置文件组织在一起，而不是以硬编码的方式耦合在一起。</p><h4 id="理解依赖注入"><a href="#理解依赖注入" class="headerlink" title="理解依赖注入"></a>理解依赖注入</h4><p>Rod Johnson是第一个高度重视以配置文件来管理Java实例的协作关系的人，他给这种方式起了一个名字：控制反转（Inverse of Control，IoC）。后来Martine Fowler为这种方式起了另一个名称：依赖注入（Dependency Injection），因此不管是依赖注入，还是控制反转，其含义完全相同。当某个Java对象（调用者）需要调用另一个Java对象（被依赖对象）的方法时，在传统模式下通常有两种做法：</p><ol><li>原始做法: 调用者<strong>主动</strong>创建被依赖对象，然后再调用被依赖对象的方法。</li><li>简单工厂模式: 调用者先找到被依赖对象的工厂，然后<strong>主动</strong>通过工厂去获取被依赖对象，最后再调用被依赖对象的方法。</li></ol><p>注意上面的<strong>主动</strong>二字，这必然会导致调用者与被依赖对象实现类的硬编码耦合，非常不利于项目升级的维护。使用Spring框架之后，调用者无需<strong>主动</strong>获取被依赖对象，调用者只要<strong>被动</strong>接受Spring容器为调用者的成员变量赋值即可，由此可见，使用Spring后，调用者获取被依赖对象的方式由原来的主动获取，变成了被动接受——所以Rod Johnson称之为控制反转。</p><p>另外从Spring容器的角度来看，Spring容器负责将被依赖对象赋值给调用者的成员变量——相当于为调用者注入它依赖的实例，因此Martine Fowler称之为依赖注入。</p><h4 id="设值注入"><a href="#设值注入" class="headerlink" title="设值注入"></a>设值注入</h4><p>设值注入是指IoC容器通过成员变量的setter方法来注入被依赖对象。这种注入方式简单、直观，因而在Spring的依赖注入里大量使用。</p><h4 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h4><p>利用构造器来设置依赖关系的方式，被称为构造注入。通俗来说，就是驱动Spring在底层以反射方式执行带指定参数的构造器，当执行带参数的构造器时，就可利用构造器参数对成员变量执行初始化——这就是构造注入的本质。</p><h4 id="两种注入方式的对比"><a href="#两种注入方式的对比" class="headerlink" title="两种注入方式的对比"></a>两种注入方式的对比</h4><p>设值注入有如下优点：</p><ul><li>与传统的JavaBean的写法更相似，程序开发人员更容易理解、接受。通过setter方法设定依赖关系显得更加直观、自然。</li><li>对于复杂的依赖关系，如果采用构造注入，会导致构造器过于臃肿，难以阅读。Spring在创建Bean实例时，需要同时实例化其依赖的全部实例，因而导致性能下降。而使用设值注入，则能避免这些问题。</li><li>尤其在某些成员变量可选的情况下，多参数的构造器更加笨重。</li></ul><p>构造注入优势如下：</p><ul><li>构造注入可以在构造器中决定依赖关系的注入顺序，优先依赖的优先注入。</li><li>对于依赖关系无需变化的Bean，构造注入更有用处。因为没有setter方法，所有的依赖关系全部在构造器内设定，无须担心后续的代码对依赖关系产生破坏。</li><li>依赖关系只能在构造器中设定，则只有组件的创建者才能改变组件的依赖关系，对组件的调用者而言，组件内部的依赖关系完全透明，更符合高内聚的原则。</li></ul><p>*<strong>注意：*</strong><br>建议采用设值注入为主，构造注入为辅的注入策略。对于依赖关系无须变化的注入，尽量采用构造注入；而其他依赖关系的注入，则考虑采用设值注入。</p><h3 id="Spring容器中的Bean"><a href="#Spring容器中的Bean" class="headerlink" title="Spring容器中的Bean"></a>Spring容器中的Bean</h3><p>对于开发者来说，开发者使用Spring框架主要是做两件事：①开发Bean；②配置Bean。对于Spring框架来说，它要做的就是根据配置文件来创建Bean实例，并调用Bean实例的方法完成”依赖注入”——这就是所谓IoC的本质。</p><h4 id="容器中Bean的作用域"><a href="#容器中Bean的作用域" class="headerlink" title="容器中Bean的作用域"></a>容器中Bean的作用域</h4><p>当通过Spring容器创建一个Bean实例时，不仅可以完成Bean实例的实例化，还可以为Bean指定特定的作用域。Spring支持如下五种作用域：</p><ol><li>singleton: 单例模式，在整个Spring IoC容器中，singleton作用域的Bean将只生成一个实例。</li><li>prototype: 每次通过容器的getBean()方法获取prototype作用域的Bean时，都将产生一个新的Bean实例。</li><li>request: 对于一次HTTP请求，request作用域的Bean将只生成一个实例，这意味着，在同一次HTTP请求内，程序每次请求该Bean，得到的总是同一个实例。只有在Web应用中使用Spring时，该作用域才真正有效。</li><li>session：该作用域将 bean 的定义限制为 HTTP 会话。 只在web-aware Spring ApplicationContext的上下文中有效。</li><li>global session: 每个全局的HTTP Session对应一个Bean实例。在典型的情况下，仅在使用portlet context的时候有效，同样只在Web应用中有效。</li></ol><p>如果不指定Bean的作用域，Spring默认使用singleton作用域。prototype作用域的Bean的创建、销毁代价比较大。而singleton作用域的Bean实例一旦创建成果，就可以重复使用。因此，应该尽量避免将Bean设置成prototype作用域。</p><h3 id="使用自动装配注入合作者Bean"><a href="#使用自动装配注入合作者Bean" class="headerlink" title="使用自动装配注入合作者Bean"></a>使用自动装配注入合作者Bean</h3><p>Spring能自动装配Bean与Bean之间的依赖关系，即无须使用ref显式指定依赖Bean，而是由Spring容器检查XML配置文件内容，根据某种规则，为调用者Bean注入被依赖的Bean。<br>Spring自动装配可通过<code>&lt;beans/&gt;</code>元素的<code>default-autowire</code>属性指定，该属性对配置文件中所有的Bean起作用；也可通过对<code>&lt;bean/&gt;</code>元素的<code>autowire</code>属性指定，该属性只对该Bean起作用。</p><p><code>autowire</code>和<code>default-autowire</code>可以接受如下值：</p><ul><li><code>no</code>: 不使用自动装配。Bean依赖必须通过ref元素定义。这是默认配置，在较大的部署环境中不鼓励改变这个配置，显式配置合作者能够得到更清晰的依赖关系。</li><li><code>byName</code>: 根据setter方法名进行自动装配。Spring容器查找容器中全部Bean，找出其id与setter方法名去掉set前缀，并小写首字母后同名的Bean来完成注入。如果没有找到匹配的Bean实例，则Spring不会进行任何注入。</li><li><code>byType</code>: 根据setter方法的形参类型来自动装配。Spring容器查找容器中的全部Bean，如果正好有一个Bean类型与setter方法的形参类型匹配，就自动注入这个Bean；如果找到多个这样的Bean，就抛出一个异常；如果没有找到这样的Bean，则什么都不会发生，setter方法不会被调用。</li><li><code>constructor</code>: 与byType类似，区别是用于自动匹配构造器的参数。如果容器不能恰好找到一个与构造器参数类型匹配的Bean，则会抛出一个异常。</li><li><code>autodetect</code>: Spring容器根据Bean内部结构，自行决定使用constructor或byType策略。如果找到一个默认的构造函数，那么就会应用byType策略。</li></ul><p><strong>当一个Bean既使用自动装配依赖，又使用ref显式指定依赖时，则显式指定的依赖覆盖自动装配依赖；对于大型的应用，不鼓励使用自动装配。虽然使用自动装配可减少配置文件的工作量，但大大将死了依赖关系的清晰性和透明性。依赖关系的装配依赖于源文件的属性名和属性类型，导致Bean与Bean之间的耦合降低到代码层次，不利于高层次解耦。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--通过设置可以将Bean排除在自动装配之外--&gt;</span><br><span class="line">&lt;bean id=&quot;&quot; autowire-candidate=&quot;false&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--除此之外，还可以在beans元素中指定，支持模式字符串，如下所有以abc结尾的Bean都被排除在自动装配之外--&gt;</span><br><span class="line">&lt;beans default-autowire-candidates=&quot;*abc&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="创建Bean的3种方式"><a href="#创建Bean的3种方式" class="headerlink" title="创建Bean的3种方式"></a>创建Bean的3种方式</h2><h3 id="使用构造器创建Bean实例"><a href="#使用构造器创建Bean实例" class="headerlink" title="使用构造器创建Bean实例"></a>使用构造器创建Bean实例</h3><p>使用构造器来创建Bean实例是最常见的情况，如果不采用构造注入，Spring底层会调用Bean类的无参数构造器来创建实例，因此要求该Bean类提供无参数的构造器。</p><p>采用默认的构造器创建Bean实例，Spring对Bean实例的所有属性执行默认初始化，即所有的基本类型的值初始化为0或false；所有的引用类型的值初始化为null。</p><h3 id="使用静态工厂方法创建Bean"><a href="#使用静态工厂方法创建Bean" class="headerlink" title="使用静态工厂方法创建Bean"></a>使用静态工厂方法创建Bean</h3><p>使用静态工厂方法创建Bean实例时，class属性也必须指定，但此时class属性并不是指定Bean实例的实现类，而是静态工厂类，Spring通过该属性知道由哪个工厂类来创建Bean实例。</p><p>除此之外，还需要使用factory-method属性来指定静态工厂方法，Spring将调用静态工厂方法返回一个Bean实例，一旦获得了指定Bean实例，Spring后面的处理步骤与采用普通方法创建Bean实例完全一样。如果静态工厂方法需要参数，则使用<code>&lt;constructor-arg.../&gt;</code>元素指定静态工厂方法的参数。</p><h3 id="调用实例工厂方法创建Bean"><a href="#调用实例工厂方法创建Bean" class="headerlink" title="调用实例工厂方法创建Bean"></a>调用实例工厂方法创建Bean</h3><p>实例工厂方法与静态工厂方法只有一个不同：调用静态工厂方法只需使用工厂类即可，而调用实例工厂方法则需要工厂实例。使用实例工厂方法时，配置Bean实例的<code>&lt;bean.../&gt;</code>元素无须class属性，配置实例工厂方法使用<code>factory-bean</code>指定工厂实例。<br>采用实例工厂方法创建Bean的<code>&lt;bean.../&gt;</code>元素时需要指定如下两个属性：</p><ul><li>factory-bean: 该属性的值为工厂Bean的id。</li><li>factory-method: 该属性指定实例工厂的工厂方法。</li></ul><p>若调用实例工厂方法时需要传入参数，则使用<code>&lt;constructor-arg.../&gt;</code>元素确定参数值。</p><h2 id="协调作用域不同步的Bean"><a href="#协调作用域不同步的Bean" class="headerlink" title="协调作用域不同步的Bean"></a>协调作用域不同步的Bean</h2><p>当singleton作用域的Bean依赖于prototype作用域的Bean时，会产生不同步的现象，原因是因为当Spring容器初始化时，容器会预初始化容器中所有的<code>singleton Bean</code>，由于<code>singleton Bean</code>依赖于<code>prototype Bean</code>，因此Spring在初始化<code>singleton Bean</code>之前，会先创建<code>prototypeBean</code>——然后才创建<code>singleton Bean</code>，接下里将<code>prototype Bean</code>注入<code>singleton Bean</code>。<br>解决不同步的方法有两种：</p><ul><li>放弃依赖注入: singleton作用域的Bean每次需要prototype作用域的Bean时，主动向容器请求新的Bean实例，即可保证每次注入的<code>prototype Bean</code>实例都是最新的实例。</li><li>利用方法注入: 方法注入通常使用lookup方法注入，使用lookup方法注入可以让Spring容器重写容器中Bean的抽象或具体方法，返回查找容器中其他Bean的结果，被查找的Bean通常是一个<code>non-singleton Bean</code>。Spring通过使用JDK动态代理或cglib库修改客户端的二进制码，从而实现上述要求。</li></ul><p>建议采用第二种方法，使用方法注入。为了使用lookup方法注入，大致需要如下两步：</p><ol><li>将调用者Bean的实现类定义为抽象类，并定义一个抽象方法来获取被依赖的Bean。</li><li>在<code>&lt;bean.../&gt;</code>元素中添加<code>&lt;lookup-method.../&gt;</code>子元素让Spring为调用者Bean的实现类实现指定的抽象方法。</li></ol><p>*<strong>注意：*</strong></p><blockquote><p>Spring会采用运行时动态增强的方式来实现<code>&lt;lookup-method.../&gt;</code>元素所指定的抽象方法，如果目标抽象类实现过接口，Spring会采用JDK动态代理来实现该抽象类，并为之实现抽象方法；如果目标抽象类没有实现过接口，Spring会采用cglib实现该抽象类，并为之实现抽象方法。Spring4.0的spring-core-xxx.jar包中已经集成了cglib类库。</p></blockquote><h2 id="两种后处理器"><a href="#两种后处理器" class="headerlink" title="两种后处理器"></a>两种后处理器</h2><p>Spring提供了两种常用的后处理器：</p><ul><li>Bean后处理器: 这种后处理器会对容器中Bean进行后处理，对Bean进行额外加强。</li><li>容器后处理器: 这种后处理器会对IoC容器进行后处理，用于增强容器功能。</li></ul><h3 id="Bean后处理器"><a href="#Bean后处理器" class="headerlink" title="Bean后处理器"></a>Bean后处理器</h3><p>Bean后处理器是一种特殊的Bean，这种特殊的Bean并不对外提供服务，它甚至可以无须id属性，它主要负责对容器中的其他Bean执行后处理，例如为容器中的目标Bean生成代理等，这种Bean称为Bean后处理器。Bean后处理器会在Bean实例创建成功之后，对Bean实例进行进一步的增强处理。Bean后处理器必须实现<code>BeanPostProcessor</code>接口，同时必须实现该接口的两个方法。</p><ol><li><code>Object postProcessBeforeInitialization(Object bean, String name) throws BeansException</code>: 该方法的第一个参数是系统即将进行后处理的Bean实例，第二个参数是该Bean的配置id</li><li><code>Object postProcessAfterinitialization(Object bean, String name) throws BeansException</code>: 该方法的第一个参数是系统即将进行后处理的Bean实例，第二个参数是该Bean的配置id</li></ol><p>容器中一旦注册了Bean后处理器，Bean后处理器就会自动启动，在容器中每个Bean创建时自动工作，Bean后处理器两个方法的回调时机如下图：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0goge3ym0j20ix0860t3.jpg"                      alt="bean-post-process"                ></p><p>注意一点，如果使用<code>BeanFactory</code>作为Spring容器，则必须手动注册Bean后处理器，程序必须获取Bean后处理器实例，然后手动注册。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BeanPostProcessor bp = (BeanPostProcessor)beanFactory.getBean(&quot;bp&quot;);</span><br><span class="line">beanFactory.addBeanPostProcessor(bp);</span><br><span class="line">Person p = (Person)beanFactory.getBean(&quot;person&quot;);</span><br></pre></td></tr></table></figure><h3 id="容器后处理器"><a href="#容器后处理器" class="headerlink" title="容器后处理器"></a>容器后处理器</h3><p>Bean后处理器负责处理容器中的所有Bean实例，而容器后处理器则负责处理容器本身。容器后处理器必须实现<code>BeanFactoryPostProcessor</code>接口，并实现该接口的一个方法<code>postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)</code>实现该方法的方法体就是对Spring容器进行的处理，这种处理可以对Spring容器进行自定义扩展，当然也可以对Spring容器不进行任何处理。</p><p>类似于<code>BeanPostProcessor</code>，<code>ApplicationContext</code>可自动检测到容器中的容器后处理器，并且自动注册容器后处理器。但若使用<code>BeanFactory</code>作为Spring容器，则必须手动调用该容器后处理器来处理<code>BeanFactory</code>容器。</p><h2 id="Spring的”零配置”支持"><a href="#Spring的”零配置”支持" class="headerlink" title="Spring的”零配置”支持"></a>Spring的”零配置”支持</h2><h3 id="搜索Bean类"><a href="#搜索Bean类" class="headerlink" title="搜索Bean类"></a>搜索Bean类</h3><p>Spring提供如下几个Annotation来标注Spring Bean：</p><ul><li><code>@Component</code>: 标注一个普通的Spring Bean类</li><li><code>@Controller</code>: 标注一个控制器组件类</li><li><code>@Service</code>: 标注一个业务逻辑组件类</li><li><code>@Repository</code>: 标注一个DAO组件类</li></ul><p>在Spring配置文件中做如下配置，指定自动扫描的包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:component-scan base-package=&quot;edu.shu.spring.domain&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="使用-Resource配置依赖"><a href="#使用-Resource配置依赖" class="headerlink" title="使用@Resource配置依赖"></a>使用@Resource配置依赖</h3><p><code>@Resource</code>位于<code>javax.annotation</code>包下，是来自JavaEE规范的一个<code>Annotation</code>，Spring直接借鉴了该<code>Annotation</code>，通过使用该<code>Annotation</code>为目标Bean指定协作者Bean。使用<code>@Resource</code>与<code>&lt;property.../&gt;</code>元素的ref属性有相同的效果。<br><code>@Resource</code>不仅可以修饰setter方法，也可以直接修饰实例变量，如果使用<code>@Resource</code>修饰实例变量将会更加简单，此时Spring将会直接使用JavaEE规范的Field注入，此时连setter方法都可以不要。</p><h3 id="使用-PostConstruct和-PreDestroy定制生命周期行为"><a href="#使用-PostConstruct和-PreDestroy定制生命周期行为" class="headerlink" title="使用@PostConstruct和@PreDestroy定制生命周期行为"></a>使用@PostConstruct和@PreDestroy定制生命周期行为</h3><p><code>@PostConstruct</code>和<code>@PreDestroy</code>同样位于javax.annotation包下，也是来自JavaEE规范的两个Annotation，Spring直接借鉴了它们，用于定制Spring容器中Bean的生命周期行为。它们都用于修饰方法，无须任何属性。其中前者修饰的方法时Bean的初始化方法；而后者修饰的方法时Bean销毁之前的方法。</p><h3 id="Spring4-0增强的自动装配和精确装配"><a href="#Spring4-0增强的自动装配和精确装配" class="headerlink" title="Spring4.0增强的自动装配和精确装配"></a>Spring4.0增强的自动装配和精确装配</h3><p>Spring提供了<code>@Autowired</code>注解来指定自动装配，<code>@Autowired</code>可以修饰setter方法、普通方法、实例变量和构造器等。当使用<code>@Autowired</code>标注setter方法时，默认采用byType自动装配策略。在这种策略下，符合自动装配类型的候选Bean实例常常有多个，这个时候就可能引起异常，为了实现精确的自动装配，Spring提供了<code>@Qualifier</code>注解，通过使用<code>@Qualifier</code>，允许根据Bean的id来执行自动装配。</p><h2 id="Spring的AOP"><a href="#Spring的AOP" class="headerlink" title="Spring的AOP"></a>Spring的AOP</h2><h3 id="为什么需要AOP"><a href="#为什么需要AOP" class="headerlink" title="为什么需要AOP"></a>为什么需要AOP</h3><p>AOP（Aspect Orient Programming）也就是面向切面编程，作为面向对象编程的一种补充，已经成为一种比较成熟的编程方式。其实AOP问世的时间并不太长，AOP和OOP互为补充，面向切面编程将程序运行过程分解成各个切面。</p><p>AOP专门用于处理系统中分布于各个模块（不同方法）中的交叉关注点的问题，在JavaEE应用中，常常通过AOP来处理一些具有横切性质的系统级服务，如事务管理、安全检查、缓存、对象池管理等，AOP已经成为一种非常常用的解决方案。</p><h3 id="使用AspectJ实现AOP"><a href="#使用AspectJ实现AOP" class="headerlink" title="使用AspectJ实现AOP"></a>使用AspectJ实现AOP</h3><p>AspectJ是一个基于Java语言的AOP框架，提供了强大的AOP功能，其他很多AOP框架都借鉴或采纳其中的一些思想。其主要包括两个部分：一个部分定义了如何表达、定义AOP编程中的语法规范，通过这套语法规范，可以方便地用AOP来解决Java语言中存在的交叉关注点的问题；另一个部分是工具部分，包括编译、调试工具等。</p><p>AOP实现可分为两类：</p><ol><li>静态AOP实现: AOP框架在编译阶段对程序进行修改，即实现对目标类的增强，生成静态的AOP代理类，以AspectJ为代表。</li><li>动态AOP实现: AOP框架在运行阶段动态生成AOP代理，以实现对目标对象的增强，以Spring AOP为代表。</li></ol><p>一般来说，静态AOP实现具有较好的性能，但需要使用特殊的编译器。动态AOP实现是纯Java实现，因此无须特殊的编译器，但是通常性能略差。</p><h3 id="AOP的基本概念"><a href="#AOP的基本概念" class="headerlink" title="AOP的基本概念"></a>AOP的基本概念</h3><p>关于面向切面编程的一些术语：</p><ul><li>切面（Aspect）: 切面用于组织多个Advice，Advice放在切面中定义。</li><li>连接点（Joinpoint）: 程序执行过程中明确的点，如方法的调用，或者异常的抛出。在Spring AOP中，连接点总是方法的调用。</li><li>增强处理（Advice）: AOP框架在特定的切入点执行的增强处理。处理有”around”、”before”和”after”等类型</li><li>切入点（Pointcut）: 可以插入增强处理的连接点。简而言之，当某个连接点满足指定要求时，该连接点将被添加增强处理，该连接点也就变成了切入点。</li></ul><h3 id="Spring的AOP支持"><a href="#Spring的AOP支持" class="headerlink" title="Spring的AOP支持"></a>Spring的AOP支持</h3><p>Spring中的AOP代理由Spring的IoC容器负责生成、管理，其依赖关系也由IoC容器负责管理。<br>为了在应用中使用<code>@AspectJ</code>支持，Spring需要添加三个库：</p><ul><li><code>aspectjweaver.jar</code></li><li><code>aspectjrt.jar</code></li><li><code>aopalliance.jar</code></li></ul><p>并在Spring配置文件中做如下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--启动@AspectJ支持--&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--指定自动搜索Bean组件、自动搜索切面类--&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;edu.shu.sprint.service&quot;&gt;</span><br><span class="line">    &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.aspectj.lang.annotation.Aspect&quot;/&gt;</span><br><span class="line">&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><p>来源：<a class="link"   href="http://codepub.cn/2015/06/21/Basic-knowledge-summary-of-Spring/" >http://codepub.cn/2015/06/21/Basic-knowledge-summary-of-Spring/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Spring简介&quot;&gt;&lt;a href=&quot;#Spring简介&quot; class=&quot;headerlink&quot; title=&quot;Spring简介&quot;&gt;&lt;/a&gt;Spring简介&lt;/h2&gt;&lt;p&gt;Spring框架由Rod Johnson开发，2004年发布了Spring框架的第一版。Sp</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Spring" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/Spring/"/>
    
    
    <category term="Spring" scheme="https://www.lzp.zone/tags/Spring/"/>
    
    <category term="Java框架" scheme="https://www.lzp.zone/tags/Java%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew宝典</title>
    <link href="https://www.lzp.zone/2022/03/20/Homebrew%E5%AE%9D%E5%85%B8/"/>
    <id>https://www.lzp.zone/2022/03/20/Homebrew%E5%AE%9D%E5%85%B8/</id>
    <published>2022-03-20T12:58:33.000Z</published>
    <updated>2022-03-24T15:44:10.363Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Mac的终端命令行应用管理神器</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol><li><p>安装软件 <code>brew install ***</code></p><blockquote><p>例如 <code>brew install git</code>,<code>brew install SQL</code></p></blockquote></li><li><p>卸载软件<code>brew uninstall ***</code></p></li><li><p>查询安装的软件<code>brew search ***</code></p></li><li><p>列出由brew安装的软件：<code>brew list</code> </p></li><li><p>更新<code>homebrew</code> : <code>brew update</code></p></li><li><p>用浏览器打开<code>brew</code>的官网： <code>brew home</code></p></li><li><p>显示软件信息： <code>brew info ***</code></p></li><li><p>显示包依赖： <code>brew deps ***</code></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Mac的终端命令行应用管理神器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装软</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="小妙招" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/%E5%B0%8F%E5%A6%99%E6%8B%9B/"/>
    
    
    <category term="Homebrew" scheme="https://www.lzp.zone/tags/Homebrew/"/>
    
    <category term="命令行" scheme="https://www.lzp.zone/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
    <category term="终端" scheme="https://www.lzp.zone/tags/%E7%BB%88%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JDBC核心技术</title>
    <link href="https://www.lzp.zone/2022/03/20/JDBC%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    <id>https://www.lzp.zone/2022/03/20/JDBC%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</id>
    <published>2022-03-20T12:35:36.000Z</published>
    <updated>2022-03-24T15:44:22.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第1章：JDBC概述"><a href="#第1章：JDBC概述" class="headerlink" title="第1章：JDBC概述"></a>第1章：JDBC概述</h2><h3 id="1-1-数据的持久化"><a href="#1-1-数据的持久化" class="headerlink" title="1.1 数据的持久化"></a>1.1 数据的持久化</h3><ul><li><p>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘</strong>上加以”固化”<strong>，而持久化的实现过程大多通过各种关系数据库来完成</strong>。</p></li><li><p>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzzedoh829j20cz084wep.jpg"                      alt="1566741430592"                > </p></li></ul><h3 id="1-2-Java中的数据存储技术"><a href="#1-2-Java中的数据存储技术" class="headerlink" title="1.2 Java中的数据存储技术"></a>1.2 Java中的数据存储技术</h3><ul><li><p>在Java中，数据库存取技术可分为如下几类：</p><ul><li><p><strong>JDBC</strong>直接访问数据库</p></li><li><p>JDO (Java Data Object )技术</p></li><li><p><strong>第三方O/R工具</strong>，如Hibernate, Mybatis 等</p></li></ul></li><li><p>JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。</p></li></ul><h3 id="1-3-JDBC介绍"><a href="#1-3-JDBC介绍" class="headerlink" title="1.3 JDBC介绍"></a>1.3 JDBC介绍</h3><ul><li>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，（<strong>java.sql,javax.sql</strong>）使用这些类库可以以一种<strong>标准</strong>的方法、方便地访问数据库资源。</li><li>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</li><li>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</li><li>如果没有JDBC，那么Java程序访问数据库时是这样的：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmm1jcf5j20g00b20t9.jpg"                      alt="1555575760234"                ></p><hr><ul><li>有了JDBC，Java程序访问数据库时是这样的：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmm1b6htj20g00b20t9.jpg"                      alt="1555575981203"                ></p><hr><ul><li>总结如下：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmm12dj7j20mn0e90u7.jpg"                      alt="1566741692804"                ></p><h3 id="1-4-JDBC体系结构"><a href="#1-4-JDBC体系结构" class="headerlink" title="1.4 JDBC体系结构"></a>1.4 JDBC体系结构</h3><ul><li>JDBC接口（API）包括两个层次：<ul><li><strong>面向应用的API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。</li><li><strong>面向数据库的API</strong>：Java Driver API，供开发商开发数据库驱动程序用。</li></ul></li></ul><blockquote><p><strong>JDBC是sun公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</strong></p><p><strong>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。                                                                ————面向接口编程</strong></p></blockquote><h3 id="1-5-JDBC程序编写步骤"><a href="#1-5-JDBC程序编写步骤" class="headerlink" title="1.5 JDBC程序编写步骤"></a>1.5 JDBC程序编写步骤</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmm71ztaj20lo0a80u5.jpg"                      alt="1565969323908"                ></p><blockquote><p>补充：ODBC(<strong>Open Database Connectivity</strong>，开放式数据库连接)，是微软在Windows平台下推出的。使用者在程序中只需要调用ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。</p></blockquote><h2 id="第2章：获取数据库连接"><a href="#第2章：获取数据库连接" class="headerlink" title="第2章：获取数据库连接"></a>第2章：获取数据库连接</h2><h3 id="2-1-要素一：Driver接口实现类"><a href="#2-1-要素一：Driver接口实现类" class="headerlink" title="2.1 要素一：Driver接口实现类"></a>2.1 要素一：Driver接口实现类</h3><h4 id="2-1-1-Driver接口介绍"><a href="#2-1-1-Driver接口介绍" class="headerlink" title="2.1.1 Driver接口介绍"></a>2.1.1 Driver接口介绍</h4><ul><li><p>java.sql.Driver 接口是所有 JDBC 驱动程序需要实现的接口。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。</p></li><li><p>在程序中不需要直接去访问实现了 Driver 接口的类，而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现。</p><ul><li>Oracle的驱动：<strong>oracle.jdbc.driver.OracleDriver</strong></li><li>mySql的驱动： <strong>com.mysql.jdbc.Driver</strong></li></ul></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzzef2btosj20i70b5jss.jpg"                      alt="1555576157618"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzzef6efg2j20h50bet9y.jpg"                      alt="1555576170074"                ></p><ul><li>将上述jar包拷贝到Java工程的一个目录中，习惯上新建一个lib文件夹。</li></ul><p> <img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmtth6pbj208402u3yi.jpg"                      alt="1566134718955"                ></p><p>在驱动jar上右键–&gt;Build Path–&gt;Add to Build Path</p><p> <img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmv1m0m6j20jd040t92.jpg"                      alt="1566134781682"                ></p><p>注意：如果是Dynamic Web Project（动态的web项目）话，则是把驱动jar放到WebContent（有的开发工具叫WebRoot）目录中的WEB-INF目录中的lib目录下即可</p><p> <img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmv812qfj205u05f0sr.jpg"                      alt="1566135290460"                ></p><h4 id="2-1-2-加载与注册JDBC驱动"><a href="#2-1-2-加载与注册JDBC驱动" class="headerlink" title="2.1.2 加载与注册JDBC驱动"></a>2.1.2 加载与注册JDBC驱动</h4><ul><li><p>加载驱动：加载 JDBC 驱动需调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名</p><ul><li><strong>Class.forName(“com.mysql.jdbc.Driver”);</strong></li></ul></li><li><p>注册驱动：DriverManager 类是驱动程序管理器类，负责管理驱动程序</p><ul><li><p><strong>使用DriverManager.registerDriver(com.mysql.jdbc.Driver)来注册驱动</strong></p></li><li><p>通常不用显式调用 DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例，因为 Driver 接口的驱动程序类<strong>都</strong>包含了静态代码块，在这个静态代码块中，会调用 DriverManager.registerDriver() 方法来注册自身的一个实例。下图是MySQL的Driver实现类的源码：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmwalyouj20c603v3ys.jpg"                      alt="1566136831283"                ></p></li></ul></li></ul><h3 id="2-2-要素二：URL"><a href="#2-2-要素二：URL" class="headerlink" title="2.2 要素二：URL"></a>2.2 要素二：URL</h3><ul><li><p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。</p></li><li><p>JDBC URL的标准由三部分组成，各部分间用冒号分隔。 </p><ul><li><strong>jdbc:子协议:子名称</strong></li><li><strong>协议</strong>：JDBC URL中的协议总是jdbc </li><li><strong>子协议</strong>：子协议用于标识一个数据库驱动程序</li><li><strong>子名称</strong>：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息。包含<strong>主机名</strong>(对应服务端的ip地址)<strong>，端口号，数据库名</strong></li></ul></li><li><p>举例：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmwp335oj20a902ygln.jpg"                      alt="1555576477107"                ></p></li><li><p><strong>几种常用数据库的 JDBC URL</strong></p><ul><li><p>MySQL的连接URL编写方式：</p><ul><li>jdbc:mysql://主机名称:mysql服务端口号/数据库名称?参数=值&amp;参数=值</li><li>jdbc:mysql://localhost:3306/atguigu</li><li>jdbc:mysql://localhost:3306/atguigu**?useUnicode=true&amp;characterEncoding=utf8**（如果JDBC程序与服务器端的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集）</li><li>jdbc:mysql://localhost:3306/atguigu?user=root&amp;password=123456</li></ul></li><li><p>Oracle 9i的连接URL编写方式：</p><ul><li>jdbc:oracle:thin:@主机名称:oracle服务端口号:数据库名称</li><li>jdbc:oracle:thin:@localhost:1521:atguigu</li></ul></li><li><p>SQLServer的连接URL编写方式：</p><ul><li><p>jdbc:sqlserver://主机名称:sqlserver服务端口号:DatabaseName=数据库名称</p></li><li><p>jdbc:sqlserver://localhost:1433:DatabaseName=atguigu</p></li></ul></li></ul></li></ul><h3 id="2-3-要素三：用户名和密码"><a href="#2-3-要素三：用户名和密码" class="headerlink" title="2.3 要素三：用户名和密码"></a>2.3 要素三：用户名和密码</h3><ul><li>user,password可以用“属性名=属性值”方式告诉数据库</li><li>可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</li></ul><h3 id="2-4-数据库连接方式举例"><a href="#2-4-数据库连接方式举例" class="headerlink" title="2.4 数据库连接方式举例"></a>2.4 数据库连接方式举例</h3><h4 id="2-4-1-连接方式一"><a href="#2-4-1-连接方式一" class="headerlink" title="2.4.1 连接方式一"></a>2.4.1 连接方式一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.提供java.sql.Driver接口实现类的对象</span></span><br><span class="line">           Driver driver = <span class="keyword">null</span>;</span><br><span class="line">           driver = <span class="keyword">new</span> com.mysql.jdbc.Driver();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.提供url，指明具体操作的数据</span></span><br><span class="line">           String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.提供Properties的对象，指明用户名和密码</span></span><br><span class="line">           Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">           info.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">           info.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//4.调用driver的connect()，获取连接</span></span><br><span class="line">           Connection conn = driver.connect(url, info);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：上述代码中显式出现了第三方数据库的API</p></blockquote><h4 id="2-4-2-连接方式二"><a href="#2-4-2-连接方式二" class="headerlink" title="2.4.2 连接方式二"></a>2.4.2 连接方式二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.实例化Driver</span></span><br><span class="line">           String className = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">           Class clazz = Class.forName(className);</span><br><span class="line">           Driver driver = (Driver) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.提供url，指明具体操作的数据</span></span><br><span class="line">           String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.提供Properties的对象，指明用户名和密码</span></span><br><span class="line">           Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">           info.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">           info.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//4.调用driver的connect()，获取连接</span></span><br><span class="line">           Connection conn = driver.connect(url, info);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：相较于方式一，这里使用反射实例化Driver，不在代码中体现第三方数据库的API。体现了面向接口编程思想。</p></blockquote><h4 id="2-4-3-连接方式三"><a href="#2-4-3-连接方式三" class="headerlink" title="2.4.3 连接方式三"></a>2.4.3 连接方式三</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.数据库连接的4个基本要素：</span></span><br><span class="line">           String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">           String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">           String password = <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line">           String driverName = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.实例化Driver</span></span><br><span class="line">           Class clazz = Class.forName(driverName);</span><br><span class="line">           Driver driver = (Driver) clazz.newInstance();</span><br><span class="line">           <span class="comment">//3.注册驱动</span></span><br><span class="line">           DriverManager.registerDriver(driver);</span><br><span class="line">           <span class="comment">//4.获取连接</span></span><br><span class="line">           Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：使用DriverManager实现数据库的连接。体会获取连接必要的4个基本要素。</p></blockquote><h4 id="2-4-4-连接方式四"><a href="#2-4-4-连接方式四" class="headerlink" title="2.4.4 连接方式四"></a>2.4.4 连接方式四</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.数据库连接的4个基本要素：</span></span><br><span class="line">           String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">           String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">           String password = <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line">           String driverName = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.加载驱动 （①实例化Driver ②注册驱动）</span></span><br><span class="line">           Class.forName(driverName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">//Driver driver = (Driver) clazz.newInstance();</span></span><br><span class="line">           <span class="comment">//3.注册驱动</span></span><br><span class="line">           <span class="comment">//DriverManager.registerDriver(driver);</span></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">           可以注释掉上述代码的原因，是因为在mysql的Driver类中声明有：</span></span><br><span class="line"><span class="comment">           static &#123;</span></span><br><span class="line"><span class="comment">               try &#123;</span></span><br><span class="line"><span class="comment">                   DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">               &#125; catch (SQLException var1) &#123;</span></span><br><span class="line"><span class="comment">                   throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span></span><br><span class="line"><span class="comment">               &#125;</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.获取连接</span></span><br><span class="line">           Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：不必显式的注册驱动了。因为在DriverManager的源码中已经存在静态代码块，实现了驱动的注册。</p></blockquote><h4 id="2-4-5-连接方式五-最终版"><a href="#2-4-5-连接方式五-最终版" class="headerlink" title="2.4.5 连接方式五(最终版)"></a>2.4.5 连接方式五(最终版)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testConnection5</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//1.加载配置文件</span></span><br><span class="line">       InputStream is = ConnectionTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">       Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">       pros.load(is);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//2.读取配置信息</span></span><br><span class="line">       String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">       String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">       String url = pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">       String driverClass = pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.加载驱动</span></span><br><span class="line">       Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.获取连接</span></span><br><span class="line">       Connection conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">       System.out.println(conn);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其中，配置文件声明在工程的src目录下：【jdbc.properties】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">abc123</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：使用配置文件的方式保存配置信息，在代码中加载配置文件</p><p><strong>使用配置文件的好处：</strong></p><p>①实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码<br>②如果修改了配置信息，省去重新编译的过程。</p></blockquote><h2 id="第3章：使用PreparedStatement实现CRUD操作"><a href="#第3章：使用PreparedStatement实现CRUD操作" class="headerlink" title="第3章：使用PreparedStatement实现CRUD操作"></a>第3章：使用PreparedStatement实现CRUD操作</h2><h3 id="3-1-操作和访问数据库"><a href="#3-1-操作和访问数据库" class="headerlink" title="3.1 操作和访问数据库"></a>3.1 操作和访问数据库</h3><ul><li><p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。</p></li><li><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 </li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Users/coco/Documents/CS%E8%B5%84%E6%96%99/%E7%BD%91%E8%AF%BE%E6%95%99%E7%A8%8B%E8%B5%84%E6%96%99/%E5%B0%9A%E7%A1%85%E8%B0%B7_%E5%AE%8B%E7%BA%A2%E5%BA%B7_JDBC%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/1-%E8%AF%BE%E4%BB%B6/%E5%B0%9A%E7%A1%85%E8%B0%B7_%E5%AE%8B%E7%BA%A2%E5%BA%B7_JDBC.assets/1566573842140.png"                      alt="1566573842140"                ></p></li></ul><h3 id="3-2-使用Statement操作数据表的弊端"><a href="#3-2-使用Statement操作数据表的弊端" class="headerlink" title="3.2 使用Statement操作数据表的弊端"></a>3.2 使用Statement操作数据表的弊端</h3><ul><li><p>通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回执行结果。</p></li><li><p>Statement 接口中定义了下列方法用于执行 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> excuteUpdate(String <span class="keyword">sql</span>)：执行更新操作<span class="keyword">INSERT</span>、UPDATE、<span class="keyword">DELETE</span></span><br><span class="line">ResultSet executeQuery(String <span class="keyword">sql</span>)：执行查询操作<span class="keyword">SELECT</span></span><br></pre></td></tr></table></figure></li><li><p>但是使用Statement操作数据表存在弊端：</p><ul><li><strong>问题一：存在拼串操作，繁琐</strong></li><li><strong>问题二：存在SQL注入问题</strong></li></ul></li><li><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令(如：SELECT user, password FROM user_table WHERE user=’a’ OR 1 = ‘ AND password = ‘ OR ‘1’ = ‘1’) ，从而利用系统的 SQL 引擎完成恶意行为的做法。</p></li><li><p>对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement(从Statement扩展而来) 取代 Statement 就可以了。</p></li><li><p>代码演示：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatementTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Statement的弊端：需要拼写sql语句，并且存在SQL注入的问题</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;用户名：&quot;</span>);</span><br><span class="line">String userName = scan.nextLine();</span><br><span class="line">System.out.print(<span class="string">&quot;密   码：&quot;</span>);</span><br><span class="line">String password = scan.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT user,password FROM user_table WHERE USER = &#x27;1&#x27; or &#x27; AND PASSWORD = &#x27;=&#x27;1&#x27; or &#x27;1&#x27; = &#x27;1&#x27;;</span></span><br><span class="line">String sql = <span class="string">&quot;SELECT user,password FROM user_table WHERE USER = &#x27;&quot;</span> + userName + <span class="string">&quot;&#x27; AND PASSWORD = &#x27;&quot;</span> + password</span><br><span class="line">+ <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">User user = get(sql, User.class);</span><br><span class="line"><span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;登陆成功!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;用户名或密码错误！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Statement实现对数据表的查询操作</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(String sql, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">Statement st = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.加载配置文件</span></span><br><span class="line">InputStream is = StatementTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">pros.load(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.读取配置信息</span></span><br><span class="line">String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">String url = pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">String driverClass = pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.加载驱动</span></span><br><span class="line">Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.获取连接</span></span><br><span class="line">conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">rs = st.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结果集的元数据</span></span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结果集的列数</span></span><br><span class="line"><span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line"></span><br><span class="line">t = clazz.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line"><span class="comment">// //1. 获取列的名称</span></span><br><span class="line"><span class="comment">// String columnName = rsmd.getColumnName(i+1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取列的别名</span></span><br><span class="line">String columnName = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 根据列名获取对应数据表中的数据</span></span><br><span class="line">Object columnVal = rs.getObject(columnName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 将数据表中得到的数据，封装进对象</span></span><br><span class="line">Field field = clazz.getDeclaredField(columnName);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field.set(t, columnVal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line"><span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmy0eff2j20ke094gmz.jpg"                      alt="1566569819744"                ></p><h3 id="3-3-PreparedStatement的使用"><a href="#3-3-PreparedStatement的使用" class="headerlink" title="3.3 PreparedStatement的使用"></a>3.3 PreparedStatement的使用</h3><h4 id="3-3-1-PreparedStatement介绍"><a href="#3-3-1-PreparedStatement介绍" class="headerlink" title="3.3.1 PreparedStatement介绍"></a>3.3.1 PreparedStatement介绍</h4><ul><li><p>可以通过调用 Connection 对象的 <strong>preparedStatement(String sql)</strong> 方法获取 PreparedStatement 对象</p></li><li><p><strong>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</strong></p></li><li><p>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</p></li></ul><h4 id="3-3-2-PreparedStatement-vs-Statement"><a href="#3-3-2-PreparedStatement-vs-Statement" class="headerlink" title="3.3.2 PreparedStatement vs Statement"></a>3.3.2 PreparedStatement vs Statement</h4><ul><li><p>代码的可读性和可维护性。</p></li><li><p><strong>PreparedStatement 能最大可能提高性能：</strong></p><ul><li>DBServer会对<strong>预编译</strong>语句提供性能优化。因为预编译语句有可能被重复调用，所以<u>语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</u></li><li>在statement语句中,即使是相同操作但因为数据内容不一样,所以整个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存。这样<u>每执行一次都要对传入的语句编译一次。</u></li><li>(语法检查，语义检查，翻译成二进制命令，缓存)</li></ul></li><li><p>PreparedStatement 可以防止 SQL 注入 </p></li></ul><h4 id="3-3-3-Java与SQL对应数据类型转换表"><a href="#3-3-3-Java与SQL对应数据类型转换表" class="headerlink" title="3.3.3 Java与SQL对应数据类型转换表"></a>3.3.3 Java与SQL对应数据类型转换表</h4><table><thead><tr><th>Java类型</th><th>SQL类型</th></tr></thead><tbody><tr><td>boolean</td><td>BIT</td></tr><tr><td>byte</td><td>TINYINT</td></tr><tr><td>short</td><td>SMALLINT</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>long</td><td>BIGINT</td></tr><tr><td>String</td><td>CHAR,VARCHAR,LONGVARCHAR</td></tr><tr><td>byte   array</td><td>BINARY  ,    VAR BINARY</td></tr><tr><td>java.sql.Date</td><td>DATE</td></tr><tr><td>java.sql.Time</td><td>TIME</td></tr><tr><td>java.sql.Timestamp</td><td>TIMESTAMP</td></tr></tbody></table><h4 id="3-3-4-使用PreparedStatement实现增、删、改操作"><a href="#3-3-4-使用PreparedStatement实现增、删、改操作" class="headerlink" title="3.3.4 使用PreparedStatement实现增、删、改操作"></a>3.3.4 使用PreparedStatement实现增、删、改操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql,Object ... args)</span></span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取数据库的连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//5.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-5-使用PreparedStatement实现查询操作"><a href="#3-3-5-使用PreparedStatement实现查询操作" class="headerlink" title="3.3.5 使用PreparedStatement实现查询操作"></a>3.3.5 使用PreparedStatement实现查询操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用的针对于不同表的查询:返回一个对象 (version 1.0)</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取数据库连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.预编译sql语句，得到PreparedStatement对象</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.执行executeQuery(),得到结果集：ResultSet</span></span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.得到结果集的元数据：ResultSetMetaData</span></span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.1通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值</span></span><br><span class="line"><span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">T t = clazz.newInstance();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;<span class="comment">// 遍历每一个列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取列值</span></span><br><span class="line">Object columnVal = rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 获取列的别名:列的别名，使用类的属性名充当</span></span><br><span class="line">String columnLabel = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 6.2使用反射，给对象的相应属性赋值</span></span><br><span class="line">Field field = clazz.getDeclaredField(columnLabel);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field.set(t, columnVal);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 7.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：使用PreparedStatement实现的查询操作可以替换Statement实现的查询操作，解决Statement拼串和SQL注入问题。</p></blockquote><h3 id="3-4-ResultSet与ResultSetMetaData"><a href="#3-4-ResultSet与ResultSetMetaData" class="headerlink" title="3.4 ResultSet与ResultSetMetaData"></a>3.4 ResultSet与ResultSetMetaData</h3><h4 id="3-4-1-ResultSet"><a href="#3-4-1-ResultSet" class="headerlink" title="3.4.1 ResultSet"></a>3.4.1 ResultSet</h4><ul><li><p>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象</p></li><li><p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商提供实现</p></li><li><p>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的第一条记录的前面。</p></li><li><p>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</p></li><li><p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。</p><ul><li>例如: getInt(1), getString(“name”)</li><li><strong>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。</strong></li></ul></li><li><p>ResultSet 接口的常用方法：</p><ul><li><p>boolean next()</p></li><li><p>getString()</p></li><li><p>…</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmm4aizgj20lh0b0dh0.jpg"                      alt="1555580152530"                ></p></li></ul><h4 id="3-4-2-ResultSetMetaData"><a href="#3-4-2-ResultSetMetaData" class="headerlink" title="3.4.2 ResultSetMetaData"></a>3.4.2 ResultSetMetaData</h4><ul><li><p>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</p></li><li><p>ResultSetMetaData meta = rs.getMetaData();</p><ul><li><p><strong>getColumnName</strong>(int column)：获取指定列的名称</p></li><li><p><strong>getColumnLabel</strong>(int column)：获取指定列的别名</p></li><li><p><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。 </p></li><li><p>getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。 </p></li><li><p>getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。 </p></li><li><p><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。 </p></li><li><p>isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。 </p></li></ul></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmm4sy9vj20aj0bo74t.jpg"                      alt="1555579494691"                ></p><p><strong>问题1：得到结果集后, 如何知道该结果集中有哪些列 ？ 列名是什么？</strong></p><p>​     需要使用一个描述 ResultSet 的对象， 即 ResultSetMetaData</p><p><strong>问题2：关于ResultSetMetaData</strong></p><ol><li><strong>如何获取 ResultSetMetaData</strong>： 调用 ResultSet 的 getMetaData() 方法即可</li><li><strong>获取 ResultSet 中有多少列</strong>：调用 ResultSetMetaData 的 getColumnCount() 方法</li><li><strong>获取 ResultSet 每一列的列的别名是什么</strong>：调用 ResultSetMetaData 的getColumnLabel() 方法</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmm80k15j20j509r3zx.jpg"                      alt="1555579816884"                ></p><h3 id="3-5-资源的释放"><a href="#3-5-资源的释放" class="headerlink" title="3.5 资源的释放"></a>3.5 资源的释放</h3><ul><li>释放ResultSet, Statement,Connection。</li><li>数据库连接（Connection）是非常稀有的资源，用完后必须马上释放，如果Connection不能及时正确的关闭将导致系统宕机。Connection的使用原则是<strong>尽量晚创建，尽量早的释放。</strong></li><li>可以在finally中关闭，保证及时其他代码出现异常，资源也一定能被关闭。</li></ul><h3 id="3-6-JDBC-API小结"><a href="#3-6-JDBC-API小结" class="headerlink" title="3.6 JDBC API小结"></a>3.6 JDBC API小结</h3><ul><li><p>两种思想</p><ul><li><p>面向接口编程的思想</p></li><li><p>ORM思想(object relational mapping)</p><ul><li>一个数据表对应一个java类</li><li>表中的一条记录对应java类的一个对象</li><li>表中的一个字段对应java类的一个属性</li></ul></li></ul><blockquote><p>sql是需要结合列名和表的属性名来写。注意起别名。</p></blockquote></li><li><p>两种技术</p><ul><li>JDBC结果集的元数据：ResultSetMetaData<ul><li>获取列数：getColumnCount()</li><li>获取列的别名：getColumnLabel()</li></ul></li><li>通过反射，创建指定类的对象，获取指定的属性并赋值</li></ul></li></ul><hr><h2 id="章节练习"><a href="#章节练习" class="headerlink" title="章节练习"></a>章节练习</h2><p><strong>练习题1：从控制台向数据库的表customers中插入一条数据，表结构如下：</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmm6cbkuj20o3040aat.jpg"                      alt="1555580275036"                ></p><p><strong>练习题2：创立数据库表 examstudent，表结构如下：</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmm3t6glj20d308h3z8.jpg"                      alt="1555580735377"                ></p><p>向数据表中添加如下数据：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmm2xbktj20ik08bgmu.jpg"                      alt="1555580763636"                ></p><p><strong>代码实现1：插入一个新的student 信息</strong></p><p>请输入考生的详细信息</p><p>Type:<br>IDCard:<br>ExamCard:<br>StudentName:<br>Location:<br>Grade:</p><p>信息录入成功!</p><p><strong>代码实现2：在 eclipse中建立 java 程序：输入身份证号或准考证号可以查询到学生的基本信息。结果如下：</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmm3b0bvj20iv08at9k.jpg"                      alt="1555580937490"                ></p><p><strong>代码实现3：完成学生信息的删除功能</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmm1x0w0j20fv0310sw.jpg"                      alt="1555580965019"                ></p><hr><h2 id="第4章-操作BLOB类型字段"><a href="#第4章-操作BLOB类型字段" class="headerlink" title="第4章 操作BLOB类型字段"></a>第4章 操作BLOB类型字段</h2><h3 id="4-1-MySQL-BLOB类型"><a href="#4-1-MySQL-BLOB类型" class="headerlink" title="4.1 MySQL BLOB类型"></a>4.1 MySQL BLOB类型</h3><ul><li><p>MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。</p></li><li><p>插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。</p></li><li><p>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmm5amhyj20cm05b0t2.jpg"                      alt="1555581069798"                ></p><ul><li>实际使用中根据需要存入的数据大小定义不同的BLOB类型。</li><li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li><li>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数： <strong>max_allowed_packet=16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。</li></ul><h3 id="4-2-向数据表中插入大数据类型"><a href="#4-2-向数据表中插入大数据类型" class="headerlink" title="4.2 向数据表中插入大数据类型"></a>4.2 向数据表中插入大数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取连接</span></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;insert into customers(name,email,birth,photo)values(?,?,?,?)&quot;</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充占位符</span></span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;徐海强&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">2</span>, <span class="string">&quot;xhq@126.com&quot;</span>);</span><br><span class="line">ps.setDate(<span class="number">3</span>, <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line"><span class="comment">// 操作Blob类型的变量</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;xhq.png&quot;</span>);</span><br><span class="line">ps.setBlob(<span class="number">4</span>, fis);</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">ps.execute();</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-3-修改数据表中的Blob类型字段"><a href="#4-3-修改数据表中的Blob类型字段" class="headerlink" title="4.3 修改数据表中的Blob类型字段"></a>4.3 修改数据表中的Blob类型字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">String sql = <span class="string">&quot;update customers set photo = ? where id = ?&quot;</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充占位符</span></span><br><span class="line"><span class="comment">// 操作Blob类型的变量</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;coffee.png&quot;</span>);</span><br><span class="line">ps.setBlob(<span class="number">1</span>, fis);</span><br><span class="line">ps.setInt(<span class="number">2</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">ps.execute();</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br></pre></td></tr></table></figure><h3 id="4-4-从数据表中读取大数据类型"><a href="#4-4-从数据表中读取大数据类型" class="headerlink" title="4.4 从数据表中读取大数据类型"></a>4.4 从数据表中读取大数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;SELECT id, name, email, birth, photo FROM customer WHERE id = ?&quot;</span>;</span><br><span class="line">conn = getConnection();</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setInt(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">Integer id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">    String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">String email = rs.getString(<span class="number">3</span>);</span><br><span class="line">    Date birth = rs.getDate(<span class="number">4</span>);</span><br><span class="line">Customer cust = <span class="keyword">new</span> Customer(id, name, email, birth);</span><br><span class="line">    System.out.println(cust); </span><br><span class="line">    <span class="comment">//读取Blob类型的字段</span></span><br><span class="line">Blob photo = rs.getBlob(<span class="number">5</span>);</span><br><span class="line">InputStream is = photo.getBinaryStream();</span><br><span class="line">OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;c.jpg&quot;</span>);</span><br><span class="line"><span class="keyword">byte</span> [] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">    JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line">is.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(os !=  <span class="keyword">null</span>)&#123;</span><br><span class="line">os.close();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第5章-批量插入"><a href="#第5章-批量插入" class="headerlink" title="第5章 批量插入"></a>第5章 批量插入</h2><h3 id="5-1-批量执行SQL语句"><a href="#5-1-批量执行SQL语句" class="headerlink" title="5.1 批量执行SQL语句"></a>5.1 批量执行SQL语句</h3><p>当需要成批插入或者更新记录时，可以采用Java的批量<strong>更新</strong>机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率</p><p>JDBC的批量处理语句包括下面三个方法：</p><ul><li><strong>addBatch(String)：添加需要批量处理的SQL语句或是参数；</strong></li><li><strong>executeBatch()：执行批量处理语句；</strong></li><li><strong>clearBatch():清空缓存的数据</strong></li></ul><p>通常我们会遇到两种批量执行SQL语句的情况：</p><ul><li>多条SQL语句的批量处理；</li><li>一个SQL语句的批量传参；</li></ul><h3 id="5-2-高效的批量插入"><a href="#5-2-高效的批量插入" class="headerlink" title="5.2 高效的批量插入"></a>5.2 高效的批量插入</h3><p>举例：向数据表中插入20000条数据</p><ul><li>数据库中提供一个goods表。创建如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> goods(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="5-2-1-实现层次一：使用Statement"><a href="#5-2-1-实现层次一：使用Statement" class="headerlink" title="5.2.1 实现层次一：使用Statement"></a>5.2.1 实现层次一：使用Statement</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">Statement st = conn.createStatement();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">20000</span>;i++)&#123;</span><br><span class="line">String sql = <span class="string">&quot;insert into goods(name) values(&#x27;name_&#x27; + &quot;</span>+ i +<span class="string">&quot;)&quot;</span>;</span><br><span class="line">st.executeUpdate(sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-实现层次二：使用PreparedStatement"><a href="#5-2-2-实现层次二：使用PreparedStatement" class="headerlink" title="5.2.2 实现层次二：使用PreparedStatement"></a>5.2.2 实现层次二：使用PreparedStatement</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;insert into goods(name)values(?)&quot;</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">20000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;name_&quot;</span> + i);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="comment">//82340</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br></pre></td></tr></table></figure><h4 id="5-2-3-实现层次三"><a href="#5-2-3-实现层次三" class="headerlink" title="5.2.3 实现层次三"></a>5.2.3 实现层次三</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 修改1： 使用 addBatch() / executeBatch() / clearBatch()</span></span><br><span class="line"><span class="comment"> * 修改2：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。</span></span><br><span class="line"><span class="comment"> *  ?rewriteBatchedStatements=true 写在配置文件的url后面</span></span><br><span class="line"><span class="comment"> * 修改3：使用更新的mysql 驱动：mysql-connector-java-5.1.37-bin.jar</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;insert into goods(name)values(?)&quot;</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">1000000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;name_&quot;</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.“攒”sql</span></span><br><span class="line">ps.addBatch();</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">500</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line">ps.executeBatch();</span><br><span class="line"><span class="comment">//3.清空</span></span><br><span class="line">ps.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="comment">//20000条：625                                                                         //1000000条:14733  </span></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-4-实现层次四"><a href="#5-2-4-实现层次四" class="headerlink" title="5.2.4 实现层次四"></a>5.2.4 实现层次四</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 层次四：在层次三的基础上操作</span></span><br><span class="line"><span class="comment">* 使用Connection 的 setAutoCommit(false)  /  commit()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.设置为不自动提交数据</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;insert into goods(name)values(?)&quot;</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">1000000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;name_&quot;</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.“攒”sql</span></span><br><span class="line">ps.addBatch();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">500</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line">ps.executeBatch();</span><br><span class="line"><span class="comment">//3.清空</span></span><br><span class="line">ps.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.提交数据</span></span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="comment">//1000000条:4978 </span></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第6章：-数据库事务"><a href="#第6章：-数据库事务" class="headerlink" title="第6章： 数据库事务"></a>第6章： 数据库事务</h2><h3 id="6-1-数据库事务介绍"><a href="#6-1-数据库事务介绍" class="headerlink" title="6.1 数据库事务介绍"></a>6.1 数据库事务介绍</h3><ul><li><p><strong>事务：一组逻辑操作单元,使数据从一种状态变换到另一种状态。</strong></p></li><li><p><strong>事务处理（事务操作）：</strong>保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都**被提交(commit)<strong>，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务</strong>回滚(rollback)**到最初状态。</p></li><li><p>为确保数据库中数据的<strong>一致性</strong>，数据的操纵应当是离散的成组的逻辑单元：当它全部完成时，数据的一致性可以保持，而当这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点以后的操作应全部回退到开始状态。 </p></li></ul><h3 id="6-2-JDBC事务处理"><a href="#6-2-JDBC事务处理" class="headerlink" title="6.2 JDBC事务处理"></a>6.2 JDBC事务处理</h3><ul><li><p>数据一旦提交，就不可回滚。</p></li><li><p>数据什么时候意味着提交？</p><ul><li><strong>当一个连接对象被创建时，默认情况下是自动提交事务</strong>：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</li><li><strong>关闭数据库连接，数据就会自动的提交。</strong>如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下。</li></ul></li><li><p><strong>JDBC程序中为了让多个 SQL 语句作为一个事务执行：</strong></p><ul><li>调用 Connection 对象的 <strong>setAutoCommit(false);</strong> 以取消自动提交事务</li><li>在所有的 SQL 语句都成功执行后，调用 <strong>commit();</strong> 方法提交事务</li><li>在出现异常时，调用 <strong>rollback();</strong> 方法回滚事务</li></ul><blockquote><p>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p></blockquote></li></ul><p>【案例：用户AA向用户BB转账100】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJDBCTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取数据库连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"><span class="comment">// 2.开启事务</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 3.进行数据库操作</span></span><br><span class="line">String sql1 = <span class="string">&quot;update user_table set balance = balance - 100 where user = ?&quot;</span>;</span><br><span class="line">update(conn, sql1, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟网络异常</span></span><br><span class="line"><span class="comment">//System.out.println(10 / 0);</span></span><br><span class="line"></span><br><span class="line">String sql2 = <span class="string">&quot;update user_table set balance = balance + 100 where user = ?&quot;</span>;</span><br><span class="line">update(conn, sql2, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line"><span class="comment">// 4.若没有异常，则提交事务</span></span><br><span class="line">conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="comment">// 5.若有异常，则回滚事务</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//6.恢复每次DML操作的自动提交功能</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//7.关闭连接</span></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>, <span class="keyword">null</span>); </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，对数据库操作的方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用事务以后的通用的增删改操作（version 2.0）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Connection conn ,String sql, Object... args)</span> </span>&#123;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 2.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 4.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(<span class="keyword">null</span>, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-事务的ACID属性"><a href="#6-3-事务的ACID属性" class="headerlink" title="6.3 事务的ACID属性"></a>6.3 事务的ACID属性</h3><ol><li><p><strong>原子性（Atomicity）</strong><br>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p></li><li><p><strong>一致性（Consistency）</strong><br>事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p><strong>隔离性（Isolation）</strong><br>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p><strong>持久性（Durability）</strong><br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p></li></ol><h4 id="6-3-1-数据库的并发问题"><a href="#6-3-1-数据库的并发问题" class="headerlink" title="6.3.1 数据库的并发问题"></a>6.3.1 数据库的并发问题</h4><ul><li><p>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</p><ul><li><strong>脏读</strong>: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li><li><strong>不可重复读</strong>: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新</strong>了该字段。之后, T1再次读取同一个字段, 值就不同了。</li><li><strong>幻读</strong>: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入</strong>了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。</li></ul></li><li><p><strong>数据库事务的隔离性</strong>: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。</p></li><li><p>一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, <strong>隔离级别越高, 数据一致性就越好, 但并发性越弱。</strong></p></li></ul><h4 id="6-3-2-四种隔离级别"><a href="#6-3-2-四种隔离级别" class="headerlink" title="6.3.2 四种隔离级别"></a>6.3.2 四种隔离级别</h4><ul><li><p>数据库提供的4种事务隔离级别：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmz2s0lxj20lu0680ur.jpg"                      alt="1555586275271"                ></p></li><li><p>Oracle 支持的 2 种事务隔离级别：<strong>READ COMMITED</strong>, SERIALIZABLE。 Oracle 默认的事务隔离级别为: <strong>READ COMMITED</strong> 。</p></li></ul><ul><li>Mysql 支持 4 种事务隔离级别。Mysql 默认的事务隔离级别为: <strong>REPEATABLE READ。</strong></li></ul><h4 id="6-3-3-在MySql中设置隔离级别"><a href="#6-3-3-在MySql中设置隔离级别" class="headerlink" title="6.3.3 在MySql中设置隔离级别"></a>6.3.3 在MySql中设置隔离级别</h4><ul><li><p>每启动一个 mysql 程序, 就会获得一个单独的数据库连接. 每个数据库连接都有一个全局变量 @@tx_isolation, 表示当前的事务隔离级别。</p></li><li><p>查看当前的隔离级别: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@tx_isolation;</span><br></pre></td></tr></table></figure></li><li><p>设置当前 mySQL 连接的隔离级别:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set  transaction isolation level read committed;</span><br></pre></td></tr></table></figure></li><li><p>设置数据库系统的全局的隔离级别:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global transaction isolation level read committed;</span><br></pre></td></tr></table></figure></li><li><p>补充操作：</p><ul><li><p>创建mysql数据库用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user tom identified by &#x27;abc123&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>授予权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#授予通过网络方式登录的tom用户，对所有库所有表的全部权限，密码设为abc123.</span><br><span class="line">grant all privileges on *.* to tom@&#x27;%&#x27;  identified by &#x27;abc123&#x27;; </span><br><span class="line"></span><br><span class="line"> #给tom用户使用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。</span><br><span class="line">grant select,insert,delete,update on atguigudb.* to tom@localhost identified by &#x27;abc123&#x27;; </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="第7章：DAO及相关实现类"><a href="#第7章：DAO及相关实现类" class="headerlink" title="第7章：DAO及相关实现类"></a>第7章：DAO及相关实现类</h2><ul><li>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO</li><li>作用：为了实现功能的模块化，更有利于代码的维护和升级。</li><li>下面是尚硅谷JavaWeb阶段书城项目中DAO使用的体现：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmz9q70tj208207bt95.jpg"                      alt="1566726681515"                ></p><ul><li>层次结构：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmzdkmidj20ol0cstaj.jpg"                      alt="1566745811244"                ></p><h3 id="【BaseDAO-java】"><a href="#【BaseDAO-java】" class="headerlink" title="【BaseDAO.java】"></a>【BaseDAO.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个用来被继承的对数据库进行基本操作的Dao</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HanYanBing</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"><span class="comment">// 定义一个变量来接收泛型的类型</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;T&gt; type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取T的Class对象，获取泛型的类型，泛型是在被子类继承时才确定</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取子类的类型</span></span><br><span class="line">Class clazz = <span class="keyword">this</span>.getClass();</span><br><span class="line"><span class="comment">// 获取父类的类型</span></span><br><span class="line"><span class="comment">// getGenericSuperclass()用来获取当前类的父类的类型</span></span><br><span class="line"><span class="comment">// ParameterizedType表示的是带泛型的类型</span></span><br><span class="line">ParameterizedType parameterizedType = (ParameterizedType) clazz.getGenericSuperclass();</span><br><span class="line"><span class="comment">// 获取具体的泛型类型 getActualTypeArguments获取具体的泛型的类型</span></span><br><span class="line"><span class="comment">// 这个方法会返回一个Type的数组</span></span><br><span class="line">Type[] types = parameterizedType.getActualTypeArguments();</span><br><span class="line"><span class="comment">// 获取具体的泛型的类型·</span></span><br><span class="line"><span class="keyword">this</span>.type = (Class&lt;T&gt;) types[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的增删改操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">count = queryRunner.update(conn, sql, params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getBean</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">t = queryRunner.query(conn, sql, <span class="keyword">new</span> BeanHandler&lt;T&gt;(type), params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getBeanList</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line">List&lt;T&gt; list = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">list = queryRunner.query(conn, sql, <span class="keyword">new</span> BeanListHandler&lt;T&gt;(type), params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个但一值得方法，专门用来执行像 select count(*)...这样的sql语句</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line">Object count = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 调用queryRunner的query方法获取一个单一的值</span></span><br><span class="line">count = queryRunner.query(conn, sql, <span class="keyword">new</span> ScalarHandler&lt;&gt;(), params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【BookDAO-java】"><a href="#【BookDAO-java】" class="headerlink" title="【BookDAO.java】"></a>【BookDAO.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Book;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中查询出所有的记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Book&gt; <span class="title">getBooks</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向数据库中插入一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveBook</span><span class="params">(Connection conn,Book book)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中根据图书的id删除一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">(Connection conn,String bookId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据图书的id从数据库中查询出一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Book <span class="title">getBookById</span><span class="params">(Connection conn,String bookId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据图书的id从数据库中更新一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Connection conn,Book book)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取带分页的图书信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;Book&gt; <span class="title">getPageBooks</span><span class="params">(Connection conn,Page&lt;Book&gt; page)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取带分页和价格范围的图书信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;Book&gt; <span class="title">getPageBooksByPrice</span><span class="params">(Connection conn,Page&lt;Book&gt; page, <span class="keyword">double</span> minPrice, <span class="keyword">double</span> maxPrice)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【UserDAO-java】"><a href="#【UserDAO-java】" class="headerlink" title="【UserDAO.java】"></a>【UserDAO.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据User对象中的用户名和密码从数据库中获取一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> User 数据库中有记录 null 数据库中无此记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">User <span class="title">getUser</span><span class="params">(Connection conn,User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据User对象中的用户名从数据库中获取一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true 数据库中有记录 false 数据库中无此记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(Connection conn,User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向数据库中插入User对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(Connection conn,User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【BookDaoImpl-java】"><a href="#【BookDaoImpl-java】" class="headerlink" title="【BookDaoImpl.java】"></a>【BookDaoImpl.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Book;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Page;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BookDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Book</span>&gt; <span class="keyword">implements</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBooks</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中得到一个List的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books&quot;</span>;</span><br><span class="line">beanList = getBeanList(conn,sql);</span><br><span class="line"><span class="keyword">return</span> beanList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBook</span><span class="params">(Connection conn,Book book)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;insert into books(title,author,price,sales,stock,img_path) values(?,?,?,?,?,?)&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(),book.getImgPath());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">(Connection conn,String bookId)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;DELETE FROM books WHERE id = ?&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用增删改的方法</span></span><br><span class="line">update(conn,sql, bookId);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">getBookById</span><span class="params">(Connection conn,String bookId)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line">Book book = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books where id = ?&quot;</span>;</span><br><span class="line">book = getBean(conn,sql, bookId);</span><br><span class="line"><span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Connection conn,Book book)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;update books set title = ? , author = ? , price = ? , sales = ? , stock = ? where id = ?&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(), book.getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">getPageBooks</span><span class="params">(Connection conn,Page&lt;Book&gt; page)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取数据库中图书的总记录数</span></span><br><span class="line">String sql = <span class="string">&quot;select count(*) from books&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个单一值的方法</span></span><br><span class="line"><span class="keyword">long</span> totalRecord = (<span class="keyword">long</span>) getValue(conn,sql);</span><br><span class="line"><span class="comment">// 将总记录数设置都page对象中</span></span><br><span class="line">page.setTotalRecord((<span class="keyword">int</span>) totalRecord);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页中的记录存放的List</span></span><br><span class="line">String sql2 = <span class="string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books limit ?,?&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个集合的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = getBeanList(conn,sql2, (page.getPageNo() - <span class="number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);</span><br><span class="line"><span class="comment">// 将这个List设置到page对象中</span></span><br><span class="line">page.setList(beanList);</span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">getPageBooksByPrice</span><span class="params">(Connection conn,Page&lt;Book&gt; page, <span class="keyword">double</span> minPrice, <span class="keyword">double</span> maxPrice)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取数据库中图书的总记录数</span></span><br><span class="line">String sql = <span class="string">&quot;select count(*) from books where price between ? and ?&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个单一值的方法</span></span><br><span class="line"><span class="keyword">long</span> totalRecord = (<span class="keyword">long</span>) getValue(conn,sql,minPrice,maxPrice);</span><br><span class="line"><span class="comment">// 将总记录数设置都page对象中</span></span><br><span class="line">page.setTotalRecord((<span class="keyword">int</span>) totalRecord);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页中的记录存放的List</span></span><br><span class="line">String sql2 = <span class="string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books where price between ? and ? limit ?,?&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个集合的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = getBeanList(conn,sql2, minPrice , maxPrice , (page.getPageNo() - <span class="number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);</span><br><span class="line"><span class="comment">// 将这个List设置到page对象中</span></span><br><span class="line">page.setList(beanList);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【UserDaoImpl-java】"><a href="#【UserDaoImpl-java】" class="headerlink" title="【UserDaoImpl.java】"></a>【UserDaoImpl.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.User;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Connection conn,User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line">User bean = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;select id,username,password,email from users where username = ? and password = ?&quot;</span>;</span><br><span class="line">bean = getBean(conn,sql, user.getUsername(), user.getPassword());</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(Connection conn,User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line">User bean = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;select id,username,password,email from users where username = ?&quot;</span>;</span><br><span class="line">bean = getBean(conn,sql, user.getUsername());</span><br><span class="line"><span class="keyword">return</span> bean != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(Connection conn,User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">//写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;insert into users(username,password,email) values(?,?,?)&quot;</span>;</span><br><span class="line"><span class="comment">//调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, user.getUsername(),user.getPassword(),user.getEmail());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【Book-java】"><a href="#【Book-java】" class="headerlink" title="【Book.java】"></a>【Book.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.beans;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图书类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songhongkang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String title; <span class="comment">// 书名</span></span><br><span class="line"><span class="keyword">private</span> String author; <span class="comment">// 作者</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> price; <span class="comment">// 价格</span></span><br><span class="line"><span class="keyword">private</span> Integer sales; <span class="comment">// 销量</span></span><br><span class="line"><span class="keyword">private</span> Integer stock; <span class="comment">// 库存</span></span><br><span class="line"><span class="keyword">private</span> String imgPath = <span class="string">&quot;static/img/default.jpg&quot;</span>; <span class="comment">// 封面图片的路径</span></span><br><span class="line"><span class="comment">//构造器，get()，set()，toString()方法略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【Page-java】"><a href="#【Page-java】" class="headerlink" title="【Page.java】"></a>【Page.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.beans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页码类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songhongkang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;T&gt; list; <span class="comment">// 每页查到的记录存放的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGE_SIZE = <span class="number">4</span>; <span class="comment">// 每页显示的记录数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> pageNo; <span class="comment">// 当前页</span></span><br><span class="line"><span class="comment">//private int totalPageNo; // 总页数，通过计算得到</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> totalRecord; <span class="comment">// 总记录数，通过查询数据库得到</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="【User-java】"><a href="#【User-java】" class="headerlink" title="【User.java】"></a>【User.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.beans;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songhongkang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第8章：数据库连接池"><a href="#第8章：数据库连接池" class="headerlink" title="第8章：数据库连接池"></a>第8章：数据库连接池</h2><h3 id="8-1-JDBC数据库连接池的必要性"><a href="#8-1-JDBC数据库连接池的必要性" class="headerlink" title="8.1 JDBC数据库连接池的必要性"></a>8.1 JDBC数据库连接池的必要性</h3><ul><li><p>在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：　　</p><ul><li><strong>在主程序（如servlet、beans）中建立数据库连接</strong></li><li><strong>进行sql操作</strong></li><li><strong>断开数据库连接</strong></li></ul></li><li><p>这种模式开发，存在的问题:</p><ul><li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用。</strong>若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li><li><strong>对于每一次数据库连接，使用完后都得断开。</strong>否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库。（回忆：何为Java的内存泄漏？）</li><li><strong>这种开发不能控制被创建的连接对象数</strong>，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。 </li></ul></li></ul><h3 id="8-2-数据库连接池技术"><a href="#8-2-数据库连接池技术" class="headerlink" title="8.2 数据库连接池技术"></a>8.2 数据库连接池技术</h3><ul><li><p>为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。</p></li><li><p><strong>数据库连接池的基本思想</strong>：就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p></li><li><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。</p></li><li><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gmzut4l7j20lu0agdgf.jpg"                      alt="1555593464033"                ></p><ul><li><strong>工作原理：</strong></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gn00vl07j20fj067t91.jpg"                      alt="1555593598606"                ></p><ul><li><p><strong>数据库连接池技术的优点</strong></p><p><strong>1. 资源重用</strong></p><p>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</p><p><strong>2. 更快的系统反应速度</strong></p><p>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</p><p><strong>3. 新的资源分配手段</strong></p><p>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</p><p><strong>4. 统一的连接管理，避免数据库连接泄漏</strong></p><p>在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</p></li></ul><h3 id="8-3-多种开源的数据库连接池"><a href="#8-3-多种开源的数据库连接池" class="headerlink" title="8.3 多种开源的数据库连接池"></a>8.3 多种开源的数据库连接池</h3><ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：<ul><li><strong>DBCP</strong> 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持。</li><li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，<strong>速度相对较慢，稳定性还可以。</strong>hibernate官方推荐使用</li><li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li><li><strong>BoneCP</strong> 是一个开源组织提供的数据库连接池，速度快</li><li><strong>Druid</strong> 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快</li></ul></li><li>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</li><li><strong>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</strong></li><li>特别注意：<ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此<strong>整个应用只需要一个数据源即可。</strong></li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li></ul></li></ul><h4 id="8-3-1-C3P0数据库连接池"><a href="#8-3-1-C3P0数据库连接池" class="headerlink" title="8.3.1 C3P0数据库连接池"></a>8.3.1 C3P0数据库连接池</h4><ul><li>获取连接方式一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用C3P0数据库连接池的方式，获取数据库的连接：不推荐</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">ComboPooledDataSource cpds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">cpds.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); </span><br><span class="line">cpds.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">cpds.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">cpds.setPassword(<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//cpds.setMaxPoolSize(100);</span></span><br><span class="line"></span><br><span class="line">Connection conn = cpds.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取连接方式二</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用C3P0数据库连接池的配置文件方式，获取数据库的连接：推荐</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource cpds = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;helloc3p0&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">Connection conn = cpds.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，src下的配置文件为：【c3p0-config.xml】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;helloc3p0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取连接的4个基本信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>abc123<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql:///test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 涉及到数据库连接池的管理的相关属性的设置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatements&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-3-2-DBCP数据库连接池"><a href="#8-3-2-DBCP数据库连接池" class="headerlink" title="8.3.2 DBCP数据库连接池"></a>8.3.2 DBCP数据库连接池</h4><ul><li>DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件：<ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li></ul></li><li><strong>Tomcat 的连接池正是采用该连接池来实现的。</strong>该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</li><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li><li>配置属性说明</li></ul><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>initialSize</td><td>0</td><td>连接池启动时创建的初始化连接数量</td></tr><tr><td>maxActive</td><td>8</td><td>连接池中可同时连接的最大的连接数</td></tr><tr><td>maxIdle</td><td>8</td><td>连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制</td></tr><tr><td>minIdle</td><td>0</td><td>连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。</td></tr><tr><td>maxWait</td><td>无限制</td><td>最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>开启池的Statement是否prepared</td></tr><tr><td>maxOpenPreparedStatements</td><td>无限制</td><td>开启池的prepared 后的同时最大连接数</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接池中连接，在时间段内一直空闲， 被逐出连接池的时间</td></tr><tr><td>removeAbandonedTimeout</td><td>300</td><td>超过时间限制，回收没有用(废弃)的连接</td></tr><tr><td>removeAbandoned</td><td>false</td><td>超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收</td></tr></tbody></table><ul><li>获取连接方式一：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">BasicDataSource source = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line"></span><br><span class="line">source.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">source.setUrl(<span class="string">&quot;jdbc:mysql:///test&quot;</span>);</span><br><span class="line">source.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">source.setPassword(<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">source.setInitialSize(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">Connection conn = source.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取连接方式二：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用dbcp数据库连接池的配置文件方式，获取数据库的连接：推荐</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource source = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">InputStream is = DBCPTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;dbcp.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">pros.load(is);</span><br><span class="line"><span class="comment">//根据提供的BasicDataSourceFactory创建对应的DataSource对象</span></span><br><span class="line">source = BasicDataSourceFactory.createDataSource(pros);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection conn = source.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，src下的配置文件为：【dbcp.properties】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&amp;useServerPrepStmts=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">abc123</span></span><br><span class="line"></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">10</span></span><br><span class="line"><span class="comment">#...</span></span><br></pre></td></tr></table></figure><h4 id="8-3-3-Druid（德鲁伊）数据库连接池"><a href="#8-3-3-Druid（德鲁伊）数据库连接池" class="headerlink" title="8.3.3 Druid（德鲁伊）数据库连接池"></a>8.3.3 Druid（德鲁伊）数据库连接池</h4><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.druid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDruid</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties(); pro.load(TestDruid.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">Connection conn = ds.getConnection();</span><br><span class="line">System.out.println(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，src下的配置文件为：【druid.properties】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/test?rewriteBatchedStatements=true</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">initialSize=<span class="number">10</span></span><br><span class="line">maxActive=<span class="number">20</span></span><br><span class="line">maxWait=<span class="number">1000</span></span><br><span class="line">filters=wall</span><br></pre></td></tr></table></figure><ul><li>详细配置参数：</li></ul><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a class="link"   href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter" >https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter<i class="fas fa-external-link-alt"></i></a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h2 id="第9章：Apache-DBUtils实现CRUD操作"><a href="#第9章：Apache-DBUtils实现CRUD操作" class="headerlink" title="第9章：Apache-DBUtils实现CRUD操作"></a>第9章：Apache-DBUtils实现CRUD操作</h2><h3 id="9-1-Apache-DBUtils简介"><a href="#9-1-Apache-DBUtils简介" class="headerlink" title="9.1 Apache-DBUtils简介"></a>9.1 Apache-DBUtils简介</h3><ul><li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p></li><li><p>API介绍：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>工具类：org.apache.commons.dbutils.DbUtils   </li></ul></li><li><p>API包说明：</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gn0qflgtj20ni08pwfi.jpg"                      alt="1555595163263"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0gn0udq9ij20lc0fetay.jpg"                      alt="1555595198644"                ></p><h3 id="9-2-主要API的使用"><a href="#9-2-主要API的使用" class="headerlink" title="9.2 主要API的使用"></a>9.2 主要API的使用</h3><h4 id="9-2-1-DbUtils"><a href="#9-2-1-DbUtils" class="headerlink" title="9.2.1 DbUtils"></a>9.2.1 DbUtils</h4><ul><li>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：<ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li><li>public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接</li><li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。 </li><li>public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断</li><li>public static void rollbackAndClose(Connection conn)throws SQLException</li><li>rollbackAndCloseQuietly(Connection)</li><li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li></ul></li></ul><h4 id="9-2-2-QueryRunner类"><a href="#9-2-2-QueryRunner类" class="headerlink" title="9.2.2 QueryRunner类"></a>9.2.2 QueryRunner类</h4><ul><li><p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p></li><li><p>QueryRunner类提供了两个构造器：</p><ul><li>默认的构造器</li><li>需要一个 javax.sql.DataSource 来作参数的构造器</li></ul></li><li><p>QueryRunner类的主要方法：</p><ul><li><strong>更新</strong><ul><li>public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li><li>……</li></ul></li><li><strong>插入</strong><ul><li>public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</li><li>….</li></ul></li><li><strong>批处理</strong><ul><li>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</li><li>public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object[][] params)throws SQLException：只支持INSERT语句</li><li>…..</li></ul></li><li><strong>查询</strong><ul><li>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li><li>…… </li></ul></li></ul></li><li><p>测试</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试添加</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line">String sql = <span class="string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> count = runner.update(conn, sql, <span class="string">&quot;何成飞&quot;</span>, <span class="string">&quot;he@qq.com&quot;</span>, <span class="string">&quot;1992-09-08&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;添加了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line">String sql = <span class="string">&quot;delete from customers where id &lt; ?&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> count = runner.update(conn, sql,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;删除了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-2-3-ResultSetHandler接口及实现类"><a href="#9-2-3-ResultSetHandler接口及实现类" class="headerlink" title="9.2.3 ResultSetHandler接口及实现类"></a>9.2.3 ResultSetHandler接口及实现类</h4><ul><li><p>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。</p></li><li><p>ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。</p></li><li><p>接口的主要实现类：</p><ul><li><p>ArrayHandler：把结果集中的第一行数据转成对象数组。</p></li><li><p>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</p></li><li><p><strong>BeanHandler：</strong>将结果集中的第一行数据封装到一个对应的JavaBean实例中。</p></li><li><p><strong>BeanListHandler：</strong>将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</p></li><li><p>ColumnListHandler：将结果集中某一列的数据存放到List中。</p></li><li><p>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</p></li><li><p><strong>MapHandler：</strong>将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</p></li><li><p><strong>MapListHandler：</strong>将结果集中的每一行数据都封装到一个Map里，然后再存放到List</p></li><li><p><strong>ScalarHandler：</strong>查询单个值对象</p></li></ul></li><li><p>测试</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试查询:查询一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用ResultSetHandler的实现类：BeanHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">BeanHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanHandler&lt;&gt;(Customer.class);</span><br><span class="line">Customer customer = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">System.out.println(customer);</span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试查询:查询多条记录构成的集合</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用ResultSetHandler的实现类：BeanListHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryList</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;select id,name,email,birth from customers where id &lt; ?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">BeanListHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanListHandler&lt;&gt;(Customer.class);</span><br><span class="line">List&lt;Customer&gt; list = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 自定义ResultSetHandler的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryInstance1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">ResultSetHandler&lt;Customer&gt; handler = <span class="keyword">new</span> ResultSetHandler&lt;Customer&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">handle</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;handle&quot;</span>);</span><br><span class="line"><span class="comment">//return new Customer(1,&quot;Tom&quot;,&quot;tom@126.com&quot;,new Date(123323432L));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line"><span class="keyword">int</span> id = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">String name = rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">String email = rs.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">Date birth = rs.getDate(<span class="string">&quot;birth&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Customer(id, name, email, birth);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Customer customer = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(customer);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如何查询类似于最大的，最小的，平均的，总和，个数相关的数据，</span></span><br><span class="line"><span class="comment"> * 使用ScalarHandler</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryValue</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试一：</span></span><br><span class="line"><span class="comment">//String sql = &quot;select count(*) from customers where id &lt; ?&quot;;</span></span><br><span class="line"><span class="comment">//ScalarHandler handler = new ScalarHandler();</span></span><br><span class="line"><span class="comment">//long count = (long) runner.query(conn, sql, handler, 20);</span></span><br><span class="line"><span class="comment">//System.out.println(count);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试二：</span></span><br><span class="line">String sql = <span class="string">&quot;select max(birth) from customers&quot;</span>;</span><br><span class="line">ScalarHandler handler = <span class="keyword">new</span> ScalarHandler();</span><br><span class="line">Date birth = (Date) runner.query(conn, sql, handler);</span><br><span class="line">System.out.println(birth);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC总结"><a href="#JDBC总结" class="headerlink" title="JDBC总结"></a>JDBC总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">总结</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateWithTx</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取连接的操作（</span></span><br><span class="line"><span class="comment">//① 手写的连接：JDBCUtils.getConnection();</span></span><br><span class="line"><span class="comment">//② 使用数据库连接池：C3P0;DBCP;Druid</span></span><br><span class="line"><span class="comment">//2.对数据表进行一系列CRUD操作</span></span><br><span class="line"><span class="comment">//① 使用PreparedStatement实现通用的增删改、查询操作（version 1.0 \ version 2.0)</span></span><br><span class="line"><span class="comment">//version2.0的增删改public void update(Connection conn,String sql,Object ... args)&#123;&#125;</span></span><br><span class="line"><span class="comment">//version2.0的查询 public &lt;T&gt; T getInstance(Connection conn,Class&lt;T&gt; clazz,String sql,Object ... args)&#123;&#125;</span></span><br><span class="line"><span class="comment">//② 使用dbutils提供的jar包中提供的QueryRunner类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提交数据</span></span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//回滚数据</span></span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//3.关闭连接等操作</span></span><br><span class="line"><span class="comment">//① JDBCUtils.closeResource();</span></span><br><span class="line"><span class="comment">//② 使用dbutils提供的jar包中提供的DbUtils类提供了关闭的相关操作</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>来自尚硅谷</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第1章：JDBC概述&quot;&gt;&lt;a href=&quot;#第1章：JDBC概述&quot; class=&quot;headerlink&quot; title=&quot;第1章：JDBC概述&quot;&gt;&lt;/a&gt;第1章：JDBC概述&lt;/h2&gt;&lt;h3 id=&quot;1-1-数据的持久化&quot;&gt;&lt;a href=&quot;#1-1-数据的持久化&quot;</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="JDBC" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/JDBC/"/>
    
    
    <category term="JDBC" scheme="https://www.lzp.zone/tags/JDBC/"/>
    
    <category term="Druid" scheme="https://www.lzp.zone/tags/Druid/"/>
    
    <category term="数据库" scheme="https://www.lzp.zone/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://www.lzp.zone/tags/MySQL/"/>
    
    <category term="连接池" scheme="https://www.lzp.zone/tags/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>TCP三次握手、四次挥手</title>
    <link href="https://www.lzp.zone/2022/03/01/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E3%80%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>https://www.lzp.zone/2022/03/01/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E3%80%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</id>
    <published>2022-03-01T06:54:59.000Z</published>
    <updated>2022-03-20T12:27:27.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-协议简述"><a href="#TCP-协议简述" class="headerlink" title="TCP 协议简述"></a>TCP 协议简述</h2><p>TCP 提供面向有连接的通信传输，面向有连接是指在传送数据之前必须先建立连接，数据传送完成后要释放连接。</p><p>无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。<br>同时由于TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议，TCP是全双工模式，所以需要四次挥手关闭连接。</p><h2 id="TCP包首部"><a href="#TCP包首部" class="headerlink" title="TCP包首部"></a>TCP包首部</h2><p>网络中传输的数据包由两部分组成：一部分是协议所要用到的首部，另一部分是上一层传过来的数据。首部的结构由协议的具体规范详细定义。在数据包的首部，明确标明了协议应该如何读取数据。反过来说，看到首部，也就能够了解该协议必要的信息以及所要处理的数据。包首部就像协议的脸。</p><p>所以我们在学习TCP协议之前，首先要知道TCP在网络传输中处于哪个位置，以及它的协议的规范，下面我们就看看TCP首部的网络传输起到的作用：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzue07rhirj20mv0lfwgl.jpg"                      alt="网络数据传输过程"                ></p><p>下面的图是TCP头部的规范定义，它定义了TCP协议如何读取和解析数据：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzue0ko9t1j20jg0810t8.jpg"                      alt="TCP头部"                ></p><p>TCP首部承载这TCP协议需要的各项信息，下面我们来分析一下：</p><p><strong>TCP端口号</strong><br>TCP的连接是需要四个要素确定唯一一个连接：<br><strong>（源IP，源端口号）+ （目地IP，目的端口号）</strong><br>所以TCP首部预留了两个16位作为端口号的存储，而IP地址由上一层IP协议负责传递<br>源端口号和目地端口各占16位两个字节，也就是端口的范围是2^16=65535<br>另外1024以下是系统保留的，从1024-65535是用户使用的端口范围</p><p><strong>TCP的序号和确认号：</strong><br><strong>32位序号 seq</strong>：Sequence number 缩写seq ，TCP通信过程中某一个传输方向上的字节流的每个字节的序号，通过这个来确认发送的数据有序，比如现在序列号为1000，发送了1000，下一个序列号就是2000。<br><strong>32位确认号 ack</strong>：Acknowledge number 缩写ack，TCP对上一次seq序号做出的确认号，用来响应TCP报文段，给收到的TCP报文段的序号seq加1。</p><p><strong>TCP的标志位</strong><br>每个TCP段都有一个目的，这是借助于TCP标志位选项来确定的，允许发送方或接收方指定哪些标志应该被使用，以便段被另一端正确处理。<br>用的最广泛的标志是 SYN，ACK 和 FIN，用于建立连接，确认成功的段传输，最后终止连接。</p><p><strong>SYN</strong>：简写为<code>S</code>，同步标志位，用于建立会话连接，同步序列号；<br><strong>ACK</strong>：简写为<code>A</code>，确认标志位，对已接收的数据包进行确认；<br><strong>FIN</strong>： 简写为<code>F</code>，完成标志位，表示我已经没有数据要发送了，即将关闭连接；<br><strong>PSH</strong>：简写为<code>P</code>，推送标志位，表示该数据包被对方接收后应立即交给上层应用，而不在缓冲区排队；<br><strong>RST</strong>： 简写为<code>R</code>，重置标志位，用于连接复位、拒绝错误和非法的数据包；<br><strong>URG</strong>：简写为<code>U</code>，紧急标志位，表示数据包的紧急指针域有效，用来保证连接不被阻断，并督促中间设备尽快处理；</p><h2 id="TCP-三次握手建立连接"><a href="#TCP-三次握手建立连接" class="headerlink" title="TCP 三次握手建立连接"></a>TCP 三次握手建立连接</h2><p>所谓三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个报文。</p><p>三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。在 socket 编程中，客户端执行 connect() 时。将触发三次握手。</p><p>三次握手过程的示意图如下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzue11k9q7j209k08ct8s.jpg"                      alt="三次握手建立连接"                ></p><h3 id="第一次握手："><a href="#第一次握手：" class="headerlink" title="第一次握手："></a>第一次握手：</h3><p>客户端将TCP报文标志位SYN置为1，随机产生一个序号值seq=J，保存在TCP首部的序列号(Sequence Number)字段里，指明客户端打算连接的服务器的端口，并将该数据包发送给服务器端，发送完毕后，客户端进入<code>SYN_SENT</code>状态，等待服务器端确认。</p><h3 id="第二次握手："><a href="#第二次握手：" class="headerlink" title="第二次握手："></a>第二次握手：</h3><p>服务器端收到数据包后由标志位SYN=1知道客户端请求建立连接，服务器端将TCP报文标志位SYN和ACK都置为1，ack=J+1，随机产生一个序号值seq=K，并将该数据包发送给客户端以确认连接请求，服务器端进入<code>SYN_RCVD</code>状态。</p><h3 id="第三次握手："><a href="#第三次握手：" class="headerlink" title="第三次握手："></a>第三次握手：</h3><p>客户端收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给服务器端，服务器端检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，客户端和服务器端进入<code>ESTABLISHED</code>状态，完成三次握手，随后客户端与服务器端之间可以开始传输数据了。</p><p>注意:我们上面写的ack和ACK，不是同一个概念：</p><ul><li><p>小写的ack代表的是头部的确认号Acknowledge number， 缩写ack，是对上一个包的序号进行确认的号，ack=seq+1。</p></li><li><p>大写的ACK，则是我们上面说的TCP首部的标志位，用于标志的TCP包是否对上一个包进行了确认操作，如果确认了，则把ACK标志位设置成1。</p><p>下面我自己做实验，开一个HTTP服务，监听80端口，然后使用Tcpdump命令抓包，看一下TCP三次握手的过程：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump -n -t -S -i enp0s3  port 80 </span><br><span class="line"></span><br><span class="line">第一次握手，标志位Flags=S</span><br><span class="line">IP 10.0.2.2.51323 &gt; 10.0.2.15.80: Flags [S], seq 84689409, win 65535, options [mss 1460], length 0</span><br><span class="line">第二次握手，标志位Flags=[S.]</span><br><span class="line">IP 10.0.2.15.80 &gt; 10.0.2.2.51323: Flags [S.], seq 1893430205, ack 84689410, win 64240, options [mss 1460], length 0</span><br><span class="line">第三次握手，标志位Flags=[.]</span><br><span class="line">IP 10.0.2.2.51323 &gt; 10.0.2.15.80: Flags [.], ack 1893430206, win 65535, length 0</span><br><span class="line">建立连接后，客户端发送http请求 </span><br><span class="line">IP 10.0.2.2.51321 &gt; 10.0.2.15.80: Flags [P.], seq 1:753, ack 1, win 65535, length 752: HTTP: GET / HTTP/1.1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>tcpdump命令解析一下：<br>-i : 指定抓包的网卡是enp0s3<br>-n: 把域名转成IP显示<br>-t: 不显示时间<br>-S: 序列号使用绝对数值，不指定-S的话，序列号会使用相对的数值<br>port: 指定监听端口是80<br>host:指定监听的主机名</p></blockquote><p>我们看下实战中TCP的三次握手过程：</p><p>第一次握手，客户端51323端口号向服务器端80号端口发起连接，此时标志位flags=S，即SYN=1标志，表示向服务端发起连接的请求，同时生成序列号seq=84689409<br>第二次握手，服务端标志位flags=[S.]，即SYN+ACK标志位设置为1，表示对上一个请求连接的报文进行确认，同时设置ack=seq+1=184689410，生成序列号seq=1893430205<br>第三次握手，客户端对服务端的响应进行确认，所以此时标志位是[.]即ACK=1，同时返回对上一个报文的seq的确认号，ack=1893430206<br>至此，三次握手完成，一个TCP连接建立完成，接下来就是双端传输数据了</p><h3 id="为什么需要三次握手？"><a href="#为什么需要三次握手？" class="headerlink" title="为什么需要三次握手？"></a>为什么需要三次握手？</h3><p>我们假设client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。</p><p>本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。</p><p>假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。</p><p>所以，采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。</p><blockquote><p>TCP 三次握手跟现实生活中的人与人打电话是很类似的：</p><p>三次握手：<br>“喂，你听得到吗？”<br>“我听得到呀，你听得到我吗？”<br>“我能听到你，今天 balabala……”<br>经过三次的互相确认，大家就会认为对方对听的到自己说话，并且愿意下一步沟通，否则，对话就不一定能正常下去了。</p></blockquote><h2 id="TCP-四次挥手关闭连接"><a href="#TCP-四次挥手关闭连接" class="headerlink" title="TCP 四次挥手关闭连接"></a>TCP 四次挥手关闭连接</h2><p>四次挥手即终止TCP连接，就是指断开一个TCP连接时，需要客户端和服务端总共发送4个包以确认连接的断开。在socket编程中，这一过程由客户端或服务端任一方执行close来触发。<br>由于TCP连接是全双工的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN。首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭。</p><p>四次挥手过程的示意图如下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzue2xp20wj20jj0hlq3n.jpg"                      alt="四次挥手关闭连接"                ></p><p>挥手请求可以是Client端，也可以是Server端发起的，我们假设是Client端发起：</p><h3 id="第一次挥手："><a href="#第一次挥手：" class="headerlink" title="第一次挥手："></a>第一次挥手：</h3><p>Client端发起挥手请求，向Server端发送标志位是FIN报文段，设置序列号seq，此时，Client端进入<code>FIN_WAIT_1</code>状态，这表示Client端没有数据要发送给Server端了。</p><h3 id="第二次分手："><a href="#第二次分手：" class="headerlink" title="第二次分手："></a>第二次分手：</h3><p>Server端收到了Client端发送的FIN报文段，向Client端返回一个标志位是ACK的报文段，ack设为seq加1，Client端进入<code>FIN_WAIT_2</code>状态，Server端告诉Client端，我确认并同意你的关闭请求。</p><h3 id="第三次分手："><a href="#第三次分手：" class="headerlink" title="第三次分手："></a>第三次分手：</h3><p>Server端向Client端发送标志位是FIN的报文段，请求关闭连接，同时Client端进入<code>LAST_ACK</code>状态。</p><h3 id="第四次分手-："><a href="#第四次分手-：" class="headerlink" title="第四次分手 ："></a>第四次分手 ：</h3><p>Client端收到Server端发送的FIN报文段，向Server端发送标志位是ACK的报文段，然后Client端进入<code>TIME_WAIT</code>状态。Server端收到Client端的ACK报文段以后，就关闭连接。此时，Client端等待2MSL的时间后依然没有收到回复，则证明Server端已正常关闭，那好，Client端也可以关闭连接了。</p><h3 id="为什么连接的时候是三次握手，关闭的时候却是四次握手？"><a href="#为什么连接的时候是三次握手，关闭的时候却是四次握手？" class="headerlink" title="为什么连接的时候是三次握手，关闭的时候却是四次握手？"></a>为什么连接的时候是三次握手，关闭的时候却是四次握手？</h3><p>建立连接时因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。所以建立连接只需要三次握手。</p><p>由于TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议，TCP是全双工模式。<br>这就意味着，关闭连接时，当Client端发出FIN报文段时，只是表示Client端告诉Server端数据已经发送完毕了。当Server端收到FIN报文并返回ACK报文段，表示它已经知道Client端没有数据发送了，但是Server端还是可以发送数据到Client端的，所以Server很可能并不会立即关闭SOCKET，直到Server端把数据也发送完毕。<br>当Server端也发送了FIN报文段时，这个时候就表示Server端也没有数据要发送了，就会告诉Client端，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。</p><h3 id="为什么要等待2MSL？"><a href="#为什么要等待2MSL？" class="headerlink" title="为什么要等待2MSL？"></a>为什么要等待2MSL？</h3><p><strong>MSL</strong>：报文段最大生存时间，它是任何报文段被丢弃前在网络内的最长时间。<br>有以下两个原因：</p><ul><li>第一点：保证TCP协议的全双工连接能够可靠关闭：<br>由于IP协议的不可靠性或者是其它网络原因，导致了Server端没有收到Client端的ACK报文，那么Server端就会在超时之后重新发送FIN，如果此时Client端的连接已经关闭处于CLOESD状态，那么重发的FIN就找不到对应的连接了，从而导致连接错乱，所以，Client端发送完最后的ACK不能直接进入CLOSED状态，而要保持TIME_WAIT，当再次收到FIN的收，能够保证对方收到ACK，最后正确关闭连接。</li><li>第二点：保证这次连接的重复数据段从网络中消失<br>如果Client端发送最后的ACK直接进入CLOSED状态，然后又再向Server端发起一个新连接，这时不能保证新连接的与刚关闭的连接的端口号是不同的，也就是新连接和老连接的端口号可能一样了，那么就可能出现问题：如果前一次的连接某些数据滞留在网络中，这些延迟数据在建立新连接后到达Client端，由于新老连接的端口号和IP都一样，TCP协议就认为延迟数据是属于新连接的，新连接就会接收到脏数据，这样就会导致数据包混乱。所以TCP连接需要在TIME_WAIT状态等待2倍MSL，才能保证本次连接的所有数据在网络中消失。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TCP-协议简述&quot;&gt;&lt;a href=&quot;#TCP-协议简述&quot; class=&quot;headerlink&quot; title=&quot;TCP 协议简述&quot;&gt;&lt;/a&gt;TCP 协议简述&lt;/h2&gt;&lt;p&gt;TCP 提供面向有连接的通信传输，面向有连接是指在传送数据之前必须先建立连接，数据传送完成后</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="计算机网络" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="TCP" scheme="https://www.lzp.zone/tags/TCP/"/>
    
    <category term="网络编程" scheme="https://www.lzp.zone/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>TCP/UDP的区别</title>
    <link href="https://www.lzp.zone/2022/03/01/TCP-UDP%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://www.lzp.zone/2022/03/01/TCP-UDP%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-03-01T06:09:06.000Z</published>
    <updated>2022-03-24T15:45:17.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本区别"><a href="#基本区别" class="headerlink" title="基本区别"></a>基本区别</h2><blockquote><p>transmission control protocol、user datagram protocol</p></blockquote><p>基于连接与无连接<br>TCP要求系统资源较多，UDP较少<br>UDP程序结构较简单<br>流模式（TCP）与数据报模式(UDP)<br>TCP保证数据正确性，UDP可能丢包<br>TCP保证数据顺序，UDP不保证</p><h2 id="UDP应用场景："><a href="#UDP应用场景：" class="headerlink" title="UDP应用场景："></a>UDP应用场景：</h2><p>面向数据报方式<br>网络数据大多为短消息<br>拥有大量Client<br>对数据安全性无特殊要求<br>网络负担非常重，但对响应速度要求高</p><h2 id="具体编程时的区别"><a href="#具体编程时的区别" class="headerlink" title="具体编程时的区别"></a>具体编程时的区别</h2><p>socket()的参数不同<br>UDP Server不需要调用listen和accept<br>UDP收发数据用sendto/recvfrom函数<br>TCP：地址信息在connect/accept时确定<br>UDP：在sendto/recvfrom函数中每次均 需指定地址信息<br>UDP：shutdown函数无效</p><h2 id="编程区别"><a href="#编程区别" class="headerlink" title="编程区别"></a>编程区别</h2><p>通常我们在说到网络编程时默认是指TCP编程，即用前面提到的socket函数创建一个socket用于TCP通讯，函数参数我们通常填为SOCK_STREAM。即socket(PF_INET, SOCK_STREAM, 0)，这表示建立一个socket用于流式网络通讯。<br>SOCK_STREAM这种的特点是面向连接的，即每次收发数据之前必须通过connect建立连接，也是双向的，即任何一方都可以收发数据，协议本身提供了一些保障机制保证它是可靠的、有序的，即每个包按照发送的顺序到达接收方。<br>而SOCK_DGRAM这种是User Datagram Protocol协议的网络通讯，它是无连接的，不可靠的，因为通讯双方发送数据后不知道对方是否已经收到数据，是否正常收到数据。<br>任何一方建立一个socket以后就可以用sendto发送数据，也可以用recvfrom接收数据。根本不关心对方是否存在，是否发送了数据。它的特点是通讯速度比较快。大家都知道TCP是要经过三次握手的，而UDP没有。</p><h2 id="编程步骤区别："><a href="#编程步骤区别：" class="headerlink" title="编程步骤区别："></a>编程步骤区别：</h2><h3 id="TCP服务器端："><a href="#TCP服务器端：" class="headerlink" title="TCP服务器端："></a>TCP服务器端：</h3><p>创建一个socket，用函数socket()；<br>设置socket属性，用函数setsockopt(); * 可选<br>绑定IP地址、端口等信息到socket上，用函数bind();<br>开启监听，用函数listen()；<br>接收客户端上来的连接，用函数accept()；<br>收发数据，用函数send()和recv()，或者read()和write();<br>关闭网络连接；<br>关闭监听；</p><h3 id="TCP客户端："><a href="#TCP客户端：" class="headerlink" title="TCP客户端："></a>TCP客户端：</h3><p>创建一个socket，用函数socket()；<br>设置socket属性，用函数setsockopt();* 可选<br>绑定IP地址、端口等信息到socket上，用函数bind();* 可选<br>设置要连接的对方的IP地址和端口等属性；<br>连接服务器，用函数connect()；<br>收发数据，用函数send()和recv()，或者read()和write();<br>关闭网络连接；</p><h3 id="UDP服务器端："><a href="#UDP服务器端：" class="headerlink" title="UDP服务器端："></a>UDP服务器端：</h3><p>创建一个socket，用函数socket()；<br>设置socket属性，用函数setsockopt();* 可选<br>绑定IP地址、端口等信息到socket上，用函数bind();<br>循环接收数据，用函数recvfrom();<br>关闭网络连接；</p><h3 id="UDP客户端："><a href="#UDP客户端：" class="headerlink" title="UDP客户端："></a>UDP客户端：</h3><p>创建一个socket，用函数socket()；<br>设置socket属性，用函数setsockopt();* 可选<br>绑定IP地址、端口等信息到socket上，用函数bind();* 可选<br>设置对方的IP地址和端口等属性;<br>发送数据，用函数sendto();<br>关闭网络连接；</p><h2 id="TCP与UDP区别总结："><a href="#TCP与UDP区别总结：" class="headerlink" title="TCP与UDP区别总结："></a>TCP与UDP区别总结：</h2><ul><li>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接</li><li>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付</li><li>TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的</li><li>UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）</li><li>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信</li><li>TCP首部开销20字节;UDP的首部开销小，只有8个字节</li><li>TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</li><li>TCP和UDP是OSI模型中的运输层中的协议。TCP提供可靠的通信传输，而UDP则常被用于让广播和细节控制交给应用的通信传输。</li><li>UDP不提供复杂的控制机制，利用IP提供面向无连接的通信服务。并且它是将应用程序发来的数据在收到的那一刻，立刻按照原样发送到网络上的一种机制。即使是出现网络拥堵的情况下，UDP也无法进行流量控制等避免网络拥塞的行为。此外，传输途中如果出现了丢包，UDO也不负责重发。甚至当出现包的到达顺序乱掉时也没有纠正的功能。如果需要这些细节控制，那么不得不交给由采用UDO的应用程序去处理。换句话说，UDP将部分控制转移到应用程序去处理，自己却只提供作为传输层协议的最基本功能。UDP有点类似于用户说什么听什么的机制，但是需要用户充分考虑好上层协议类型并制作相应的应用程序。</li><li>TCP充分实现了数据传输时各种控制功能，可以进行丢包的重发控制，还可以对次序乱掉的分包进行顺序控制。而这些在UDP中都没有。此外，TCP作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以控制通信流量的浪费。TCP通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输。</li></ul><hr><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>UDP和TCP 在使用TCP/IP 体系结构的网络通信中，这两个协议的使用频率仅次于网际层的IP协议。TCP/IP 体系结构应用层中的某些协议需要使用运输层的TCP 提供的服务，而另一些协议需要使用运输层的UDP 提供的服务，UDP 是用户数据报协议的英文缩写词，TCP 是传输控制协议的英文缩写词。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzud7evcoqj21c10k9q5w.jpg"                      alt="33eb6437b31547f687e63f280f7313b5"                ></p><h2 id="2、从是否面向连接来看"><a href="#2、从是否面向连接来看" class="headerlink" title="2、从是否面向连接来看"></a>2、从是否面向连接来看</h2><p>如下图所示，两个小电脑图标代表英特网上的两台主机，纵坐标为时间。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzud7x0mg5j211s0i3dhy.jpg"                      alt="9a4b63b4a1c8486dac13fe1decba7420"                ></p><h3 id="2-1、UDP"><a href="#2-1、UDP" class="headerlink" title="2.1、UDP"></a>2.1、UDP</h3><p>两台主机如果在运输层使用UDP协议进行通信，双方可以随时发送数据，因此UDP是无连接的。</p><h3 id="2-2、TCP"><a href="#2-2、TCP" class="headerlink" title="2.2、TCP"></a>2.2、TCP</h3><p>再来看使用TCP 协议的情况，使用TCP协议的通信，双方在进行数据传输之前必须使用三报文握手来建立TCP 连接。TCP 连接建立成功后才能进行数据传输，数据传输结束后必须使用四报文挥手来释放TCP连接。需要注意的是这里所谓的连接是指逻辑连接关系，而不是物理连接，综上所述UDP是无连接的，而TCP是面向连接的。</p><h2 id="3、从连接对象个数来看"><a href="#3、从连接对象个数来看" class="headerlink" title="3、从连接对象个数来看"></a>3、从连接对象个数来看</h2><h3 id="3-1、UDP"><a href="#3-1、UDP" class="headerlink" title="3.1、UDP"></a>3.1、UDP</h3><p>下图是某个局域网上的使用UDP协议进行通信的四台主机，其中任何一台主机都可向其他三台主机发送广播，也可以向某个多播组发送多播，还可以向某台主机发送单播。也就是说UDP支持单播多播以及广播，换句话说UDP支持一对一，一对多以及一对全的通信。</p><p>一台主机向其他三台主机发送广播：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzud8h0obsj20q10jb75h.jpg"                      alt="6d11421847b64a12a97944c2efa7a2dd"                ></p><p>向某个多播组发送多播：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzud8zy2ftj20rb0k9dh6.jpg"                      alt="ce3d3c2f8cca41ae9043d1032c673061"                ></p><p>向某台主机发送单播：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzud9chcpaj20pe0j2q3w.jpg"                      alt="a34e1481f09f496cbb20076706db7199"                ></p><h3 id="3-2、TCP"><a href="#3-2、TCP" class="headerlink" title="3.2、TCP"></a>3.2、TCP</h3><p>再来看使用TCP协议的情况。使用TCP协议的通信，双方在进行数据传输之前必须使用三报文握手来建立TCP连接。TCP连接建立成功后</p><p>，通信双方之间就好像有一条可靠的通信信道，通信双方使用这条基于TCP连接的可靠信道进行通信。很显然，TCP仅支持单播，也就是一对一的通信。</p><p>三报文握手”建立TCP连接：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzuda0kabpj20pk0ii3zl.jpg"                      alt="96849a9723544fb893017ead9db3af50"                ></p><p>基于TCP连接的可靠信道：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzudaw6svgj20pw0ihgmn.jpg"                      alt="721c00c4f0dc417cbeaed4a7ce7a5127"                ></p><h2 id="4、从对应用报文的处理来看"><a href="#4、从对应用报文的处理来看" class="headerlink" title="4、从对应用报文的处理来看"></a>4、从对应用报文的处理来看</h2><h3 id="4-1、UDP"><a href="#4-1、UDP" class="headerlink" title="4.1、UDP"></a>4.1、UDP</h3><p>先来看使用UDP协议的情况。发送方的应用进程将应用层报文交付给运输层的UDP，UDP直接给应用层报文添加一个UDP首部，使之成为UDP用户数据报，然后进行发送。需要说明的是，为了简单起见，我们忽略运输层下面的各层处理。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzudbqhkuij20qd0l1mzj.jpg"                      alt="8992e517ed4a41e5ba2bfa9d700133f6"                ></p><p>接收方的UDP收到该UDP用户数据报后，去掉UDP首部，将应用层报文交付给应用进程。也就是说，UDP对应用进程交下来的报文既不合并也不拆分，而是保留这些报文的边界。换句话说，UDP是面向应用报文的。</p><h3 id="4-2、TCP"><a href="#4-2、TCP" class="headerlink" title="4.2、TCP"></a>4.2、TCP</h3><p>再来看使用TCP协议的情况。</p><p>发送方：</p><p>1、发送方的TCP把应用进程交付下来的数据块仅仅看作是一连串的无结构的字节流，TCP并不知道这些带传送的字节流的含义。<br>2、发送方将他们编号并存储在自己的发送缓存中。<br>3、TCP根据发送策略，从发送缓存中提取一定数量的字节构建TCP报文段并发送。<br>接收方：</p><p>1、接收方的TCP一方面从所接收到的TCP报文段中取出数据载荷部分，并存储在接收缓存中，一方面将接收缓存中的一些字节交付给应用进程。</p><p>2、TCP不保证接收方应用进程所收到的数据块与发送方应用进程所发出的数据块具有对应大小的关系（例如，发送方应用进程交给发送方的TCP共10个数据块，但接收方的TCP可能只用了4个数据块，就把收到的字节流交付给了上层的应用进程，但接收方收到的字节流必须和发送方应用进程发出的字节流完全一样。）当然，接收方的应用进程必须有能力识别收到的字节流，并把它还原成有意义的应用层数据。</p><p>因此，TCP是面向字节流的，这正是TCP 实现可靠传输、流量控制以及控制的基础。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzude1fw05j20qf0l4wgj.jpg"                      alt="3e1890af984840fbad609cf5e97e0c62"                ></p><blockquote><p>需要说明的是，为了突出示意图的要点，我们只画出了一个方向的数据流。在实际网络中，基于TCP连接的两端，可以同时进行TCP 报文段的发送和接收，也就是全双工通信。另外，图中的数据部分只包含了几个字节，实际当中一个TCP报文段包含上千个字节是很常见的。</p></blockquote><h2 id="5、从向其上层提供传输服务来看"><a href="#5、从向其上层提供传输服务来看" class="headerlink" title="5、从向其上层提供传输服务来看"></a>5、从向其上层提供传输服务来看</h2><h3 id="5-1、UDP"><a href="#5-1、UDP" class="headerlink" title="5.1、UDP"></a>5.1、UDP</h3><p>TCP/IP体系结构的网际层向其上层提供的是无连接不可靠的传输服务，当运输层使用UDP协议时，向其上层提供的也是无连接不可靠的传输服务。</p><p>发送方给接收方发送UDP用户数据报，若传输过程中用户数据报受到干扰而产生误码，接收方UDP可以通过该数据报首部中的校验和字段的值检查出产生物码的情况，但仅仅丢弃该数据报其他什么也不做。</p><p>发送方给接收方发送UDP用户数据报，如果该数据报被英特网中的某个路由器丢弃了，发送方UDP不做任何处理，因为UDP向上层提供的是无连接不可靠的传输服务。</p><p>因此，对于UDP用户数据报出现的物码和丢失等问题，UDP并不关心，基于UDP的这个特点，UDP适用于实时应用，例如IP电话、视频会议等。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzudeov7i6j20qy0ka421.jpg"                      alt="e4ab47a008c648669df4f092be7c8e50"                ></p><h3 id="5-2、TCP"><a href="#5-2、TCP" class="headerlink" title="5.2、TCP"></a>5.2、TCP</h3><p>再来看使用TCP协议的情况，尽管网际层中的IP协议向上层提供的是无连接不可靠的传输服务，也就是说，IP数据报可能在传输过程中出现丢失，误码，但只要运输层使用TCP协议，就可向其上层提供面向连接的可靠传输服务。</p><p>我们可将其想象成使用TCP协议的收发，双方基于TCP连接的可靠性到进行数据传输，不会出现误码丢失、乱序以及重复等传输差错。因此，TCP适用于要求可靠传输的应用，例如文件传输。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzudfchx73j20pw0kqjv9.jpg"                      alt="b06f59d4337540429f1fc1b29b5ed9f2"                ></p><h2 id="6、从首部格式来看"><a href="#6、从首部格式来看" class="headerlink" title="6、从首部格式来看"></a>6、从首部格式来看</h2><h3 id="6-1、UDP"><a href="#6-1、UDP" class="headerlink" title="6.1、UDP"></a>6.1、UDP</h3><p>一个UDP用户数据报由首部和数据载荷两部分构成，其首部格式如下图所示：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzudg1ed1uj20o70cjq45.jpg"                      alt="3566a318d3f84c41993acdb94045e7cf"                ></p><p>仅有4个字段，每个字段长度为2个字节，由于UDP不提供可靠传输服务，它仅仅在网际层的基础上添加了用于区分应用进程的端口，因此他的首部非常简单，仅有8个字节。</p><h3 id="6-2、TCP"><a href="#6-2、TCP" class="headerlink" title="6.2、TCP"></a>6.2、TCP</h3><p>一个TCP报文段由手部和数据载荷两部分构成，其首部格式如下图所示：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzudgcwy4vj20ox0iwmzf.jpg"                      alt="f0825e82953a42019b2ab8b6c0f97c3e"                ></p><p>这比UDP用户数据报的首部复杂的多，其最小长度为20字节，最大长度为60字节，这是因为TCP要实现可靠传输、流量控制控制等服务，其首部自然会比较复杂，首部中的字段比较多，首部长度也比较长。</p><h2 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h2><h3 id="7-1、UDP和TCP对比表格："><a href="#7-1、UDP和TCP对比表格：" class="headerlink" title="7.1、UDP和TCP对比表格："></a>7.1、UDP和TCP对比表格：</h3><table><thead><tr><th>类型</th><th>是否面向连接</th><th>传输可靠性</th><th>传输形式</th><th>传输效率</th><th>所需资源</th><th>应用场景</th><th>首部字节</th></tr></thead><tbody><tr><td>TCP</td><td>是</td><td>可靠</td><td>字节流</td><td>慢</td><td>多</td><td>文件、邮件传输</td><td>20~60个字节</td></tr><tr><td>UDP</td><td>否</td><td>不可靠</td><td>数据报文段</td><td>快</td><td>少</td><td>即时通讯、域名转换</td><td>8个字节</td></tr></tbody></table><p>​                        </p><h3 id="7-2、UDP和TCP对比图："><a href="#7-2、UDP和TCP对比图：" class="headerlink" title="7.2、UDP和TCP对比图："></a>7.2、UDP和TCP对比图：</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1gzudh1m8xaj21320e6tb0.jpg"                      alt="03b64d67dac744aeb1e13e82b1b1f946"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本区别&quot;&gt;&lt;a href=&quot;#基本区别&quot; class=&quot;headerlink&quot; title=&quot;基本区别&quot;&gt;&lt;/a&gt;基本区别&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;transmission control protocol、user datagram proto</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="计算机网络" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="TCP" scheme="https://www.lzp.zone/tags/TCP/"/>
    
    <category term="UDP" scheme="https://www.lzp.zone/tags/UDP/"/>
    
    <category term="网络编程" scheme="https://www.lzp.zone/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java核心技术》笔记</title>
    <link href="https://www.lzp.zone/2021/11/23/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.lzp.zone/2021/11/23/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2021-11-23T12:16:59.000Z</published>
    <updated>2022-03-20T12:28:55.970Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《Java核心技术》是一套全面扎实的Java工具书，适合进阶学习，平时可以搁一本放身边随时查漏补缺，巩固基础。</p></blockquote><p>[TOC]</p><h2 id="第一章-java程序设计概述"><a href="#第一章-java程序设计概述" class="headerlink" title="第一章 java程序设计概述"></a>第一章 java程序设计概述</h2><h3 id="1-1java的关键术语"><a href="#1-1java的关键术语" class="headerlink" title="1.1java的关键术语"></a>1.1java的关键术语</h3><ul><li>简单性      </li><li>面向对象<ul><li>定义：是一种程序设计技术，重点放在数据与对象的接口上。</li><li>相比于c++，java有简单的接口概念以及元类模型</li></ul></li><li>网络技能<ul><li>有一个拓展的例程库用于处理TCP/IP，能通过URL打开访问网络上的对象</li></ul></li><li>健壮性<ul><li>与c++最大的不同在于其采用的指针模型可消除重写内存和损坏数据的可能性</li></ul></li><li>安全性</li><li>可移植性</li><li>解释性</li><li>高性能<ul><li>字节码-机器码（即时编译）</li></ul></li><li>多线程</li><li>动态性</li></ul><blockquote><p>题外话：HTML和XML<br>HTML的全称为超文本标记语言，是一种标记语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、链接等。</p><p>HTML的缺点使其交互性差，语义模糊，这些缺陷难以适应Internet飞速发展的要求，因此一个标准、简洁、结构严谨以及可高度扩展的XML就产生了。</p><p>可扩展标记语言（XML）与Access,Oracle和SQL Server等数据库不同，数据库提供了更强有力的数据存储和分析能力，例如：数据索引、排序、查找、相关一致性等，XML的宗旨传输数据的，而与其同属标准通用标记语言的HTML主要用于显示数据。事实上XML与其他数据表现形式最大的不同是：他极其简单。这是一个看上去有点琐细的优点，但正是这点使XML与众不同。</p></blockquote><h2 id="第二章-java程序设计环境"><a href="#第二章-java程序设计环境" class="headerlink" title="第二章 java程序设计环境"></a>第二章 java程序设计环境</h2><blockquote><p>小百科：<br>JDK                  开发工具箱<br>JRE                  运行java程序用户所使用的程序软件<br>SE                    用于开发桌面或者简单服务器应用的Java平台<br>EE                    用于复杂的服务器应用的Java平台<br>ME                   用于手机和其他小型设备的Java平台<br>J2                    用于命名老版的Java<br>SDK                 用于命名老版的JDK<br>u                      甲骨文公司的术语，用于发布修改的bug<br>NetBeans         甲骨文公司的集成开发环境</p></blockquote><h2 id="第三章-Java的基本程序设计结构"><a href="#第三章-Java的基本程序设计结构" class="headerlink" title="第三章 Java的基本程序设计结构"></a>第三章 Java的基本程序设计结构</h2><h3 id="3-1-一个简单的Java应用程序"><a href="#3-1-一个简单的Java应用程序" class="headerlink" title="3.1 一个简单的Java应用程序"></a>3.1 一个简单的Java应用程序</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstSample</span></span></span><br><span class="line"><span class="class">//<span class="title">public</span>这个关键字称为访问修饰符（<span class="title">access</span> <span class="title">modifier</span>），用于控制程序的其他部分对这段代码的访问级别；<span class="title">class</span>表明程序中的全部内容都包含在类之中</span></span><br><span class="line"><span class="class">//<span class="title">class</span>后面紧跟类名</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(string[] args)</span><span class="comment">//void表示这个方法没有返回值</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello Swjtu&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;```</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>==Java对程序的大小写很敏感==</li><li>类是构建所有java应用程序和applet的构建块，后者的所有内容都应该放在类中</li><li>定义类名的规则如下：<ul><li>必须以大写字母开头，后面可跟字母数字任意组合</li><li>长度没有限制</li><li>不能使用Java保留字</li><li>类名由多个单词组成时每个单词的首字母都应该大写（骆驼命名法），如CamelCase</li></ul></li><li>源代码的文件名必须与公共类相同，并使用.java作为拓展名</li><li>编译运行时，源文件将从指定类中的<code>main</code>方法（函数）开始执行，故而源文件必须包含一个<code>main</code>方法，当然用户也可以自定义一个方法放在类中，并且在<code>main</code>中调用它</li><li>回车不是语句结束的标志，多条语句可以写在同一行之中。</li><li>(.)号用于调用方法，Java的通用语句<code>object.method(paraments);</code>，这等价于函数调用</li><li>()内的叫做参数，在Java的方法之中可以没有参数，但需要空括号，例如<br><code>System.out.println();</code></li></ol><h3 id="3-2-注释"><a href="#3-2-注释" class="headerlink" title="3.2 注释"></a>3.2 注释</h3><ol><li>注释的书写方式有三种：<ul><li>用“//”,其注释的内容到本行结尾</li><li>可以用”/**/ “ 囊括一段注释，注意在java中这种注释方式不能嵌套，即如果代码本身包含了一个“*/”，就不能在两端将代码括起来</li><li>第三种注释可以用来自动生成文档，以“/*<em>”开始，以“</em>/”结束</li></ul></li></ol><h3 id="3-3-数据类型"><a href="#3-3-数据类型" class="headerlink" title="3.3 数据类型"></a>3.3 数据类型</h3><ol><li>Java是一种强类型语言，意味着必须为每一个变量声明一种类型</li><li>Java没有任何的符号类型</li><li>检测“非数值”的方法：</li></ol><p><code>if(double.isNaN(x));</code></p><ol start="4"><li><p>总共8种基本类型：4种整型+2种浮点型+1种用于表示Unicode编码的字符单元的字符类型+1种用于表示真值的boolean类型</p></li><li><p>整型（允许是负数）</p><table><thead><tr><th align="center">类型</th><th align="center">储存需求/字节</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">4</td><td align="center">约为正负二十亿</td></tr><tr><td align="center">short</td><td align="center">2</td><td align="center">-32768～32767</td></tr><tr><td align="center">long</td><td align="center">8</td><td align="center">约正负九后十六零</td></tr><tr><td align="center">byte</td><td align="center">1</td><td align="center">-128～127</td></tr></tbody></table><ul><li><p>long用于大数量，short和byte则用于特定场合</p></li><li><p>java整型的范围与机器无关，能解决很多跨平台的问</p></li></ul></li></ol><ol start="2"><li><p>浮点型</p><table><thead><tr><th align="center">类型</th><th>储存需求</th><th>取值范围</th></tr></thead><tbody><tr><td align="center">float</td><td>4</td><td>大约正负3.40282E+38F(有效位数6-7)</td></tr><tr><td align="center">double</td><td>8</td><td>大约正负1.79769E+308（有效位数15）</td></tr></tbody></table></li></ol><ul><li>double的数值精度是float的两倍，绝大多数的应用程序都采用double类型</li><li>float的精度很难满足要求，用的少，例如在快速处理单精度数据或者需要储存大量的数据时才会采用</li><li>float类型后面有个F（例如3.14F），没有后缀F的浮点数值默认是double型</li><li>所有的浮点类型的计算都遵循IEE 754规范，下面是用来表示溢出和出错情况的三个特殊的浮点数值：<ul><li>正无穷大</li><li>负无穷大</li><li>NaN(不是一个数值，计算（0/0or负数的平方根)</li></ul></li></ul><ol start="3"><li><p>char型</p><ul><li><p>char 类型原本用于表示单个字符,如今， 有些Unicode字符可以用一个char值描述， 另外一些Unicode 字符则需要两个char 值</p></li><li><p>char 类型的字面量值要用单引号括起来。例如：W 是编码值为65 所对应的字符常量。它与”A” 不同，”A” 是包含一个字符A 的字符串, char 类型的值可以表示为十六进制值，其范围从\u0000 到\Uffff。</p></li><li><p>除了转义序列\u 之外， 还有一些用于表示特殊字符的转义序列</p></li><li><p>我们强烈建议不要在程序中使用char 类型， 除非确实需要处理UTF-16 代码单元。最好将字符串作为抽象数据类型处理</p></li></ul></li></ol><p>   <img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcp8k72ij30rf06h0t8.jpg"                                     ></p><ol start="4"><li><p>boolean型</p><ul><li>boolean ( 布尔）类型有两个值： false 和true, 用来判定逻辑条件整型值和布尔值之间不能进行相互转换。</li></ul></li></ol><h3 id="3-4-变量"><a href="#3-4-变量" class="headerlink" title="3.4 变量"></a>3.4 变量</h3><ol><li>变量名必须是一个以字母开头并由字母或数字构成的序列。与大多数程序设计语言相比，Java 中“ 字母” 和“ 数字” 的范围更大。字母包括 ’A’ ~ ’Z’、 ’a‘ ~ ’z’、‘_’ ,’$’或在某种语言中表示字母的任何 Unicode 字符。变量名中所有的字符都是有意义的，并且大小写敏感。变量名的长度基本上没有限制</li><li>不能使用 Java 保留字作为变量名</li><li>可以在一行中声明多个变量：<br><code>int i, z; // both are integers</code></li><li>声明一个变量之后，必须用赋值语句对变量进行显式初始化， 千万不要使用未初始化的变量。</li><li>变量的声明尽可能地靠近变量第一次使用的地方，这是一种良好的程序编写风格。</li><li>习惯上,常量名使用全大写。</li><li>在 Java 中，经常希望某个常量可以在一个类中的多个方法中使用，通常将这些常量称为<br>类常量。可以使用关键字 static fina丨设置一个类常量。 需要注意， 类常量的定义位于 main 方法的外部。 因此， 在同一个类的其他方法中也可以使用这个常量。 而且， 如果一个常量被声明为 public， 那么其他类的方法也可以使用这个常量。 在这个示例中，Constants2.CM就是这样一个常量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consitants2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> CM=<span class="number">2</span>；</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;<span class="keyword">double</span> KE=<span class="number">3</span>；</span><br><span class="line">   System.out.println(<span class="string">&quot;RE=&quot;</span>+CM*KE) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-运算符"><a href="#3-5-运算符" class="headerlink" title="3.5 运算符"></a>3.5 运算符</h3><ol><li>当参与 / 运算的两个操作数都是整数时， 表示整数除法；否则， 表示浮点除法。 </li><li>整数的求余操作（有时称为取模)用 ％ 表示。 例如， 15/2 等于 7, 15%2 等于 1, 15.0/2 等于 7.5</li><li>整数被 0 除将会产生一个异常， 而浮点数被 0 除将会得到无穷大或 NaN 结果。</li><li>在 main 方法中的所有指令都将使用严格的浮点计算。如果将一个类标记为strictfp(如<code>public static strictfp void main(String[] args)</code>), 这个类中的所有方法都要使用严格的浮点计算。</li><li>数学函数与常量</li></ol><ul><li><p>想计算一个数值的平方根， 可以使用 sqrt 方法：</p></li><li><p>```java<br>double x = 4;<br>double y = Math.sqrt(x);<br>System.out.println(y); // prints 2.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- println 方法和 sqrt 方法存在微小的差异。println 方法处理 System.out 对象。但是，</span><br><span class="line">  Math 类中的 sqrt 方法处理的不是对象，这样的方法被称为静态方法。</span><br><span class="line"></span><br><span class="line">- 在 Java 中，没有幂运算， 因此需要借助于 Math 类的 pow 方法。语句:</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  double y = Math.pow(x, a);</span><br></pre></td></tr></table></figure></li><li><p>floorMod 方法的目的是解决一个长期存在的有关整数余数的问题。<code>floorMod(position + adjustment, 12)</code>,你总会得到一个在0-11之间的数值。</p><ul><li>Math 类提供了一些常用的三角函数：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Math,sin</span><br><span class="line">Math.cos</span><br><span class="line">Math.tan</span><br><span class="line">Math.atan</span><br><span class="line">Math.atan</span><br></pre></td></tr></table></figure><ul><li><p>指数函数以及它的反函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Math.exp</span><br><span class="line">Math.log</span><br><span class="line">Math.loglO</span><br></pre></td></tr></table></figure></li><li><p>pi 和 e 常量的近似值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.PI</span><br><span class="line">Math.E</span><br></pre></td></tr></table></figure></li><li><p>不必在数学方法名和常量名前添加前缀“ Math”， 只要在源文件的顶部加上下面这行代码就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.1ang.Math.*;</span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line">System.out.println(<span class="string">&quot;The square root of \u03C0 is &quot;</span> + sqrt(PI)) ;</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>数值类型之间的转换</li></ol><p>  <img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcp8qyfej30rf06h0t8.jpg"                      alt="image-20210831142638991"                >        </p><ul><li><p>在图 3-1 中有 6 个实心箭头，表示无信息丢失的转换； 有 3 个虚箭头， 表示可能有精度<br>损失的转换。 例如，123 456 789 是一个大整数， 它所包含的位数比 float 类型所能够表达的<br>位数多。 当将这个整型数值转换为 float 类型时， 将会得到同样大小的结果，但却失去了一定<br>的精度。</p></li><li><p>当使用上面两个数值进行二元操作时（例如 n + f， n 是整数， f 是浮点数，) 先要将两个操作数转换为同一种类型，然后再进行计算。</p><ul><li>如果两个操作数中有一个是 double 类型， 另一个操作数就会转换为 double 类型。</li><li>否则， 如果其中一个操作数是 float 类型， 另一个操作数将会转换为 float 类型。</li><li>否则， 如果其中一个操作数是 long 类型， 另一个操作数将会转换为 long 类型。</li><li>否则， 两个操作数都将被转换为 int 类型。</li></ul></li></ul><ol start="7"><li>强制类型转换</li></ol><ul><li><p>强制类型转换的语法格式是在圆括号中给出想要转换的目标类型，后面紧跟待转换的变量名。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">9.997</span>;</span><br><span class="line"><span class="keyword">int</span> nx = (<span class="keyword">int</span>) x;</span><br></pre></td></tr></table></figure></li><li><p>对浮点数进行舍人运算， 以便得到最接近的整数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">9.997</span>;</span><br><span class="line"><span class="keyword">int</span> nx = (<span class="keyword">int</span>) Math.round(x);</span><br></pre></td></tr></table></figure></li><li><p>如果试图将一个数值从一种类型强制转换为另一种类型， 而又超出了目标类型的表示范围， 结果就会截断成一个完全不同的值。 例如：（byte)300的实际值为44。</p></li><li><p>可以在赋值中使用二元运算符；java也提供了自增、 自减运算符，关系运算；</p></li></ul><p>8.==位运算符==</p><ul><li>处理整型类型时，可以直接对组成整型数值的各个位完成操作。这意味着可以使用掩码技术得到整数中的各个位。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; (&quot;与&quot;) | (&quot;或&quot;) ， ^(&quot;异或&quot;)， ~ (&quot;非&quot;)</span><br></pre></td></tr></table></figure><ul><li>另外，还有&gt;&gt;和&lt;&lt; 运算符将位模式左移或右移。 需要建立位模式来完成位掩码时， 这两个运算符会很方便</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int fourthBitFromRight = (n &amp; (1&lt;&lt; 3)) &gt;&gt; 3;</span><br></pre></td></tr></table></figure><ul><li>最后,&gt;&gt;&gt;运算符会用 0 填充高位，这与&gt;&gt;不同，它会用符号位填充高位。不存在 &lt;&lt;&lt;<br>运算符。</li></ul><ol start="9"><li>括号与运算优先级</li></ol><ul><li>与 C 或 C++ 不同，Java 不使用逗号运算符。 不过， 可以在 foi■ 语 句 的 第 1 和<br>第 3 部分中使用逗号分隔表达式列表。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpgpdlpj30wt098t9g.jpg"                      alt="image-20210831145813401"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpdf2trj30xh0aygm8.jpg"                      alt="image-20210831145844903"                ></p><ol start="10"><li>枚举类型：变量的取值只在一个有限的集合内。 变量的取值只在一个有限的集合内。 </li></ol><h3 id="3-6-字符串"><a href="#3-6-字符串" class="headerlink" title="3.6 字符串"></a>3.6 字符串</h3><ul><li>Java 没有内置的字符串类型， 而是在标准 Java 类库中提供了一个预定义类， 很自然地叫做 String。每个用双引号括起来的字符串都是 String类的一个实例</li></ul><ol><li>子串：String 类的 substring 方法可以从一个较大的字符串提取出一个子串。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String greeting = &quot;Hello&quot;;</span><br><span class="line">String s = greeting.substring（0, 3);</span><br><span class="line">//加上下面这句，就能生成一个“Help!”</span><br><span class="line">greeting = greeting.substring(0, 3) + &quot;p!&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>拼接：</p><ul><li><p>允许使用 + 号连接（拼接）两个字符串</p></li><li><p>当将一个字符串与一个非字符串的值进行拼接时，后者被转换成字符串</p></li><li><p>任何一个 Java 对象都可以转换成字符串</p></li><li><p>如果需要把多个字符串放在一起， 用一个定界符分隔，可以使用静态 join 方法：</p></li><li><p>```java<br>String all = String.join(“ / “, “S”, “M”, “L”, “XL”);// all is the string “S / H / L / XL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 不可变字符</span><br><span class="line"></span><br><span class="line">   - String 类没有提供用于修改字符串的方法 </span><br><span class="line">   - 不可变字符串却有一个优点：编译器可以让字符串共享。</span><br><span class="line"></span><br><span class="line">4. 检测字符串是否相等</span><br><span class="line"></span><br><span class="line">   - `s.equals(t)`如果字符串 s 与字符串 t 相等， 则返回 true ; 否则， 返回 false。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>//      如何判断两个字符串是否相当<br>//      输出为”The result is :true” </p><pre><code>  String d=&quot;abc&quot;;  String e=&quot;abc&quot;;  boolean result = d.equals(e);  System.out.println(&quot;The result is :&quot; + result);</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- s 与 t 可以是字符串变量， 也可以是字符串字面量，如下表达也是合法的：</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  &quot;Hello&quot;.equals(greeting)</span><br></pre></td></tr></table></figure></li><li><p>要想检测两个字符串是否相等，而不区分大小写， 可以使用 equalsIgnoreCase 方法。如下：</p></li><li><p>```<br>“Hello”.equalsIgnoreCase(“hel1o”)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   - 一定不要使用= 运算符检测两个字符串是否相等！ 这个运算符只能够确定两个字串</span><br><span class="line">     是否放置在同一个位置上。</span><br><span class="line"></span><br><span class="line">   - 如果虚拟机始终将相同的字符串共享， 就可以使用= 运算符检测是否相等。但实际上只有字符串常量是共享的，而+ 或 substring 等操作产生的结果并不是共享的。</span><br><span class="line"></span><br><span class="line">5. 空 串 与 Null 串</span><br><span class="line"></span><br><span class="line">- 空串 &quot;&quot; 是长度为 0 的字符串。空串是一个 Java 对象， 有自己的串长度（0 ) 和内容（空）。不过，String 变量还可以存放一个特殊的值， 名为null, 这表示目前没有任何对象与该变量关联</span><br><span class="line"></span><br><span class="line">6. 码点和代码单元</span><br><span class="line"></span><br><span class="line">- Java 字符串由 char 值序列组成。char 数据类型是一</span><br><span class="line">  个采用 UTF-16 编码表示 Unicode 码点的代码单元。大多数的常用 Unicode 字符使用一个代码单元就可以表示，而辅助字符需要一对代码单元表示。</span><br><span class="line"></span><br><span class="line">7. ==String API==</span><br><span class="line"></span><br><span class="line">- 每一个 API 的注释都以形如 java.lang.String 的类名开始。类名之后是一个或多个方法的名字，解释和参数描述。</span><br><span class="line"></span><br><span class="line">8. 阅读联机API文档</span><br><span class="line"></span><br><span class="line">- API文档是 JDK 的一部分， 它是HTML 格式的。 让浏览器指向安装 roK 的 docs/api/index.html 子目录， 就可以看到</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3.7 输入输出</span><br><span class="line"></span><br><span class="line">1. 读取输入</span><br><span class="line"></span><br><span class="line">- 读取“ 标准输人流” System.in 就没有那么简单了。要想通 过控制台进行输人， 首先需要构造一个 Scanner 对象， 并与“ 标准输人流” System.in 关联。如下所示：</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  Scanner in = new Scanner(System.in);</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>nextLine 方法将输入一行。</p></li><li><p>```<br>System.out.print(“What  is your name?  “);<br>String name  = in.nextLine();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在这里， 使用 nextLine 方法是因为在输人行中有可能包含空格。 要想读取一个单词（以空白 符作为分隔符 )， 就调用：</span><br><span class="line">  ```String firstName = in.nextO;```</span><br><span class="line"></span><br><span class="line">- 想要读取一个整数，就用：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>int age = in.nextlntO;<br>System.out.print(“How old are you? “)；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 与此类似， 要想读取下一个浮点数， 就调用 nextDouble 方法。</span><br><span class="line"></span><br><span class="line">- 最后， 在程序的最开始添加上一行：</span><br><span class="line">  ```import  java.util.*;```</span><br><span class="line">  Scanner 类定义在 java.util 包中。  当使用的类不是定义在基本 java.lang 包中时， 一定要使用 import 指示字将相应的包加载进来。</span><br><span class="line"></span><br><span class="line">- 因为输入是可见的，  所以  Scanner 类不适用于从控制台读取密码。 Java SE 6 特别 引入了   Console 类实现这个目的。 要想读取一个密码， 可以采用下列代码：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">Console cons = System.console();</span><br><span class="line">String username = cons.readLine(&quot;User name: &quot;)； </span><br><span class="line">cha「[] passwd = cons.readPassword(&quot;Password:&quot;);</span><br></pre></td></tr></table></figure></li><li><p>为了安全起见， 返回的密码存放在一维字符数组中，  而不是字符串中。 在对密码进 行处理之后， 应该马上用一个填充值覆盖数组元素，采用  Console 对象处理输入不如采用  Scanner 方便。 每次只能读取一行输入，  而没有 能够读取一个单词或一个数值的方法。</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpa6svbj30nn0dstao.jpg"                      alt="image-20210902090521956"                ></p><ol start="2"><li>格式化输出</li></ol><ul><li><p>可以使用  SyStem.0Ut.print(x) 将数值  x 输出到控制台上。 这条命令将以  x 对应的数据类型 所允许的最大非  0 数字位数打印输出  X。 例如：<br><code>double x  = 10000.0 / 3.0; </code></p><p><code>System.out.print(x);</code><br>打印：3333.3333333333335<br>而使用如下方式则可以用 8 个字符的宽度和小数点后两个字符的精度打印x：<br><code>System.out.printf（%8.2f, x);</code></p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcp9qcwdj30u20kkjue.jpg"                      alt="image-20210902091536575"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcph5w87j30rx0e9gn6.jpg"                      alt="image-20210902091751837"                ></p><ul><li><p>s 转换符格式化任意的对象,， 对于任意实现了 Formattable 接口的对象都<br>将调用 formatTo 方法； 否则将调用 toString 方法， 它可以将对象转换为字符串。</p></li><li><p>printf方法中日期与时间的格式化选项。 </p><ul><li><p><code>System.out.printfCXtc&quot;, new DateO);</code></p><p>这条语句将用下面的格式打印当前的日期和时间：</p><p>Mon Feb 09 18:05:19 PST 2015</p></li><li><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpbkfznj30s908emxo.jpg"                      alt="image-20210903193738764"                ></p></li><li></li><li><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpfcpjqj30p40k9tas.jpg"                      alt="image-20210903193831340"                ></p></li></ul><p>某些格式只给出了指定 丨期的部分信息 t 。例如， 只有 FI 期 或 月 份 如果需要多次对口期操作才能实现对每一部分进行格式化的 Q 的就太笨拙了为此， 可以采用一个格式化的字符串指出要被格式化的参数索引。 索引必须紧跟在 ％ 后面， 并以 $ 终止。 如</p><p><code>System.out.printf( &quot;&amp;l$s %2$tB %2$te, %2$tY&quot;, &quot;Due date:&quot;, new DateQ())；</code></p><p>打印:Due date: February 9, 2015</p><p>还可以选择使用 &lt; 标志它指示前而格式说明中的参数将被再次使川也就是说， 下列<br>语句将产生与前面语句同样的输出结果：</p><p><code>System.out .printf (&quot;%s %tB %&lt;te, %&lt;tY&quot; , &quot;Due date:&quot; , new DateO) ;</code></p></li><li><p>格式说明符的语法图。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Users/coco/Library/Application%2520Support/typora-user-images/image-20210903194406508.png"                      alt="image-20210903194406508"                ></p></li></ul><ol start="3"><li>文件的输入和输出</li></ol><ul><li><p>要想对文件进行读取， 就需要一个用 File 对象构造一个 Scanner 对象， 如下所示：</p><p><code>Scanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;) , &quot;UTF-8&quot;) ;</code></p><p>如果文件名中包含反斜杠符号，就要记住在每个反斜杠之前再加一个额外的反斜杠：<br>“ c:\mydirectory\myfile.txt” c</p></li><li><p>要想写入文件， 就需要构造一个 PrintWriter 对象。在构造器中，只需要提供文件名：</p><p><code>PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;) ;</code></p><p>如果文件不存在，创建该文件。 可以像输出到 System.out—样使用 print、 println 以及 printf<br>命令。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpck3nwj30rm0lomzj.jpg"                      alt="image-20210903200720534"                ></p><ul><li><p>如果<br>用一个不存在的文件构造一个 Scanner, 或者用一个不能被创建的文件名构造一个 PrintWriter,<br>那么就会发生异常。Java 编译器认为这些异常比“ 被零除” 异常更严重。</p></li><li><p>已经知道有可能出现“ 输人 / 输出” 异常。这需要在 main 方法中用 throws 子句标记， 如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String口 args)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(Paths.get(<span class="string">&quot;myfi1e.txt&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>) ;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpeznlaj30s10h0ac3.jpg"                      alt="image-20210903201020643"                ></p></li></ul></li></ul><h3 id="3-8-控制流"><a href="#3-8-控制流" class="headerlink" title="3.8 控制流"></a>3.8 控制流</h3><ul><li>Java没有goto语句，但break语句可以带标签，可以利用它实现从内层循环跳出的目的；还有一种变形的 for 循环， 在C或C++中没有这类循环。它有点类似于C#中的 foreach 循环。</li></ul><ol><li>块作用域<ul><li>块（即复合语句）是指由一对大括号括起来的若干条简单的 Java 语句。块确定了变量的作<br>用域。一个块可以嵌套在另一个块中。</li><li>不能在嵌套的两个块中声明同名的变量。</li></ul></li><li>条件语句</li></ol><ul><li><code>if (condition) statement</code></li><li><code>if (condition) statementi else statementi</code></li><li>else 部分是可选的。else 子句与最邻近的 if 构成一组。</li></ul><ol start="3"><li>循环语句</li></ol><ul><li><code>while &#123;condition ) statement</code></li><li><code>do statement while &#123;condition );</code></li></ul><ol start="4"><li>确定循环</li></ol><ul><li>```java<br>for (int i = 1;i &lt;= 10; i++)<br>System.out.println(i);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果在 for 语句内部定义一个变量， 这个变量就不能在循环体之外使用。 因此， 如果希望在 for 循环体之外使用循环计数器的最终值， 就要确保这个变量在循环语句的前面且在外部声明！</span><br><span class="line"></span><br><span class="line">- 另一方面，可以在各自独立的不同 for 循环中定义同名的变量：</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  for (int i = 1; i &lt;= 10; i++)&#123;..&#125;</span><br><span class="line">  for (int i = 11; i &lt;= 20; i ++) &#123;..&#125;// OK to define another variable named i</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>多重选择：switch 语句</li></ol><ul><li><p>switch语句将从与选项值相匹配的 case 标签处开始执行直到遇到 break 语句，或者执行到switch i吾句的结束处为止。如果没有相匹配的 case 标签， 而有 default 子句， 就执行这个子句。</p></li><li><p>如果你比我们更喜欢 switch 语句， 编译代码时可以考虑加上 -Xlint:fallthrough 选项，如下所示：</p><p>这样一来， 如果某个分支最后缺少一个 break 语句， 编译器就会给出一个警告消息。</p></li><li><p>```java<br>javac -Xlint:fallthrough Test.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果你确实正是想使用这种“ 直通式”（fallthrough) 行为， 可以为其外围方法加一个标注@SuppressWamings(&quot;fallthrough&quot;)。 这样就不会对这个方法生成警告了 (标注是为编译器或处理 Java 源文件或类文件的工具提供信息的一种机制。 ）</span><br><span class="line"></span><br><span class="line">- case 标签可以是：</span><br><span class="line"></span><br><span class="line">  - 类型为 char、byte、 short 或 int 的常量表达式。</span><br><span class="line"></span><br><span class="line">  - 枚举常量。</span><br><span class="line"></span><br><span class="line">  - 从 Java SE 7 开始， case 标签还可以是字符串字面量。例如：</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    String input=...;</span><br><span class="line">    switch (input.toLowerCaseO)</span><br><span class="line">    &#123;</span><br><span class="line">    case &quot;yes&quot;: // OK since Java SE 7</span><br><span class="line">    ...</span><br><span class="line">    break;</span><br><span class="line">    ...&#125;</span><br></pre></td></tr></table></figure><ul><li><p>当在 switch 语句中使用枚举常量时，不必在每个标签中指明枚举名，可以由 switch 的表<br>达式值确定。例如：</p></li><li><p>```java<br>Size sz = . . .;<br>switch (sz)<br>{<br>case SMALL: // no need to use Size.SMALL<br>…<br>break;<br>…}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5. 中断控制流程语句</span><br><span class="line"></span><br><span class="line">- 与用于退出 switch 语句的 break 语句一样， 它也可以用于退出循环语句。</span><br><span class="line"></span><br><span class="line">- Java 还提供了一种带标签的 break语句， 用于跳出多重嵌套的循环语句。有时候，在嵌套很深的循环句中会发生一些不可预料的事情。此时可能更加希望跳到嵌套的所有循环语句之外。通过添加一些额外的条件判断实现各层循环的检测很不方便。</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  Scanner in = new Scanner(System.in);</span><br><span class="line">  int n;</span><br><span class="line">  read_data:</span><br><span class="line">  while (. . .) // this loop statement is tagged with the label</span><br><span class="line">  for (. . .) // this inner loop is not labeled</span><br><span class="line">  &#123;</span><br><span class="line">  Systen.out.print(&quot;Enter a number &gt;= 0: &quot;)；</span><br><span class="line">  n = in.nextlntO；</span><br><span class="line">  if (n &lt; 0) // should never happen-can’t go on</span><br><span class="line">  break read_data;</span><br><span class="line">  ...// break out of readjata loop</span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如果输入有误， 通过执行带标签的 break 跳转到带标签的语句块末尾。对于任何使用break语句的代码都需要检测循环是正常结束， 还是由 break 跳出。</p></li><li><p>最后，还有一个 continue 语句。 与 break 语句一样， 它将中断正常的控制流程。continue语句将控制转移到最内层循环的首部。</p></li><li><p>```java<br>Scanner in = new Scanner(System.in) ;<br>while (sum &lt; goal )<br>{<br>System.out.print(“Enter a number: “)；<br>n = in.nextlntO；<br>if (n &lt; 0) continue;<br>sum += n; // not executed if n &lt; 0<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  如果 n&lt;0, 则 continue语句越过了当前循环体的剩余部分， 立刻跳到循环首部。如果将 continue 语句用于 for 循环中， 就可以跳到 for 循环的“ 更新” 部分。 例如， 下面这个循环：</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  for (count = 1; count &lt;= 100; count++)</span><br><span class="line">  &#123;</span><br><span class="line">  System.out.print(&quot;Enter a number, -1 to quit: &quot;);</span><br><span class="line">  n = in.nextlntO；</span><br><span class="line">  if (n &lt; 0) continue;</span><br><span class="line">  sum += n; // not executed if n &lt; 0</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果 n&lt;0, 则 continue 语句跳到 count++ 语句。还有一种带标签的 continue 语句，将跳到与标签匹配的循环首部。</p></li></ul><h3 id="3-9-大数值"><a href="#3-9-大数值" class="headerlink" title="3.9 大数值"></a>3.9 大数值</h3><ul><li><p>如果基本的整数和浮点数精度不能够满足需求， 那么可以使用jaVa.math 包中的两个很有用的类：Biglnteger 和 BigDecimaL 这两个类可以处理包含任意长度数字序列的数值。Biglnteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。</p></li><li><p>使用静态的 valueOf 方法可以将普通的数值转换为大数值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Biglnteger a = Biglnteger.valueOf(<span class="number">100</span>);</span><br></pre></td></tr></table></figure></li><li><p>遗憾的是，不能使用人们熟悉的算术运算符（如：+ 和 *) 处理大数值。 而需要使用大数<br>值类中的 add 和 multiply 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Biglnteger c = a.add(b); <span class="comment">// c = a + b</span></span><br><span class="line">Biglnteger d = c.multiply(b.add(BigInteger.valueOf(<span class="number">2</span>))); <span class="comment">// d = c * (b + 2)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-10-数组"><a href="#3-10-数组" class="headerlink" title="3.10 数组"></a>3.10 数组</h3><ul><li><p>在声明数组变量时，需要指出数组类型（数据元素类型紧跟 [] ) 和数组变量的名字。如</p><p><code>int[] a = new int[100];//加上了初始化</code></p></li><li><p>创建一个数字数组时， 所有元素都初始化为 0。boolean 数组的元素会初始化为 false， 对象数组的元素则初始化为一个特殊值 null, 这表示这些元素（还）未存放任何对象。</p><p><code>String[] names = new String[10] ;</code>会创建一个包含 10 个字符串的数组， 所有字符串都为null。</p></li><li><p>要想获得数组中的元素个数，可以使用 array.length。例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i ++)</span><br><span class="line">System.out.println(a[i]);</span><br></pre></td></tr></table></figure></li><li><p>For each 循环</p><ul><li><p>Java 的一种功能很强的循环结构， 可以用来依次处理数组中的每个元素（其他类型的元素集合亦可）而不必为指定下标值而分心。</p><p><code>for (variable : collection) statement</code></p><p>定义一个变量用于暂存集合中的每一个元素， 并执行相应的语句（当然， 也可以是语句块)。collection 这一集合表达式必须是一个数组或者是一个实现了 Iterable 接口的类对象（例如ArrayList )。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> element : a)</span><br><span class="line">System.out.println(element):</span><br></pre></td></tr></table></figure></li></ul></li><li><p>想打印数组中的所有值利用 Arrays 类的 toString 方法更简单。 调用 Arrays.toString(a), 返回一个包含数组元素的字符串， 这些元素被放置在括号内， 并用逗号分隔， 例如，“ [2,3,5,7,11,13]”、 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(a));</span><br></pre></td></tr></table></figure></li><li><p>数组初始化以及匿名数组</p><ul><li><p>在 Java中， 提供了一种创建数组对象并同时赋予初始值的简化书写形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] small Primes = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span> &#125;;</span><br></pre></td></tr></table></figure><p>甚至还可以初始化一个匿名的数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span> &#125;</span><br><span class="line">small Primes = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span> &#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数组拷贝</p><ul><li><p>在 Java 中， 允许将一个数组变量拷贝给另一个数组变量。这时， 两个变量将引用同一 个数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] luckyNumbers = smallPrimes;</span><br><span class="line">1uckyNumbers[<span class="number">5</span>] = <span class="number">12</span>; <span class="comment">// now smallPrimes[5] is also 12</span></span><br></pre></td></tr></table></figure></li><li><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 Arrays 类的 copyOf方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] copiedLuckyNumbers = Arrays.copyOf(luckyNumbers, luckyNumbers.length) ;</span><br></pre></td></tr></table></figure><p>第 2 个参数是新数组的长度。这个方法通常用来增加数组的大小：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">luckyNumbers = Arrays.copyOf(luckyNumbers, <span class="number">2</span> * luckyNumbers.length);</span><br></pre></td></tr></table></figure><p>如果数组元素是数值型，那么多余的元素将被赋值为 0 ; 如果数组元素是布尔型， 则将赋值<br>为 false。相反， 如果长度小于原始数组的长度，则只拷贝最前面的数据元素。</p></li></ul></li><li><p>命令行参数</p><ul><li>  前面已经看到多个使用 Java 数组的示例。 每一个 Java 应用程序都有一个带 String arg[ ]参数的 main 方法。这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数.</li></ul></li><li><p>数组排序</p><ul><li><p>要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10000</span>];</span><br><span class="line">Arrays.sort(a)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>多维数组</p><ul><li><p>在 Java 中， 声明一个二维数组相当简单。 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span>[][] balances;</span><br></pre></td></tr></table></figure></li><li><p>与一维数组一样， 在调用 new 对多维数组进行初始化之前不能使用它。 在这里可以这样初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">balances = <span class="keyword">new</span> <span class="keyword">double</span>[NYEARS] [NRATES]:</span><br></pre></td></tr></table></figure><p>另外， 如果知道数组元素， 就可以不调用 new， 而直接使用简化的书写形式对多维数组<br>进行初始化。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] magicSquare =</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">16</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">13</span>&#125;，</span><br><span class="line">&#123;<span class="number">5</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">8</span>&#125;,</span><br><span class="line">(<span class="number">9</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">1</span>&#125;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>一旦数组被初始化， 就可以利用两个方括号访问每个元素， 例如，<code>balances[i][j]</code></p><p>例如使用初始余额来初始化这个数组的第一行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; balances[<span class="number">0</span>].length; j++)</span><br><span class="line">balances[<span class="number">0</span>][j] = <span class="number">10000</span>;</span><br></pre></td></tr></table></figure><p>然后， 按照下列方式计算其他行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; balances.length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; balances[i].length; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> oldBalance = balances[i - <span class="number">1</span>][j]:</span><br><span class="line"><span class="keyword">double</span> interest = . . .;</span><br><span class="line">balances[i][j] = oldBalance + interest;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>要想快速地打印一个二维数组的数据元素列表， 可以调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.deepToString(a)) ;</span><br></pre></td></tr></table></figure></li><li><p>for each 循环语句不能自动处理二维数组的每一个元素。它是按照行， 也就是一维教组处理的要想访问二维教组 a 的所有元素， 需要使用两个嵌套的循环， 如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span>[] row : a)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span> value : row)</span><br><span class="line"><span class="keyword">do</span> something with value</span><br></pre></td></tr></table></figure></li></ul></li><li><p>不规则数组</p><ul><li><p>Java 实际上没有多维数组， 只有一维数组。 多维数组被解释为“ 数组的数组。</p></li><li><p>表达式<code>balances[i]</code>引用第 i 个子数组， 也就是二维表的第 i 行。它本身也是一个组，<code>balances[i][j]</code>引用这个数组的第 j 项。由于可以单独地存取数组的某一行， 所以可以让两行交换:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doubleQ temp = balances[i]:</span><br><span class="line">balances[i] = balances[i + <span class="number">1</span>];</span><br><span class="line">balances[i + <span class="number">1</span>] = temp;</span><br></pre></td></tr></table></figure></li><li><p>还可以方便地构造一个“ 不规则” 数组， 即数组的每一行有不同的长度。</p><p>要想创建一个不规则的数组， 首先需要分配一个具有所含行数的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] odds = <span class="keyword">new</span> <span class="keyword">int</span> [NMAX + <span class="number">1</span>] [] ;</span><br></pre></td></tr></table></figure><p>接下来， 分配这些行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt;= NMAX ; n++)</span><br><span class="line">odds[n] = <span class="keyword">new</span> <span class="keyword">int</span> [n + <span class="number">1</span>] ;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h2><h3 id="4-1-面对对象程序设计概述"><a href="#4-1-面对对象程序设计概述" class="headerlink" title="4.1 面对对象程序设计概述"></a>4.1 面对对象程序设计概述</h3><ol><li>面向对象的程序是由对象组成的， 每个对象包含对用户公开的特定功能部分和隐藏的实现部分。</li><li>从根本上说， 只要对象能够满足要求， 就不必关心其功能的具体实现过程。在 OOP 中， 不必关心对象的具体实现， 只要能<br>够满足用户的需求即可。</li><li>对于一些规模较小的问题， 将其分解为过程的开发方式比较理想。而面向对象更加适用于解决规模较大的问题。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpft350j30hu0dht9w.jpg"                      alt="image-20210905155918979"                ></p><h4 id="4-1-1类"><a href="#4-1-1类" class="headerlink" title="4.1.1类"></a>4.1.1类</h4><ol><li>类（ class) 是构造对象的模板或蓝图。 由类构造 （construct) 对象的过程称为创建类的实例 （instance ) .</li><li>封装 （ encapsulation , 有时称为数据隐藏）是与对象有关的一个重要概念。 <ul><li>从形式上看，封装不过是将数据和行为组合在一个包中， 并对对象的使用者隐藏了数据的实现方式。</li><li>对象中的数据称为实例域（ instance field ), 操纵数据的过程称为方法（ method )。 </li><li>对于每个特定的类实例（对象）都有一组特定的实例域值。这些值的集合就是这个对象的当前状态 （ state )。<br>无论何时， 只要向对象发送一个消息，它的状态就有可能发生改变。</li><li>实现封装的关键在于绝对不能让类中的方法直接地访问其他类的实例域。 </li><li>程序仅通过对象的方法与对象数据进行交互。封装给对象赋予了“ 黑盒” 特征， 这是提高重用性和可靠性<br>的关键。</li></ul></li><li>有的类都源自于一个“ 神通广大的超类”，它就是 Object。</li><li>在扩展一个已有的类时， 这个扩展后的新类具有所扩展的类的全部属性和方法。在新类中， 只需提供适用于这个新类的新方法和数据域就可以了。通过扩展一个类来建立另外一个类的过程称为继承（inheritance）。</li></ol><h4 id="4-1-2对象"><a href="#4-1-2对象" class="headerlink" title="4.1.2对象"></a>4.1.2对象</h4><ol><li><p>要想使用 OOP,—定要清楚对象的三个主要特性：</p><ul><li><p>对象的行为（behavior)—可以对对象施加哪些操作，或可以对对象施加哪些方法？</p></li><li><p>对象的状态 （state)—当施加那些方法时，对象如何响应？</p></li><li><p>对象标识（identity )—如何辨别具有相同行为与状态的不同对象？</p></li></ul></li><li><hr><p>同一个类的所有对象实例， 由于支持相同的行为而具有家族式的相似性。对象的行为是用可调用的方法定义的。</p></li><li><p>每个对象都保存着描述当前特征的信息。这就是对象的状态。对象的状态可能会随着时间而发生改变，但这种改变不会是自发的。 对象状态的改变必须通过调用方法实现(如果不经过方法调用就可以改变对象状态， 只能说明封装性遭到了破坏。)</p></li><li><p>作为一个类的实例， 每个对象的标识永远是不同的， 状态常常也存在着差异。</p></li><li><p>对象的这些关键特性在彼此之间相互影响着。</p><hr></li></ol><h4 id="4-1-3-识别类"><a href="#4-1-3-识别类" class="headerlink" title="4.1.3 识别类"></a>4.1.3 识别类</h4><ol><li><p>传统的过程化程序设计， 必须从顶部的 main 函数开始编写程序。在面向对象程序设计时没有所谓的“ 顶部”。对于学习OOP 的初学者来说常常会感觉无从下手。答案是：  首先从设计类开始，然后再往每个类中添加方法。</p></li><li><p>识别类的简单规则是在分析问题的过程中寻找名词，而方法对应着动词。</p></li></ol><blockquote><p>例如， 在订单处理系统中，有这样一些名词：<br>•商品（Item )<br>•订单（Order)<br>•送货地址（Shippingaddress)<br>•付 款 ( Payment )<br>•账户（Account)</p><p>这些名词很可能成为类 Item、 Order 等。接下来， 查看动词：商品被添加到订单中， 订单被发送或取消， 订单货款被支付。对于<br>每一个动词如：“ 添加”、“ 发送”、“ 取消” 以及“ 支付”， 都要标识出主要负责完成相应动作的对象。 例如， 当一个新的商品添加到订单中时， 那个订单对象就是被指定的对象， 因为它知道如何存储商品以及如何对商品进行排序。也就是说，add 应该是 Order 类的一个方法，而 Item 对象是一个参数。</p></blockquote><h4 id="4-1-4类与类之间的关系"><a href="#4-1-4类与类之间的关系" class="headerlink" title="4.1.4类与类之间的关系"></a>4.1.4类与类之间的关系</h4><ol><li><p>最常见的关系有以下三种：</p><ul><li><p>依赖（“use-a”）</p><blockquote><p>依赖（dependence ), 即“ uses-a” 关系， 是一种最明显的、 最常见的关系。例如， Order类使用 Account 类是因为 Order 对象需要访问 Account 对象查看信用状态。但是 Item 类不依赖于 Account 类， 这是因为 Item 对象与客户账户无关。因此， 如果一个类的方法操纵另一个类的对象，我们就说一个类依赖于另一个类。</p></blockquote><ul><li>应该尽可能地将相互依赖的类减至最少。用软件工程的术语来说， 就是让类之间的耦合度最小。</li></ul></li><li><p>聚合（“has- a”）</p><blockquote><p>聚合（aggregation ), 即“ has-a” 关系， 又可称为关联，是一种具体且易于理解的关系。 例如， 一个Order 对象包含一些 Item 对象。聚合关系意味着类 A 的对象包含类 B 的对象。</p></blockquote></li><li><p>继承（“is-a”）</p><blockquote><p>继承（inheritance ), 即“ is-a” 关系， 是一种用于表示特殊与一般关系的。 例如， RushOrder类由 Order 类继承而来。 在具有特殊性的 RushOrder 类中包含了一些用于优先处理的特殊方法， 以及一个计算运费的不同方法；而其他的方法， 如添加商品、 生成账单等都是从Order 类继承来的。一般而言， 如果类 A 扩展类 B, 类 A 不但包含从类 B 继承的方法，还会拥有一些额外的功能。</p></blockquote></li></ul></li></ol><h3 id="4-2使用预定义类"><a href="#4-2使用预定义类" class="headerlink" title="4.2使用预定义类"></a>4.2使用预定义类</h3><ul><li>并不是所有的类都具有面向对象特征。 例如，Math 类。</li></ul><blockquote><p>程序中，可以使用 Math 类的方法， 如 Math.random, 并只需要知道方法名和参数 （如果有的话，) 而不必了解它的具体实现过程。这正是封装的关键所在，当然所有类都是这样。但遗憾的是， Math 类只封装了功能，它不需要也不必隐藏数据。 由于没有数据，因此也不必担心生成对象以及初始化实例域.</p></blockquote><h4 id="4-2-1对象和对象变量"><a href="#4-2-1对象和对象变量" class="headerlink" title="4.2.1对象和对象变量"></a>4.2.1对象和对象变量</h4><ol><li><p>在java之中，想要使用对象必须先构造对象，并指定其初始状态。</p><ul><li><p>使用构造器（construtor）构造新实例，构造器是一种特殊的方法，用来构造和初始化对象。</p><blockquote><p>在标准java库中包含了一个date类，它的作用是用来描述一个时间点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">december <span class="number">31</span>,<span class="number">1999</span>,<span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> GMT </span><br></pre></td></tr></table></figure></blockquote></li></ul></li><li><p>构造器的名字应该与类名相同，因此，Date类的构造器的名字就叫做Date。想要构造一个Date对象，得在构造器前面加上一个new操作符，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Date()</span><br><span class="line"><span class="comment">//这个构造器构造了一个新的对象。这个对象被初始化成了当前的日期和时间</span></span><br></pre></td></tr></table></figure><ul><li>也可将这个对象传递给一个方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="keyword">new</span> Date());</span><br></pre></td></tr></table></figure><ul><li><p>还可以将一个方法应用于刚刚创建的额对象。Date类中就有一个string方法。这个方法将返回日期的字符串描述。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> Date.toString();</span><br></pre></td></tr></table></figure></li></ul><p>在这两个例子里，对象仅仅使用了一次。通常我们希望对象可以多次使用，因此，可将对象放入一个变量之中。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date birthday = <span class="keyword">new</span> Date();</span><br></pre></td></tr></table></figure><p>==对象与对象变量之间的区别==</p><ul><li><p><code>Date deadline;</code>定义了一个对象deadline，它可以引用date类型的对象。但是，==一定要认识到，变量deadline不是一个变量，实际上也没有引用对象。此时不能把任何的Date方法应用在这个变量上。==例如下面这个语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s= deadline.toString();</span><br></pre></td></tr></table></figure><p>将产生编译错误。</p><p>必须要先初始化变量deadline，这里有两个选择：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deadline = <span class="keyword">new</span> Date();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deadline = birthday;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpd1xahj30c2061q36.jpg"                      alt="image-20210905193827965"                ></p></li><li><p>在Java中，任何对象变量的值都是对储存在另一个地方的一个对象的引用。</p></li><li><p>局部变量不会自动地初始化为null，而必须通过调用new或者将它们设置为null进行初始化。</p></li></ul></li></ol><h4 id="4-2-2Java类库中的LocalDate类"><a href="#4-2-2Java类库中的LocalDate类" class="headerlink" title="4.2.2Java类库中的LocalDate类"></a>4.2.2Java类库中的LocalDate类</h4><ol><li><p>类库设计者决定将保存时间与给时间点命名分开。所以标准 Java 类库分别包含了两个类：一个是用来表示时间点的 Date 类；另一个是用来表示大家熟悉的日历表示法的 LocalDate 类。</p></li><li><p>不要使用构造器来构造 LocalDate 类的对象。实际上，应当使用静态工厂方法 (factory method) 代表你调用构造器。下面的表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDate.now()</span><br></pre></td></tr></table></figure><p>会构造一个新对象，表示构造这个对象时的日期。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpc0t10j30ji0cy0ul.jpg"                      alt="image-20210905195854572"                ></p></li></ol><h4 id="4-2-3更改器方法与访问器方法"><a href="#4-2-3更改器方法与访问器方法" class="headerlink" title="4.2.3更改器方法与访问器方法"></a>4.2.3更改器方法与访问器方法</h4><ol><li>只 访 问 对 象 而 不 修 改 对 象 的 方 法 有 时 称 为 访 问 器 方 法 </li></ol><h3 id="4-3用户自定义类"><a href="#4-3用户自定义类" class="headerlink" title="4.3用户自定义类"></a>4.3用户自定义类</h3><h4 id="4-3-1-最简单的定义形式是："><a href="#4-3-1-最简单的定义形式是：" class="headerlink" title="4.3.1 最简单的定义形式是："></a>4.3.1 最简单的定义形式是：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">field1</span><br><span class="line">field2</span><br><span class="line">...</span><br><span class="line">construct1</span><br><span class="line">construct2</span><br><span class="line">...</span><br><span class="line">method1</span><br><span class="line">method2</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如下面这段代码所演示的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//instance field</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">  <span class="keyword">private</span> Date hireDay;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//constrator</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n,<span class="keyword">double</span> s,<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    name = n;</span><br><span class="line">    salary = s;</span><br><span class="line">    GregrorianCalendar calendar=<span class="keyword">new</span> GregrorianCalendar(year,month-<span class="number">1</span>,day);</span><br><span class="line">    hireday = <span class="function">calandar <span class="title">gettime</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//a method</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getname</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//more method</span></span><br><span class="line">  .....</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一个源文件里只能有一个公共类，但是可以有任意数目的非公有类。</p><h4 id="4-3-2-多个源文件的使用"><a href="#4-3-2-多个源文件的使用" class="headerlink" title="4.3.2 多个源文件的使用"></a>4.3.2 多个源文件的使用</h4><ul><li>如果习惯将每一个类都放在一个单独的源文件之中，那么可以有两种编译源程序的方法：<ul><li>一种是使用通配符调用java编译器：<code>javac Employee*.java</code>,所有与通配符相匹配的源文件都将被编译成类文件。</li><li>或者键入<code>jacac.EmployeeTest.java</code></li></ul></li></ul><h4 id="4-3-3剖析Employee类"><a href="#4-3-3剖析Employee类" class="headerlink" title="4.3.3剖析Employee类"></a>4.3.3剖析Employee类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n,<span class="keyword">double</span> s,<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getHireDay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span></span></span><br></pre></td></tr></table></figure><p>这个类的所有方法都被标记为public,这就意味着任何类的任何方法都能调用这些方法。接下来需要注意的是，Employee类的实例中有三个实例域用来存放将被操作的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"><span class="keyword">private</span> Date hireDay;</span><br></pre></td></tr></table></figure><blockquote><p>private能保证只有Employee类自身的方法才能访问这些实例域，而其他的方法则不能读写这些域。</p><p>对此相对比的是，极不推荐使用public来来标记实例域，因为这样做任何的方法都能读写修改该实例域中的数据，这也就破坏了封装。</p></blockquote><h4 id="4-3-4从构造器开始"><a href="#4-3-4从构造器开始" class="headerlink" title="4.3.4从构造器开始"></a>4.3.4从构造器开始</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n,<span class="keyword">double</span> s,<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  name=n;</span><br><span class="line">  salary=s;</span><br><span class="line">  GregrorianCalendar calendar = <span class="keyword">new</span> GregroCalendar(year,month-<span class="number">1</span>,day);</span><br><span class="line">  hireDay=calendar.getTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到，构造器类的名称相同。在构造Employee类的对象时，构造器会运行，以便将实例域初始化成所希望的状态。例如在这条代码<code>new Employee(&quot;James Bond&quot;，10000，1950，1，1)</code>创建Employee类实例时会把实例域设置成：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = James Bond;</span><br><span class="line">salary = <span class="number">10000</span>;</span><br><span class="line">hireDay = january <span class="number">1</span>,<span class="number">1950</span>;</span><br></pre></td></tr></table></figure><p>构造器和其他方法的不同之处在于，它的调用总是伴随着new操作符的执行，而不能使用构造器对一个已经存在的对象进行操作来达到重新设置实例域的目的，否则的话会出现编译错误。</p><blockquote><p>记忆要点</p><ol><li>构造器与类同名；</li><li>每个类可以有一个以上的构造器；</li><li>构造器可以有0个，1个或者多个参数；</li><li>构造器没有返回值；</li><li>构造期总是伴随着new操作符一起使用</li></ol></blockquote><h4 id="4-3-5隐式参数和显式参数"><a href="#4-3-5隐式参数和显式参数" class="headerlink" title="4.3.5隐式参数和显式参数"></a>4.3.5隐式参数和显式参数</h4><p>例如代码段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">double</span> raise = salary*byPercent/<span class="number">100</span>;</span><br><span class="line">  salary+=raise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将调用这个方法的对象的salary的实例域设置成新值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">number007.raiseSalary(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><ul><li>在方法名后面的括号里面的值就是一个显式参数</li><li>出现在方法名前的Employee类对象就是隐式参数</li><li>可以看到，显式参数是明显直白的出现在方法的声明之中的，而隐式参数没有出现在方法的声明之中；在每一个方法中，this表示隐式参数，例如可以把上述代码块的<code>salary</code>统统改成<code>this.salary</code>,可以明显地将实例域和局部变量区别开来。</li><li>在java中，所有方法都必须在类的内部进行定义，但并不代表它们就是内联方法。</li></ul><h4 id="4-3-6-封装的优点"><a href="#4-3-6-封装的优点" class="headerlink" title="4.3.6 封装的优点"></a>4.3.6 封装的优点</h4><ul><li><p>有些时候需要获取或者设置实例域的值，应该提供下面三个内容：</p><ul><li>一个私有的数据域</li><li>一个公有域的访问器方法</li><li>一个公有域的更改器方法</li></ul><p>有以下两点好处：</p><ol><li>可以改变内部实现，除了该类的方法之外不会影响其他代码；</li><li>更改器方法可以执行错误检查。</li></ol></li><li><p>注意不要编写返回引用可变对象的访问器方法。如果需要返回一个可变对象的引用，应该首先对它进行克隆，对象克隆是指存放在另外一个位置上的对象副本。</p></li></ul><h4 id="4-3-7基于类的访问权限"><a href="#4-3-7基于类的访问权限" class="headerlink" title="4.3.7基于类的访问权限"></a>4.3.7基于类的访问权限</h4><ul><li>一个方法可以访问同一个类下面所属的所有对象的数据，例如</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Employee other)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name.equals(other name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-8-私有方法"><a href="#4-3-8-私有方法" class="headerlink" title="4.3.8 私有方法"></a>4.3.8 私有方法</h4><ul><li>有时我们可能希望一个计算机代码分成若干个独立的辅助方法，通常这些方法不应该成为公有接口的一部分，这是由于他们往往与当前的实现机制非常紧密，或者需要一个特别的歇息以及一个特别的调用次序。</li><li>实现方法：只需要将关键字public改为private即可</li></ul><p>4.3.9 final实例域</p><ul><li>可以将实例域定义成final，构建对象时必须初始化这样的域，且后续不能再对它进行修改。</li><li>final修饰符大都应用于基本类型域，或者不可变类的域。</li></ul><h3 id="4-4静态域和静态方法"><a href="#4-4静态域和静态方法" class="headerlink" title="4.4静态域和静态方法"></a>4.4静态域和静态方法</h3><h4 id="4-4-1-静态域"><a href="#4-4-1-静态域" class="headerlink" title="4.4.1 静态域"></a>4.4.1 静态域</h4><ul><li>如果把域定义成static，每个类中只有一个这样的域，而每个一个对象对于所有的实例域却都有自己的拷贝。</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">id = nextId;</span><br><span class="line">nextId++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设为Harry设定雇员标识码：</p><p>Harry.setId();</p><p>Harry的id域被设置为静态域nextId当前的值，并且静态域的值加1。</p></blockquote><h4 id="4-4-2-静态常量"><a href="#4-4-2-静态常量" class="headerlink" title="4.4.2 静态常量"></a>4.4.2 静态常量</h4><ul><li><p>静态变量使用较少，静态常量使用的却比较多，例如PI：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI =  <span class="number">3.14159265358979323846</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在程序中可以采用<code>Math.PI</code>的形式来获得这个常量。</p></li><li><p>前面提到最好不要将域设置成public，但公有常量却没问题，因为out被设置为final，故不允许将其他打印流赋值给它。</p></li></ul><h4 id="4-4-3-静态方法"><a href="#4-4-3-静态方法" class="headerlink" title="4.4.3 静态方法"></a>4.4.3 静态方法</h4><ul><li><p>静态方法是一种不能向对象实时操作的方法。例如<code>Math.pow(x,a)</code>,在运算时，不使用任何Math对象，换句话说就是没有隐式参数。</p></li><li><p>可以认为静态方法是没有this参数的方法（在一个非静态的方法中，this参数表示这个方法的隐式参数）</p></li><li><p>Employee类的静态方法不能访问Id实例域，因为它不能操作对象。</p></li><li><p>静态方法可以访问自身类中的静态域：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNextId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> nextId;</span><br><span class="line">&#125;</span><br><span class="line">可以通过类名调用这个方法：</span><br><span class="line">  <span class="keyword">int</span> n = Employee.getNext();</span><br></pre></td></tr></table></figure></li><li><p>在下面两种情况下使用静态方法：</p><ul><li>一个方法不需要访问对象状态，其所需的参数都是通过显式参数提供的（例如：<code>Employee.getNextID</code>）</li><li>一个方法只需要访问类中的静态域（例如：Employee.getNextId）。</li></ul><h4 id="4-4-4-工厂方法"><a href="#4-4-4-工厂方法" class="headerlink" title="4.4.4 工厂方法"></a>4.4.4 工厂方法</h4><ul><li>静态方法还有另外一种常见的用途，类似于LocalDate和NumberFormat的类使用静态工厂方法来构造对象。例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance();</span><br><span class="line">NumberFormat percentFormatter = NumberFormat.getpercentInstance();</span><br><span class="line"><span class="keyword">double</span> x = <span class="number">0.1</span>;</span><br><span class="line">system.out.println(currencyFormatter.format(x));</span><br><span class="line">system.out.println(percentFormatter.format(x));</span><br></pre></td></tr></table></figure><blockquote><p>为什么NumberFormat类不利用构造器来完成这些操作呢？主要有以下两个原因：</p><ul><li>无法命名构造器。构造器的名字必须与类名相同，但是，这里希望将得到的货币实例和百分比实例采用不同的名字。</li><li>当使用构造器时，无法改变所构造对象的类型。而Factory方法将返回一个DecimalFormat类对象，这是NumberFormat的子类。</li></ul></blockquote><h4 id="4-4-5-main方法"><a href="#4-4-5-main方法" class="headerlink" title="4.4.5 main方法"></a>4.4.5 main方法</h4><ul><li>不需要使用对象调用静态方法。main就是个静态方法。</li><li>main方法不对任何对象进行才做，事实上，在启动程序时还没有任何一个对象，静态的main方法将执行并创建程序所需要的对象。</li></ul><blockquote><p>每一个类可以有一个main方法，这是一个常用于对类进行单元测试的技巧，例如可以在Employee类中添加一个main方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line"><span class="function">publlic <span class="title">employee</span><span class="params">(String n,<span class="keyword">double</span> s,<span class="keyword">int</span> year,<span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function">&#125;</span>&#123;</span><br><span class="line">...</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> Employee e = <span class="keyword">new</span> Employee(<span class="string">&quot;ROmeo&quot;</span>,<span class="number">50000</span>,<span class="number">2003</span>,<span class="number">3</span>,<span class="number">31</span>);</span><br><span class="line"> e.raiseSalary(<span class="number">10</span>);</span><br><span class="line"> system.out.println(e.getName()+<span class="string">&quot; &quot;</span>+e.getSalary());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果想要独立地运行测试Employee类，只需要执行：`java Employee`</span></span><br><span class="line"><span class="comment">//如果该类是一个更大型程序的一部分，就可以使用以下的语句来运行程序：</span></span><br><span class="line"><span class="comment">//`java Application`</span></span><br><span class="line"><span class="comment">//Employee类的main方法永远不会执行</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="4-5方法参数"><a href="#4-5方法参数" class="headerlink" title="4.5方法参数"></a>4.5方法参数</h3><blockquote><p>回顾一下有关参数传递给方法的一些专业术语：</p><ol><li>按值调用：表示方法接受的是调用者提供的值。</li><li>按引用调用：表示方法接受的是调用者提供的变量地址</li></ol><p>一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。</p></blockquote><ul><li><p>==java程序设计语言总是采用按值调用，不是引用调用。也就是说，方法得到的是所有参数值的一个拷贝，方法不能修改传递给它的任何参数变量的内容。==</p></li><li><p>方法参数的两种类型：</p><ul><li>基本数据类型（数字，布尔值）</li><li>对象引用</li></ul></li><li><p>==一个方法不可能修改一个基本数据类型的参数==，而对象引用作为参数则不一样了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tripleSalary</span><span class="params">(Employee x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x.raiseSalary(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    当调用时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">harry = <span class="keyword">new</span> Employee(...);</span><br><span class="line">tripleSalary(harry);</span><br></pre></td></tr></table></figure><p>具体的执行过程为：</p><figure class="highlight mk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. x被初始化为harry的拷贝，这里是一个对象的引用。</span><br><span class="line">2. raiseSalary方法引用与这个对象引用。x和harry同时引用的那个Employee对象的薪资提高了两倍。</span><br><span class="line">3. 方法结束之后，参数变量x不再使用。当然对象变量harry继续引用那个薪资增至三倍的固原对象。</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpefz4zj30j80azgmn.jpg"                      alt="image-20210914162110845"                ></p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpas0j1j30jk0f1gn1.jpg"                      alt="image-20210914162402773"                ></p><h3 id="4-6对象构造"><a href="#4-6对象构造" class="headerlink" title="4.6对象构造"></a>4.6对象构造</h3><h4 id="4-6-1-重载"><a href="#4-6-1-重载" class="headerlink" title="4.6.1 重载"></a>4.6.1 重载</h4><ul><li><p>定义：有些类有多个构造器，例如可以构造一个空的<code>StringBuilder</code>对象：</p><p><code>Stringbuilder messages = new Stringbuider();</code></p><p>亦可指定一个初始字符串：</p><p><code>StringBuilder todolist = new StringBuilder(&quot;To do:\n&quot;);</code></p><p>这种特征就叫做重载，即如果多个方法有相同的名字，不同的参数，便产生了重载。</p><blockquote><p>编译器必须挑选出具体执行哪个方法，它通过用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出相应的方法。</p><p>如果编译器找不到匹配的参数，就会产生编译时错误，因为根本不存在匹配，或者没有一个比其他的更好，这个过程叫做重载解析。</p></blockquote><ul><li><p>Java允许重载任何方法，而不只是构造器方法。因此要完整地描述一个方法，需要指出方法名以及参数类型，这叫做方法的签名。例如<code>String</code>类有四个成为indexOf的公有方法，他们的签名是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">indexOf(<span class="keyword">int</span>)</span><br><span class="line">indexOf(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><br><span class="line">indexOf(String)</span><br><span class="line">indexOf(String,<span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><p>返回类型不是方法签名的一部分，也就是说，不能有两个名字相同，参数类型也相同却返回不同类型值的方法。</p></li></ul><h4 id="4-6-2-默认域初始化"><a href="#4-6-2-默认域初始化" class="headerlink" title="4.6.2 默认域初始化"></a>4.6.2 默认域初始化</h4><ul><li>如果在构造器中没有显式地给域赋予初值，那么就会被自动得赋予初值：数值为0，布尔值为false，对象引用为null。</li></ul><blockquote><p>这也是域和局部变量的主要不同点，必须明确地初始化方法中的局部变量。但是，如果没有初始化类中的域，将会自动得初始化为默认值。</p></blockquote><ul><li>最好在使用之前初始化域。</li></ul><h4 id="4-6-3-无参数的构造器"><a href="#4-6-3-无参数的构造器" class="headerlink" title="4.6.3 无参数的构造器"></a>4.6.3 无参数的构造器</h4><ul><li>如果在编写一个类时没有编写构造器,那么系统就会提供一个无参数构造器。这个构造器将所有的实例域设置成默认值。于是，实例域中的数值型数据设置成0，布尔型数据设置成false，所有对象变量设置成null。</li><li>如果类中提供了至少一个构造器，但是没有提供无参数的构造器，则在构造对象时如果没有提供参数就会被视为不合法。</li></ul><h4 id="4-6-4-显式域初始化"><a href="#4-6-4-显式域初始化" class="headerlink" title="4.6.4 显式域初始化"></a>4.6.4 显式域初始化</h4><ul><li>通过重载类的构造器方法，可以采用多种形式设置类的实例域的初始状态。</li><li>在执行构造器之前，先执行赋值操作。当一个类的所有构造器都希望把相同的值赋予给某个特定的实例域时，这种方式特别有用。</li><li>初始值不一定是常量值，也可以调用方法对域进行初始化。</li></ul><h4 id="4-6-5-参数名"><a href="#4-6-5-参数名" class="headerlink" title="4.6.5 参数名"></a>4.6.5 参数名</h4><ul><li><p>在编写很小的构造器时，常常在参数命名上出现错误。例如用单个字符，但这样只有阅读代码才能晓得参数的含义.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n,<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  name=n;</span><br><span class="line">  salary=s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>另外一个技巧就是在每个参数前面加上一个前缀“a”，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String aName,<span class="keyword">double</span> aSalary)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  name=aName;</span><br><span class="line">  salary=aSalary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还有一个常用的技巧，基于这样的现实：参数变量用同样的名字将实例域屏蔽起来。例如，将参数命名成salary，salary将引用这个参数，而不是实例域。但是可以采用this.salary的形式访问实例域。回想一下，this指示隐式参数，也就是所构造的对象。</p></li></ul><h4 id="4-6-6-调用另外一个构造器"><a href="#4-6-6-调用另外一个构造器" class="headerlink" title="4.6.6 调用另外一个构造器"></a>4.6.6 调用另外一个构造器</h4><ul><li><p>关键字this引用方法的隐式参数，但它还有另外一个含义，如果构造器的第一个语句形如this(….),这个构造器将调用同一个类的另一个构造器，下面是个典型例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//calls Employee(String double)</span></span><br><span class="line">  <span class="keyword">this</span>(<span class="string">&quot;Employee #&quot;</span>+nextId s);</span><br><span class="line">  nextId++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用new Employee(60000)时，Employee(double)构造器将调用Employee（String,double）。采用这种方式使用this关键字非常有用，这样对公共的构造器代码部分只编写一次即可。</p></li></ul></li></ul><h4 id="4-6-7-初始化块"><a href="#4-6-7-初始化块" class="headerlink" title="4.6.7 初始化块"></a>4.6.7 初始化块</h4><ul><li><p>前文中有两种初始化数据域的方法：</p><ul><li>在构造器中设置值</li><li>在声明中赋值</li></ul><p>实际上还存在第三种机制，成为“初始化块”。在一个类的声明中，可以包含多个代码块，只要构造类的对象，这些块就会被执行。</p></li><li><p>由于初始化数据域有多种途径，所以列出构造过程的所有路径可能相当混乱。下面是调用构造器的具体处理步骤：</p><ol><li>所有数据域被初始化为默认值</li><li>按照在类声明中出现的次序，依次执行所有域初始化语句和初始化块</li><li>如果构造器第一行调用量第二个构造器，则执行第二个构造器主体</li><li>执行这个构造器的主体</li></ol><p>编写代码时我们应当精心组织好初始化代码，有利于其他人理解。</p></li><li><p>如果对类的静态域进行初始化的代码比较复杂，你们可以使用静态的初始化块。将代码放在一个块中，并标记关键字static。</p></li></ul><h4 id="4-6-8-对象析构与finalize方法"><a href="#4-6-8-对象析构与finalize方法" class="headerlink" title="4.6.8 对象析构与finalize方法"></a>4.6.8 对象析构与finalize方法</h4><ul><li>Java中有自动的垃圾回收器，不需要人工回收内存，故而Java不支持析构器</li></ul><blockquote><p>析构器：<a class="link"   href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/4456504" >计算机语言<i class="fas fa-external-link-alt"></i></a>中的<a class="link"   href="https://baike.baidu.com/item/%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/9483718" >析构函数<i class="fas fa-external-link-alt"></i></a>，当一个对象在消亡的时候，由<a class="link"   href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8/8853067" >编译器<i class="fas fa-external-link-alt"></i></a>自动调用，主要用来释放内存。</p></blockquote><h3 id="4-7-包"><a href="#4-7-包" class="headerlink" title="4.7 包"></a>4.7 包</h3><ul><li>Java允许使用包将类组织起来，借助于宝可以方便地组织自己的代码，并将自己的代码与别人提供的代码库分开管理。</li><li>标准的Java类库分布在多个包中，包括java.lang,java.util和java.net等。</li><li>标准的java包具有一个层次结构，也可以使用嵌套层次组织包。所有标准的java包都处在java和javax包层次中。</li><li>使用包的主要原因是确保类名的唯一性，同名的类放在不同的包中，不会产生冲突；为了保证包名的绝对唯一性，建议将域名以逆序的形式作为包名，如<code>com.horstman</code>，还能进一步地划分为子包，如<code>com.horstman.corejava</code>。</li><li>从编译器的角度来看，嵌套的包没有任何关系。</li></ul><h4 id="4-7-1-类的导入"><a href="#4-7-1-类的导入" class="headerlink" title="4.7.1 类的导入"></a>4.7.1 类的导入</h4><ul><li><p>一个类可以使用所属包的所有类，以及其他包中的共有类。采用两种方式访问另一个包中的公有类：</p><ul><li><p>第一种方式是在每个类名之前添加完整的包名。较为的繁琐，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.time.LocalDate today = java.time.LocalDate.now()；</span><br></pre></td></tr></table></figure></li><li><p>简单常用的另外一种是使用import语句，import语句是一种引用包含在包中的类的简明描述。一旦使用了import语句，在使用类时，就不必写出包的全名了。</p></li><li><p>可以使用import语句导入一个特定的类或者整个包。该语句应该位于源文件的顶部。</p></li><li><p>在多数情况下，只导入需要的包，不必过多得注意它们，但是如果发生命名冲突时，就需要注意他们的名字了。</p><blockquote><p>例如，<code>java.util</code>和<code>java.sql</code>中都有日期(Date)类,导入 如下两个包时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br></pre></td></tr></table></figure><p>当程序在使用Date类时，编译就会出现以下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date today; <span class="comment">// Error java.util.Date or java.sql.Date?</span></span><br></pre></td></tr></table></figure><p>因为此时编译器无法确定是使用哪个Date类，此时应该在导入处写明具体是哪个包中的Date类；如果都需要使用时那么在使用处应该标明完整的包名。</p></blockquote></li></ul></li></ul><h4 id="4-7-2-静态导入"><a href="#4-7-2-静态导入" class="headerlink" title="4.7.2 静态导入"></a>4.7.2 静态导入</h4><ul><li><p>import不仅可以导入类，还可以导入静态方法和静态域</p><blockquote><p>例如，在源文件的顶部，增加一条这样的指令：<code>import static java lang.system.*;</code></p><p>就可以使用system的静态方法和静态域的时候，不加类名前缀：</p><p><code>out.println(&quot;Hello World&quot;);</code></p><p><code>exit(0);</code></p></blockquote></li><li><p>这种方式可以让代码美观：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqrt(pow(x,<span class="number">2</span>)+pow(y,<span class="number">2</span>));<span class="comment">//美观</span></span><br><span class="line">Math.sqrt(Math.pow(x,<span class="number">2</span>)+Math.pow(y,<span class="number">2</span>));<span class="comment">//繁杂</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-7-3-将类放入包中"><a href="#4-7-3-将类放入包中" class="headerlink" title="4.7.3 将类放入包中"></a>4.7.3 将类放入包中</h4><ul><li><p>想要将一个类放入一个包中，就必须将包的的名字放在源文件的开头，定义类的代码之前。</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horstman.corejava;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>如果没有在源文件中放置package语句，这个源文件中的类会被放置在一个默认的包中（defaulf package）中。</p></li></ul><h4 id="4-7-4-包作用域"><a href="#4-7-4-包作用域" class="headerlink" title="4.7.4 包作用域"></a>4.7.4 包作用域</h4><ul><li>包不是一个封装的实体。也就是说，任何人都可以向包中添加更多的类。</li></ul><h4 id="4-8类路径"><a href="#4-8类路径" class="headerlink" title="4.8类路径"></a>4.8类路径</h4><ul><li><p>类储存文件系统的子目录中，类的路径必须与包名匹配，另外，类文件也可以储存在JAR（java归档）文件中。</p></li><li><p>为了使类能够被多个程序共享，需要一下几点：</p><ul><li>把类放在一个目录中，这个目录是包树状结构的基目录。</li><li>将JAR文件放在一个目录中</li><li>设置类路径（class path）</li></ul><p>在UNIX环境中，类路径的不同项目之间采用冒号(;)分隔；而在Windows系统中，则以分号（;）分隔。</p></li><li><p>类路径所列出的目录和归档文件是搜寻类的起始点。</p></li><li><p>编译器定位文件比虚拟机复杂的多。如果引用一个类，而没有指出这个类所爱的包，那么编译器将首先查找包含着这个类的包，并查询所有的import指令，确定其中是否包含被引用的类。</p></li></ul><h4 id="4-8-1-设置类路径"><a href="#4-8-1-设置类路径" class="headerlink" title="4.8.1 设置类路径"></a>4.8.1 设置类路径</h4><ul><li>最好采用<code>-classpath（或者-cp）</code>选项指定类路径。</li><li>整个指令应该书写在一行中。将这样一个长的命令行放在一个shell脚本或者一个批处理文件中是一个不错的主意。</li><li>利用 -dasspath 选项设置类路径是首选的方法， 也可以通过设置 CLASSPATH 环境变量 完成这个操作。</li></ul><h3 id="4-9文档注释"><a href="#4-9文档注释" class="headerlink" title="4.9文档注释"></a>4.9文档注释</h3><ul><li>如果在源代码中添加以专用的定界符 /** 开始的注释， 那么可以很容易地生成一个看上 去具有专业水准的文档。这是一种很好的方式， 因为这种方式可以将代码与注释保存在一个 地方。如果将文档存人一个独立的文件中， 就有可能会随着时间的推移， 出现代码和注释不 一致的问题。 然而， 由于文档注释与源代码在同一个文件中， 在修改源代码的同时， 重新运 行 javadoc 就可以轻而易举地保持两者的一致性。</li></ul><h4 id="4-9-1-注释的插入"><a href="#4-9-1-注释的插入" class="headerlink" title="4.9.1 注释的插入"></a>4.9.1 注释的插入</h4><ul><li>应该编写注释的部分：<ul><li>包</li><li>共有类与接口</li><li>共有的和受保护的构造器以及方法</li><li>共有的和受保护的域</li></ul></li><li>注释应该放置在所描述的特性前面，每个/***…..*/文档注释在标记之后紧跟着“自由格式文本”，标记以@开始，如<code>@author</code>,<code>@param</code>。</li><li>自由格式文本的第一句应该是一个概要性的句子，javadoc实用程序将自动得将这些句子抽取出来形成概要页。</li><li>在自由格式文本中，可以使用HTML修饰符。</li></ul><h4 id="4-9-2-类注释"><a href="#4-9-2-类注释" class="headerlink" title="4.9.2 类注释"></a>4.9.2 类注释</h4><ul><li>类注释必须放在import语句之后，类定义之前。</li></ul><h4 id="4-9-3-方法注释"><a href="#4-9-3-方法注释" class="headerlink" title="4.9.3 方法注释"></a>4.9.3 方法注释</h4><ul><li><p>每一个方法注释必须放在所描述方法之前。除了通用的标记之外，还可以使用下面的标记：</p><ul><li><p>@param 变量描述</p><p>这个标记将对当前方法的“ param” (参数)部分添加一个条目。这个描述可以占据多</p><p>行， 并可以使用 HTML 标记。一个方法的所有 @param 标记必须放在一起。</p></li><li><p>return 描述</p><p>这个标记将对当前方法添加“ return” (返回)部分。这个描述可以跨越多行， 并可以</p><p>使用 HTML 标记。</p></li><li><p>throws类描述</p><p>这个标记将添加一个注释， 用于表示这个方法有可能抛出异常。</p></li></ul></li></ul><h4 id="4-9-4-域注释"><a href="#4-9-4-域注释" class="headerlink" title="4.9.4 域注释"></a>4.9.4 域注释</h4><ul><li>只需要对公有域（通常是指静态变量）建立文档。</li></ul><h4 id="4-9-5-通用注释"><a href="#4-9-5-通用注释" class="headerlink" title="4.9.5 通用注释"></a>4.9.5 通用注释</h4><p>下面的标记可以用在类文档的注释中：</p><ul><li><p>eauthor 姓名</p><p>这个标记将产生一个 ** author” ( 作者)条目。可以使用多个 @aUthor 标记， 每个 @</p><p>author 标记对应一个作者</p></li><li><p>©version</p><p>这个标记将产生一个“ version ”(版本)条目。 这里的文本可以是对当前版本的任何描</p><p>述。</p></li></ul><p>下面的标记可以用于所有的文档注释中：</p><ul><li><p>@sinee文本</p><p>这个标记将产生一个“ since” (始于)条目。这里的 text 可以是对引人特性的版本描 述 例如 ©since version 1.7.10。</p></li><li><p>@deprecated</p><p>这个标记将对类、方法或变量添加一个不再使用的注释。 文本中给出了取代的建议。 例如，</p><p>@deprecated Use <code> setVIsible(true) </code> instead</p><p>通过 @see 和 @link 标记， 可以使用超级链接， 链接到 javadoc 文档的相关部分或外</p><p>部文档。</p></li><li><p>see引用</p><p>这个标记将在“ see also” 部分增加一个超级链接。它可以用于类中， 也可以用于方 法中。 这里的引用可以选择下列情形之一:</p><p>package, class#feature label</p><p> <a href=" ..">label/a&gt;</p><p>“Text”</p><p>第一种情况是最常见的。 只要提供类、方法或变量的名字，javadoc 就在文档中插入 一个超链接。 例如，<br> @see com.horstraann.corejava.Employee#raiseSalary(double)</p><p>建立一个链接到 com.horstmann.corejava.Employee 类的 raiseSalary(double) 方法的超 链接。 可以省略包名， 甚至把包名和类名都省去， 此时， 链接将定位于当前包或当前类。</p><p>如果 @see 标记后面有一个 &lt; 字符， 就需要指定一个超链接。</p><p>如果 @see 标记后面有一个双引号(“)字符， 文本就会显示在 “ see also” 部分。</p></li><li><p>如果愿意的话， 还可以在注释中的任何位置放置指向其他类或方法的超级链接， 以及</p><p>插人一个专用的标记， 例如，</p><p>{@}ink package.class#ifeature label} </p><p>这里的特性描述规则与 @see 标记规则一样。</p></li></ul><p>4.9.6 包域概述注释</p><ul><li>要想产生包注释， 就需要在每一个包目录中添加一个单独的文件。可以 有如下两个选择:<ul><li>提供一个以 package.html 命名的 HTML 文件。在标记 <body>…</body> 之间的所有 文本都会被抽取出来。</li><li>提供一个以 package-info.java 命名的 Java 文件。 这个文件必须包含一个初始的以 /** 和 */ 界定的 Javadoc 注释， 跟随在一个包语句之后。它不应该包含更多的代码或注释。</li><li>还可以为所有的源文件提供一个概述性的注释。 这个注释将被放置在一个名为 overview, html 的文件中， 这个文件位于包含所有源文件的父目录中。标记 <body>… </body> 2间的所 有文本将被抽取出来。 当用户从导航栏中选择“ Overview ” 时， 就会显示出这些注释内容。</li></ul></li></ul><h4 id="4-9-7-注释的抽取"><a href="#4-9-7-注释的抽取" class="headerlink" title="4.9.7 注释的抽取"></a>4.9.7 注释的抽取</h4><ul><li>可以使用多种形式的命令行选项对 javadoc 程序进行调整。 </li><li>-version 选项在文档中包含 @author 和 @version 标记 (默认情况下， 这些标记会被省 略)。另一个很有用的选项是-link, 用来为标准类添加超链接。</li></ul><h3 id="4-10类设计技巧"><a href="#4-10类设计技巧" class="headerlink" title="4.10类设计技巧"></a>4.10类设计技巧</h3><p>使设计出来的类更具有 OOP 的专业水准的技巧：</p><ol><li><p>一定要保证数据私有</p><p>绝对不要破坏封装性，数据的表现形式很可能会发生改变，但是它们的使用方式不会经常改变。</p></li><li><p>一定要对数据初始化</p><p>java不会对局部变量进行初始化，但会对对象的实例域进行初始化，最好不要依赖于系统的默认值，应该显式地初始化所有的数据。</p></li><li><p>不要再类中使用过多的基本类型</p><p>用其他的类代替多个相关的基本类型的使用。</p></li><li><p>不是所有的域都需要独立的域访问器和域更改器</p></li><li><p>将职责过多的类进行分解</p></li><li><p>类名和方法名要能够体现它们的职责</p></li><li><p>优先使用不可变的类</p></li></ol><h2 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h2><h3 id="5-1-类，超类和子类"><a href="#5-1-类，超类和子类" class="headerlink" title="5.1 类，超类和子类"></a>5.1 类，超类和子类</h3><ul><li>“is-a”关系是继承的一个明显特征</li><li>在Java中，所有继承都是公有继承，没有c++中的私有继承和保护继承</li></ul><h4 id="5-1-1-定义子类"><a href="#5-1-1-定义子类" class="headerlink" title="5.1.1 定义子类"></a>5.1.1 定义子类</h4><ul><li><p>关键字<code>extends</code>表示继承</p><blockquote><p>下面由继承Employee类来定义Manager类的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...<span class="comment">//添加方法与域，例如：</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> bonus;</span><br><span class="line">...</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setbonus</span><span class="params">(<span class="keyword">double</span> bonus )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpdw2zhj30ja05bmy2.jpg"                      alt="image-20210923103914943"                ></p></blockquote></li><li><p>再通过拓展定义子类的时候，仅需要指出子类和超类的不同指出。因此在设计类的时候，应该将通用的方法放在超类中，而将具有特殊用途的方法放在子类中。</p></li></ul><h4 id="5-1-2-覆盖方法"><a href="#5-1-2-覆盖方法" class="headerlink" title="5.1.2 覆盖方法"></a>5.1.2 覆盖方法</h4><ul><li>```java<br>public double getSalary()<br>{<br>  return salary + bonus;//不能工作<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ==问题在于Managerer类的getSalary方法不能直接地访问超类的私有域,也就是说尽管每个Manager对象都有一个名为salary的域,但在Manager类的getSalary方法中并不能够直接地访问salary域,只有Employee类的方法才能够访问私有部分, 如果 Manager 类的方法一定要访问私有域， 就必须借助于公有的接口， Employee 类中的 公有方法 getSalary 正是这样一个接口。</span><br><span class="line"></span><br><span class="line">- 在子类中可以增加域,增加方法或者覆盖类的方法,然而绝对不能删除继承的任何域和方法.</span><br><span class="line"></span><br><span class="line">#### 5.1.3 子类构造器</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public Manager(String name,double salary,int year,int day)</span><br><span class="line">&#123;</span><br><span class="line">  super (name,salary,year,month,day);</span><br><span class="line">  bonus = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这里的关键字super有着不一样的含义，语句<code>super(n,s,year,month,day)</code>是”调用超类Employee中含有n，s，year，month和day参数的构造器“的简写模式。</p></blockquote><ul><li>使用super调用构造器的语句必须是子类构造器的第一条语句。</li></ul><blockquote><p>this关键字的两个用途：</p><ul><li>一是引用隐式参数</li><li>二是带哦用该类的其他构造器</li></ul><p>对比之下，super也有两个用途：</p><ul><li>一是调用超类的方法</li><li>二是调用超类的构造器</li></ul><p>注意点：在调用构造器的时候， 这两个关键字的使用方式很相似。调用构造器的语句只能作为另 一个构造器的第一条语句出现。构造参数既可以传递给本类(this) 的其他构造器，也可 以传递给超类(super) 的构造器。</p></blockquote><ul><li>一个对象变量可以指示多种实际类型的现象被称为==多态==</li><li>在运行时能够自动地选择调用哪个方法的现象被称为动态绑定。</li></ul><h4 id="5-1-4-继承层次"><a href="#5-1-4-继承层次" class="headerlink" title="5.1.4 继承层次"></a>5.1.4 继承层次</h4><ul><li>继承并不只限于一个层次</li><li>由一个公共超类派生出来的所有类的集合被称为继承层次</li><li>在继承层次中，从某个特定的类到其祖先的路径被称为该累的继承链</li><li>一个祖先类可以拥有多个子孙继承链</li><li>java不支持多继承</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcpg98fij30du0dn756.jpg"                      alt="image-20210925190015571"                ></p><h4 id="5-1-5-多态"><a href="#5-1-5-多态" class="headerlink" title="5.1.5 多态"></a>5.1.5 多态</h4><ul><li><p>判断是否应该设计成继承关系的简单规则，就是”is-a“guize，它表明子类的每个对象也是超类的对象。例如，每个经理都是雇员。</p></li><li><p>”is-a“规则的另一种表述法是置换法则，它表明程序中出现超类对象的任何地方都可以用子类对象替换。</p><p>例如，将一个子类对象赋值给超类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Employee e:</span><br><span class="line">e = <span class="keyword">new</span> Employee(...);</span><br><span class="line">e = <span class="keyword">new</span> Manager(...);</span><br></pre></td></tr></table></figure></li><li><p>对象变量是多态的，存在一个变量即可以同时引用父子类的对象</p></li><li><p>在JAVA中，子类数组的引用可以转换成超类数组的引用，而不需要采用强制类型转换</p></li></ul><h4 id="5-1-6-理解方法调用"><a href="#5-1-6-理解方法调用" class="headerlink" title="5.1.6 理解方法调用"></a>5.1.6 理解方法调用</h4><ul><li><p>调用过程的详细描述</p><ul><li><p>编译器查看对象的声明类型和方法名</p></li><li><p>编译器将查看调用方法时提供的参数类型</p><blockquote><p>调用<code>x.f(param)</code>，在列举完类中所有名为f 的方法之后，其中存在一个与提供的参数类型完全匹配的，就选择调用这个方法，这个过程被称为重载解析。</p></blockquote></li><li><p>如果没有找到一个与参数类型相匹配的方法，或者发现经过类型转换之后有多个方法与只匹配，就会报错。</p></li><li><p>至此，编译器已获得需要调用的方法名字和参数类型</p></li></ul></li><li><p>如果是private方法，static方法，final方法或者构造器，那么编译器将可以准确的知道该调用哪个方法，我们将这种调用方式成为静态绑定。</p></li><li><p>当程序运行时，并且采用动态绑定调用方法时，虚拟机一定调用与x所引用对象的实际类型最合适的那个类的方法。</p></li><li><p>动态绑定由一个非常重要的特性，就是无需对现存的代码进行修改，就可以对程序进行拓展。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNly1gwpcphmavmj30lc02lq37.jpg"                      alt="image-20210926145056863"                ></p></li></ul><h4 id="7-1-7-阻止继承：final类和方法"><a href="#7-1-7-阻止继承：final类和方法" class="headerlink" title="7.1.7 阻止继承：final类和方法"></a>7.1.7 阻止继承：final类和方法</h4><ul><li>不允许拓展的类被称为final类。例如，人民希望阻止定义Excutive类的子类，就可以在定义这个类的时候使用final修饰符声明。</li><li>将方法和类声明为final的主要目的是：确保他们不会在子类中改变语义。</li></ul><h3 id="5-2-所有类的超类"><a href="#5-2-所有类的超类" class="headerlink" title="5.2 所有类的超类"></a>5.2 所有类的超类</h3><h3 id="5-3-泛型数组列表"><a href="#5-3-泛型数组列表" class="headerlink" title="5.3 泛型数组列表"></a>5.3 泛型数组列表</h3><h3 id="5-4-对象包装器与自动装箱"><a href="#5-4-对象包装器与自动装箱" class="headerlink" title="5.4 对象包装器与自动装箱"></a>5.4 对象包装器与自动装箱</h3><h3 id="5-5-参数数量可变的方法"><a href="#5-5-参数数量可变的方法" class="headerlink" title="5.5 参数数量可变的方法"></a>5.5 参数数量可变的方法</h3><h3 id="5-6-枚举类"><a href="#5-6-枚举类" class="headerlink" title="5.6 枚举类"></a>5.6 枚举类</h3><h3 id="5-7-反射"><a href="#5-7-反射" class="headerlink" title="5.7 反射"></a>5.7 反射</h3><h3 id="5-8-继承的设计技巧"><a href="#5-8-继承的设计技巧" class="headerlink" title="5.8 继承的设计技巧"></a>5.8 继承的设计技巧</h3><h2 id="第六章-接口，lambda表达式与内部类"><a href="#第六章-接口，lambda表达式与内部类" class="headerlink" title="第六章 接口，lambda表达式与内部类"></a>第六章 接口，lambda表达式与内部类</h2><blockquote><p>待更……</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;《Java核心技术》是一套全面扎实的Java工具书，适合进阶学习，平时可以搁一本放身边随时查漏补缺，巩固基础。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;第一章-java程序设计概述&quot;&gt;&lt;a href=&quot;#第一章</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Java" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
    <category term="java" scheme="https://www.lzp.zone/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>优雅永不过时</title>
    <link href="https://www.lzp.zone/2021/11/05/%E4%BC%98%E9%9B%85%E6%B0%B8%E4%B8%8D%E8%BF%87%E6%97%B6/"/>
    <id>https://www.lzp.zone/2021/11/05/%E4%BC%98%E9%9B%85%E6%B0%B8%E4%B8%8D%E8%BF%87%E6%97%B6/</id>
    <published>2021-11-05T11:44:13.000Z</published>
    <updated>2022-03-20T12:24:22.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="K3键盘（keychron-amp-少数派联名款）"><a href="#K3键盘（keychron-amp-少数派联名款）" class="headerlink" title="K3键盘（keychron&amp;少数派联名款）"></a>K3键盘（keychron&amp;少数派联名款）</h2><p>keychron家号称Mac最适配的机械键盘，联名款纯白点缀红 ”π“ 的 ”龙睛“，</p><p>实力与颜值并存，实测下：能扛（看）能打！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h088hxs9m1j20xc0p0n14.jpg"                      alt="379907324"                ></p><h2 id="小米台灯"><a href="#小米台灯" class="headerlink" title="小米台灯"></a>小米台灯</h2><p>窈窕可爱的身姿，加上”柔情似水“的”目光“，大爱！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0887a12mzj20qo0k0gn8.jpg"                      alt="image-20220313141246972"                ></p><h2 id="MacBook"><a href="#MacBook" class="headerlink" title="MacBook"></a>MacBook</h2><p>给MacBook扩容换电池，见识到了其优雅紧凑的布局：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4imgdtm1j30qo0k040o.jpg"                      alt="QQ20211105-0"                ></p><p>还有这“性感”的翘臀</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4infnyhyj30qo0k0jsx.jpg"                      alt="image-20211105195050560"                ></p><h2 id="SHP9500"><a href="#SHP9500" class="headerlink" title="SHP9500"></a>SHP9500</h2><p>SHP9500声场开阔，有着硬朗中正的外观个性，不错的卡扣阻尼，质感相当不错！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4itcvt6rj30k00qognz.jpg"                      alt="image-20211105195631518"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4iu5alpzj30qo0k0tb1.jpg"                      alt="image-20211105195718169"                ></p><h2 id="软卡抄"><a href="#软卡抄" class="headerlink" title="软卡抄"></a>软卡抄</h2><p>钟爱的一组软卡抄，素雅的外观配上磨砂质感，抚摸间仿佛沁着花香~</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw4iox4nnoj30k00qo418.jpg"                      alt="image-20211105195216589"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;K3键盘（keychron-amp-少数派联名款）&quot;&gt;&lt;a href=&quot;#K3键盘（keychron-amp-少数派联名款）&quot; class=&quot;headerlink&quot; title=&quot;K3键盘（keychron&amp;amp;少数派联名款）&quot;&gt;&lt;/a&gt;K3键盘（keychr</summary>
      
    
    
    
    <category term="设计美学" scheme="https://www.lzp.zone/categories/%E8%AE%BE%E8%AE%A1%E7%BE%8E%E5%AD%A6/"/>
    
    <category term="工业品" scheme="https://www.lzp.zone/categories/%E8%AE%BE%E8%AE%A1%E7%BE%8E%E5%AD%A6/%E5%B7%A5%E4%B8%9A%E5%93%81/"/>
    
    
    <category term="工业品" scheme="https://www.lzp.zone/tags/%E5%B7%A5%E4%B8%9A%E5%93%81/"/>
    
    <category term="优雅设计" scheme="https://www.lzp.zone/tags/%E4%BC%98%E9%9B%85%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="简而美" scheme="https://www.lzp.zone/tags/%E7%AE%80%E8%80%8C%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>MySQL语法第三弹</title>
    <link href="https://www.lzp.zone/2021/11/05/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%B8%89%E5%BC%B9/"/>
    <id>https://www.lzp.zone/2021/11/05/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%B8%89%E5%BC%B9/</id>
    <published>2021-11-05T08:41:21.000Z</published>
    <updated>2022-03-20T12:28:26.274Z</updated>
    
    <content type="html"><![CDATA[<p>待更…..</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;待更…..&lt;/p&gt;
</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="MySQL" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/MySQL/"/>
    
    
    <category term="数据库" scheme="https://www.lzp.zone/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://www.lzp.zone/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://www.lzp.zone/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL语法第二弹</title>
    <link href="https://www.lzp.zone/2021/11/05/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%BA%8C%E5%BC%B9/"/>
    <id>https://www.lzp.zone/2021/11/05/MySQL%E8%AF%AD%E6%B3%95%E7%AC%AC%E4%BA%8C%E5%BC%B9/</id>
    <published>2021-11-05T08:18:05.000Z</published>
    <updated>2022-03-20T12:28:38.888Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>根据老杜MySQL教学视频整理</p></blockquote><h2 id="1、关于查询结果集的去重"><a href="#1、关于查询结果集的去重" class="headerlink" title="1、关于查询结果集的去重?"></a>1、关于查询结果集的去重?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select distinct job from emp; // distinct关键字去除重复记录。</span><br><span class="line">+-----------+</span><br><span class="line">| job       |</span><br><span class="line">+-----------+</span><br><span class="line">| CLERK     |</span><br><span class="line">| SALESMAN  |</span><br><span class="line">| MANAGER   |</span><br><span class="line">| ANALYST   |</span><br><span class="line">| PRESIDENT |</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure><p><code>mysql&gt; select ename,distinct job from emp; </code></p><p>以上的sql语句是错误的。 记住:</p><p><code>distinct</code>只能出现在所有字段的最前面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select distinct deptno,job from emp;</span><br><span class="line">+--------+-----------+</span><br><span class="line">| deptno | job       |</span><br><span class="line">+--------+-----------+</span><br><span class="line">|     20 | CLERK     |</span><br><span class="line">|     30 | SALESMAN  |</span><br><span class="line">|     20 | MANAGER   |</span><br><span class="line">|     30 | MANAGER   |</span><br><span class="line">|     10 | MANAGER   |</span><br><span class="line">|     20 | ANALYST   |</span><br><span class="line">|     10 | PRESIDENT |</span><br><span class="line">|     30 | CLERK     |</span><br><span class="line">|     10 | CLERK     |</span><br><span class="line">+--------+-----------+</span><br></pre></td></tr></table></figure><p>   案例:统计岗位的数量?</p><p><code>select count(distinct job) from emp;</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+---------------------+</span><br><span class="line">| count(distinct job) |</span><br><span class="line">+---------------------+ </span><br><span class="line">|5                    |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><h2 id="2、连接查询"><a href="#2、连接查询" class="headerlink" title="2、连接查询"></a>2、连接查询</h2><h3 id="2-1、什么是连接查询"><a href="#2-1、什么是连接查询" class="headerlink" title="2.1、什么是连接查询?"></a>2.1、什么是连接查询?</h3><p>在实际开发中，大部分的情况下都不是从单表中查询数据，一般都是多张表联合查询取出最终的结果。在实际开发中，一般一个业务都会对应多张表，比如:学生和班级，起码两张表。学生和班级信息存储到一张表中，结果就像上面一样，数据会存在大量的重复，导致数据的冗余。</p><h3 id="2-2、连接查询的分类"><a href="#2-2、连接查询的分类" class="headerlink" title="2.2、连接查询的分类?"></a>2.2、连接查询的分类?</h3><p>根据语法出现的年代来划分的话，包括:</p><ul><li><p>SQL92(一些老的DBA可能还在使用这种语法。DBA:DataBase Administrator，数据库管理员)</p></li><li><p>SQL99(比较新的语法)</p></li></ul><p> 根据表的连接方式来划分，包括:</p><ol><li><p>内连接:</p><ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li><p>外连接:</p><ul><li><p>左外连接(左连接)</p></li><li><p>右外连接(右连接)</p></li></ul></li></ol><p>3 .全连接(这个不讲，很少用!)</p><h3 id="2-3、笛卡尔积现象-笛卡尔乘积现象"><a href="#2-3、笛卡尔积现象-笛卡尔乘积现象" class="headerlink" title="2.3、笛卡尔积现象(笛卡尔乘积现象)"></a>2.3、笛卡尔积现象(笛卡尔乘积现象)</h3><p>笛卡尔积现象:当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询结果条数<br>是两张表记录条数的乘积。</p><p>关于表的别名:<code>select e.ename,d.dname from emp e,dept d;</code></p><p>表的别名有什么好处?</p><ul><li>第一:执行效率高。</li><li>第二:可读性好。</li></ul><h3 id="2-4、怎么避免笛卡尔积现象"><a href="#2-4、怎么避免笛卡尔积现象" class="headerlink" title="2.4、怎么避免笛卡尔积现象?"></a>2.4、怎么避免笛卡尔积现象?</h3><p>当然是加条件进行过滤。</p><p> 思考:避免了笛卡尔积现象，会减少记录的匹配次数吗?</p><p>不会，次数还是56次。只不过显示的是有效记录。</p><p>案例:找出每一个员工的部⻔名称，要求显示员工名和部⻔名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">                 e.ename,d.dname</span><br><span class="line"></span><br><span class="line">from where</span><br><span class="line"></span><br><span class="line">                  emp e , dept d</span><br></pre></td></tr></table></figure><p><code>e.deptno = d.deptno; //SQL92，以后不用。</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+</span><br><span class="line">| ename  | dname      |</span><br><span class="line">+--------+------------+</span><br><span class="line">| CLARK  | ACCOUNTING |</span><br><span class="line">| KING   | ACCOUNTING |</span><br><span class="line">| MILLER | ACCOUNTING |</span><br><span class="line">| SMITH  | RESEARCH   |</span><br><span class="line">| JONES  | RESEARCH   |</span><br><span class="line">| SCOTT  | RESEARCH   |</span><br><span class="line">| ADAMS  | RESEARCH   |</span><br><span class="line">| FORD   | RESEARCH   |</span><br><span class="line">| ALLEN  | SALES      |</span><br><span class="line">| WARD   | SALES      |</span><br><span class="line">| MARTIN | SALES      |</span><br><span class="line">| BLAKE  | SALES      |</span><br><span class="line">| TURNER | SALES      |</span><br><span class="line">| JAMES  | SALES      |</span><br><span class="line">+--------+------------+</span><br></pre></td></tr></table></figure><h3 id="2-5、内连接之等值连接"><a href="#2-5、内连接之等值连接" class="headerlink" title="2.5、内连接之等值连接"></a>2.5、内连接之等值连接</h3><p>最大特点是:条件是等量关系。</p><p>案例:查询每个员工的部⻔名称，要求显示员工名和部⻔名。</p><p>SQL92:(太老，不用了) </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e, dept d</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure><p>SQL99:(常用的) </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">inner</span>可以省略的，带着<span class="keyword">inner</span>目的是可读性好一些。</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">A</span><br><span class="line">join</span><br><span class="line">B</span><br><span class="line">on</span><br><span class="line">连接条件</span><br><span class="line">where</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>SQL99语法结构更清晰一些:表的连接条件和后来的where条件分离了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+</span><br><span class="line">| ename  | dname      |</span><br><span class="line">+--------+------------+</span><br><span class="line">| CLARK  | ACCOUNTING |</span><br><span class="line">| KING   | ACCOUNTING |</span><br><span class="line">| MILLER | ACCOUNTING |</span><br><span class="line">| SMITH  | RESEARCH   |</span><br><span class="line">| JONES  | RESEARCH   |</span><br><span class="line">| SCOTT  | RESEARCH   |</span><br><span class="line">| ADAMS  | RESEARCH   |</span><br><span class="line">| FORD   | RESEARCH   |</span><br><span class="line">| ALLEN  | SALES      |</span><br><span class="line">| WARD   | SALES      |</span><br><span class="line">| MARTIN | SALES      |</span><br><span class="line">| BLAKE  | SALES      |</span><br><span class="line">| TURNER | SALES      |</span><br><span class="line">| JAMES  | SALES      |</span><br><span class="line">+--------+------------+</span><br></pre></td></tr></table></figure><h3 id="2-6、内连接之非等值连接"><a href="#2-6、内连接之非等值连接" class="headerlink" title="2.6、内连接之非等值连接"></a>2.6、内连接之非等值连接</h3><p>最大的特点是:连接条件中的关系是非等量关系。</p><p>案例:找出每个员工的工资等级，要求显示员工名、工资、工资等级。</p><p><code>mysql&gt; select ename,sal from emp; e</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+---------+</span><br><span class="line">|ename |sal        | </span><br><span class="line">+--------+---------+</span><br><span class="line">| SMITH  |  800.00 |</span><br><span class="line">| ALLEN  | 1600.00 |</span><br><span class="line">| WARD   | 1250.00 |</span><br><span class="line">| JONES  | 2975.00 |</span><br><span class="line">| MARTIN | 1250.00 |</span><br><span class="line">| BLAKE  | 2850.00 |</span><br><span class="line">| CLARK  | 2450.00 |</span><br><span class="line">| SCOTT  | 3000.00 |</span><br><span class="line">| KING   | 5000.00 |</span><br><span class="line">| TURNER | 1500.00 |</span><br><span class="line">| ADAMS  | 1100.00 |</span><br><span class="line">| JAMES  |  950.00 |</span><br><span class="line">| FORD   | 3000.00 |</span><br><span class="line">| MILLER | 1300.00 |</span><br><span class="line">+--------+---------+</span><br></pre></td></tr></table></figure><p><code>mysql&gt; select * from salgrade; s</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------+-------+-------+</span><br><span class="line">| GRADE | LOSAL | HISAL |</span><br><span class="line">+-------+-------+-------+</span><br><span class="line">| 1     |    700|   1200|</span><br><span class="line">| 2     |   1201|   1400|</span><br><span class="line">| 3     |   1401|   2000|</span><br><span class="line">| 4     |   2001|   3000|</span><br><span class="line">| 5     |   3001|   9999|</span><br><span class="line">+-------+-------+-------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,e.sal,s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">inner</span>可以省略</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,e.sal,s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+---------+-------+</span><br><span class="line">| ename  | sal     | grade |</span><br><span class="line">+--------+---------+-------+</span><br><span class="line">| SMITH  |  800.00 |     1 |</span><br><span class="line">| ALLEN  | 1600.00 |     3 |</span><br><span class="line">| WARD   | 1250.00 |     2 |</span><br><span class="line">| JONES  | 2975.00 |     4 |</span><br><span class="line">| MARTIN | 1250.00 |     2 |</span><br><span class="line">| BLAKE  | 2850.00 |     4 |</span><br><span class="line">| CLARK  | 2450.00 |     4 |</span><br><span class="line">| SCOTT  | 3000.00 |     4 |</span><br><span class="line">| KING   | 5000.00 |     5 |</span><br><span class="line">| TURNER | 1500.00 |     3 |</span><br><span class="line">| ADAMS  | 1100.00 |     1 |</span><br><span class="line">| JAMES  |  950.00 |     1 |</span><br><span class="line">| FORD   | 3000.00 |     4 |</span><br><span class="line">| MILLER | 1300.00 |     2 |</span><br><span class="line">+--------+---------+-------+</span><br></pre></td></tr></table></figure><h3 id="2-7、自连接"><a href="#2-7、自连接" class="headerlink" title="2.7、自连接"></a>2.7、自连接</h3><p>最大的特点是:一张表看做两张表。自己连接自己。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">案例:找出每个员工的上级领导，要求显示员工名和对应的领导名。</span><br></pre></td></tr></table></figure><p><code>mysql&gt; select empno,ename,mgr from emp; </code></p><p>emp a 员工表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+-------+--------+------+</span><br><span class="line">| empno | ename  | mgr  |</span><br><span class="line">+-------+--------+------+</span><br><span class="line">|  7369 | SMITH  | 7902 |</span><br><span class="line">|  7499 | ALLEN  | 7698 |</span><br><span class="line">|  7521 | WARD   | 7698 |</span><br><span class="line">|  7566 | JONES  | 7839 |</span><br><span class="line">|  7654 | MARTIN | 7698 |</span><br><span class="line">|  7698 | BLAKE  | 7839 |</span><br><span class="line">|  7782 | CLARK  | 7839 |</span><br><span class="line">|  7788 | SCOTT  | 7566 |</span><br><span class="line">|  7839 | KING   | NULL |</span><br><span class="line">|  7844 | TURNER | 7698 |</span><br><span class="line">|  7876 | ADAMS  | 7788 |</span><br><span class="line">|  7900 | JAMES  | 7698 |</span><br><span class="line">|  7902 | FORD   | 7566 |</span><br><span class="line">|  7934 | MILLER | 7782 |</span><br><span class="line">+-------+--------+------+</span><br></pre></td></tr></table></figure><p>emp b 领导表 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-------+--------+</span><br><span class="line">| empno | ename  |</span><br><span class="line">+-------+--------+</span><br><span class="line">|  7566 | JONES  |</span><br><span class="line">|  7698 | BLAKE  |</span><br><span class="line">|  7782 | CLARK  |</span><br><span class="line">|  7788 | SCOTT  |</span><br><span class="line">|  7839 | KING   |</span><br><span class="line">|  7902 | FORD   |</span><br><span class="line">+-------+--------+</span><br></pre></td></tr></table></figure><p>员工的领导编号 = 领导的员工编号 select</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="keyword">as</span> <span class="string">&#x27;员工名&#x27;</span>,b.ename <span class="keyword">as</span> <span class="string">&#x27;领导名&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+--------+--------+</span><br><span class="line">| 员工名  | 领导名  |</span><br><span class="line">+--------+--------+</span><br><span class="line">| SMITH  | FORD   |</span><br><span class="line">| ALLEN  | BLAKE  |</span><br><span class="line">| WARD   | BLAKE  |</span><br><span class="line">| JONES  | KING   |</span><br><span class="line">| MARTIN | BLAKE  |</span><br><span class="line">| BLAKE  | KING   |</span><br><span class="line">| CLARK  | KING   |</span><br><span class="line">| SCOTT  | JONES  |</span><br><span class="line">| TURNER | BLAKE  |</span><br><span class="line">| ADAMS  | SCOTT  |</span><br><span class="line">| JAMES  | BLAKE  |</span><br><span class="line">| FORD   | JONES  |</span><br><span class="line">| MILLER | CLARK  |</span><br><span class="line">+--------+--------+</span><br></pre></td></tr></table></figure><h3 id="2-8、外连接"><a href="#2-8、外连接" class="headerlink" title="2.8、外连接"></a>2.8、外连接</h3><p>什么是外连接，和内连接有什么区别?</p><ol><li>内连接:</li></ol><p>假设A和B表进行连接，使用内连接的话，凡是A表和B表能够匹配上的 记录查询出来，这就是内连接。</p><p>AB两张表没有主副之分，两张表是平等的。 </p><ol start="2"><li>外连接:</li></ol><p>假设A和B表进行连接，使用外连接的话，AB两张表中有一张表是主 表，一张表是副表，主要查询主表中</p><p>的数据，捎带着查询副表，当副表中的数据没有和主表中的数据匹配 上，副表自动模拟出NULL与之匹配。</p><p>外连接的分类?</p><ul><li>左外连接(左连接):表示左边的这张表是主表。</li><li>(右连接):表示右边的这张表是主表。</li><li>左连接有右连接的写法，右连接也会有对应的左连接的写法。</li></ul><p>案例:找出每个员工的上级领导?(所有员工必须全部查询出来)</p><p>emp a 员工表 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+-------+--------+------+</span><br><span class="line">| empno | ename  | mgr  |</span><br><span class="line">+-------+--------+------+</span><br><span class="line">|  7369 | SMITH  | 7902 |</span><br><span class="line">|  7499 | ALLEN  | 7698 |</span><br><span class="line">|  7521 | WARD   | 7698 |</span><br><span class="line">|  7566 | JONES  | 7839 |</span><br><span class="line">|  7654 | MARTIN | 7698 |</span><br><span class="line">|  7698 | BLAKE  | 7839 |</span><br><span class="line">|  7782 | CLARK  | 7839 |</span><br><span class="line">|  7788 | SCOTT  | 7566 |</span><br><span class="line">|  7839 | KING   | NULL |</span><br><span class="line">|  7844 | TURNER | 7698 |</span><br><span class="line">|  7876 | ADAMS  | 7788 |</span><br><span class="line">|  7900 | JAMES  | 7698 |</span><br><span class="line">|  7902 | FORD   | 7566 |</span><br><span class="line">|  7934 | MILLER | 7782 |</span><br><span class="line">+-------+--------+------+</span><br></pre></td></tr></table></figure><p>emp b 领导表 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-------+--------+</span><br><span class="line">| empno | ename  |</span><br><span class="line">+-------+--------+</span><br><span class="line">|  7566 | JONES  |</span><br><span class="line">|  7698 | BLAKE  |</span><br><span class="line">|  7782 | CLARK  |</span><br><span class="line">|  7788 | SCOTT  |</span><br><span class="line">|  7839 | KING   |</span><br><span class="line">|  7902 | FORD   |</span><br><span class="line">+-------+--------+</span><br></pre></td></tr></table></figure><p>内连接:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure><p>外连接:(左外连接/左连接) </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">outer</span>是可以省略的。</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure><p>外连接:(右外连接/右连接) </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">outer</span>可以省略。</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+-------+</span><br><span class="line">| 员工    | 领导  |</span><br><span class="line">+--------+-------+</span><br><span class="line">| SMITH  | FORD  |</span><br><span class="line">| ALLEN  | BLAKE |</span><br><span class="line">| WARD   | BLAKE |</span><br><span class="line">| JONES  | KING  |</span><br><span class="line">| MARTIN | BLAKE |</span><br><span class="line">| BLAKE  | KING  |</span><br><span class="line">| CLARK  | KING  |</span><br><span class="line">| SCOTT  | JONES |</span><br><span class="line">| KING   | NULL  |</span><br><span class="line">| TURNER | BLAKE |</span><br><span class="line">| ADAMS  | SCOTT |</span><br><span class="line">| JAMES  | BLAKE |</span><br><span class="line">| FORD   | JONES |</span><br><span class="line">| MILLER | CLARK |</span><br><span class="line">+--------+-------+</span><br></pre></td></tr></table></figure><p><strong>外连接最重要的特点是：主表的数据无条件的全部查询出来。</strong></p><p>案例:找出哪个部⻔没有员工? </p><p>EMP表:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |</span><br><span class="line">|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |</span><br><span class="line">|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |</span><br><span class="line">|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |</span><br><span class="line">|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |</span><br><span class="line">|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |</span><br><span class="line">|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |</span><br><span class="line">|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |</span><br><span class="line">|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |</span><br><span class="line">|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |</span><br><span class="line">|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |</span><br><span class="line">|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |</span><br><span class="line">|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |</span><br><span class="line">|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br></pre></td></tr></table></figure><p>DEPT表:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+----------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">d.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">e.empno <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+--------+</span><br><span class="line">| DEPTNO | DNAME      | LOC    |</span><br><span class="line">+--------+------------+--------+</span><br><span class="line">|     40 | OPERATIONS | BOSTON |</span><br><span class="line">+--------+------------+--------+</span><br></pre></td></tr></table></figure><h3 id="2-9、三张表怎么连接查询"><a href="#2-9、三张表怎么连接查询" class="headerlink" title="2.9、三张表怎么连接查询?"></a>2.9、三张表怎么连接查询?</h3><p>案例:找出每一个员工的部⻔名称以及工资等级。</p><p>EMP e:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+-------+--------+---------+--------+</span><br><span class="line">| empno | ename  | sal     | deptno |</span><br><span class="line">+-------+--------+---------+--------+</span><br><span class="line">|  7369 | SMITH  |  800.00 |     20 |</span><br><span class="line">|  7499 | ALLEN  | 1600.00 |     30 |</span><br><span class="line">|  7521 | WARD   | 1250.00 |     30 |</span><br><span class="line">|  7566 | JONES  | 2975.00 |     20 |</span><br><span class="line">|  7654 | MARTIN | 1250.00 |     30 |</span><br><span class="line">|  7698 | BLAKE  | 2850.00 |     30 |</span><br><span class="line">|  7782 | CLARK  | 2450.00 |     10 |</span><br><span class="line">|  7788 | SCOTT  | 3000.00 |     20 |</span><br><span class="line">|  7839 | KING   | 5000.00 |     10 |</span><br><span class="line">|  7844 | TURNER | 1500.00 |     30 |</span><br><span class="line">|  7876 | ADAMS  | 1100.00 |     20 |</span><br><span class="line">|  7900 | JAMES  |  950.00 |     30 |</span><br><span class="line">|  7902 | FORD   | 3000.00 |     20 |</span><br><span class="line">|  7934 | MILLER | 1300.00 |     10 |</span><br><span class="line">+-------+--------+---------+--------+</span><br></pre></td></tr></table></figure><p>DEPT d:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+----------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br></pre></td></tr></table></figure><p>SALGRADE s:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------+-------+-------+</span><br><span class="line">| GRADE | LOSAL | HISAL |</span><br><span class="line">+-------+-------+-------+</span><br><span class="line">|     1 |   700 |  1200 |</span><br><span class="line">|     2 |  1201 |  1400 |</span><br><span class="line">|     3 |  1401 |  2000 |</span><br><span class="line">|     4 |  2001 |  3000 |</span><br><span class="line">|     5 |  3001 |  9999 |</span><br><span class="line">+-------+-------+-------+</span><br></pre></td></tr></table></figure><blockquote><p>注意，解释一下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">A</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">B</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">C</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>表示：A表和B表先进行表连接，连接之后A表继续和C表进行连接。</p></blockquote><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,d.dname,s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+-------+</span><br><span class="line">| ename  | dname      | grade |</span><br><span class="line">+--------+------------+-------+</span><br><span class="line">| SMITH  | RESEARCH   |     1 |</span><br><span class="line">| ALLEN  | SALES      |     3 |</span><br><span class="line">| WARD   | SALES      |     2 |</span><br><span class="line">| JONES  | RESEARCH   |     4 |</span><br><span class="line">| MARTIN | SALES      |     2 |</span><br><span class="line">| BLAKE  | SALES      |     4 |</span><br><span class="line">| CLARK  | ACCOUNTING |     4 |</span><br><span class="line">| SCOTT  | RESEARCH   |     4 |</span><br><span class="line">| KING   | ACCOUNTING |     5 |</span><br><span class="line">| TURNER | SALES      |     3 |</span><br><span class="line">| ADAMS  | RESEARCH   |     1 |</span><br><span class="line">| JAMES  | SALES      |     1 |</span><br><span class="line">| FORD   | RESEARCH   |     4 |</span><br><span class="line">| MILLER | ACCOUNTING |     2 |</span><br><span class="line">+--------+------------+-------+</span><br></pre></td></tr></table></figure><p>案例：找出每一个员工的部门名称、工资等级、以及上级领导。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename <span class="string">&#x27;员工&#x27;</span>,d.dname,s.grade,e1.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">emp e1</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.mgr <span class="operator">=</span> e1.empno;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+-------+-------+</span><br><span class="line">| 员工    | dname      | grade | 领导  |</span><br><span class="line">+--------+------------+-------+-------+</span><br><span class="line">| SMITH  | RESEARCH   |     1 | FORD  |</span><br><span class="line">| ALLEN  | SALES      |     3 | BLAKE |</span><br><span class="line">| WARD   | SALES      |     2 | BLAKE |</span><br><span class="line">| JONES  | RESEARCH   |     4 | KING  |</span><br><span class="line">| MARTIN | SALES      |     2 | BLAKE |</span><br><span class="line">| BLAKE  | SALES      |     4 | KING  |</span><br><span class="line">| CLARK  | ACCOUNTING |     4 | KING  |</span><br><span class="line">| SCOTT  | RESEARCH   |     4 | JONES |</span><br><span class="line">| KING   | ACCOUNTING |     5 | NULL  |</span><br><span class="line">| TURNER | SALES      |     3 | BLAKE |</span><br><span class="line">| ADAMS  | RESEARCH   |     1 | SCOTT |</span><br><span class="line">| JAMES  | SALES      |     1 | BLAKE |</span><br><span class="line">| FORD   | RESEARCH   |     4 | JONES |</span><br><span class="line">| MILLER | ACCOUNTING |     2 | CLARK |</span><br><span class="line">+--------+------------+-------+-------+</span><br></pre></td></tr></table></figure><h2 id="3、子查询"><a href="#3、子查询" class="headerlink" title="3、子查询"></a>3、子查询</h2><h3 id="3-1、什么是子查询"><a href="#3-1、什么是子查询" class="headerlink" title="3.1、什么是子查询?"></a>3.1、什么是子查询?</h3><p> select语句当中嵌套select语句，被嵌套的select语句是子查询。 </p><p>子查询都可以出现在哪里?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">..(<span class="keyword">select</span>).</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">..(<span class="keyword">select</span>).</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">..(<span class="keyword">select</span>).</span><br></pre></td></tr></table></figure><h3 id="3-2、where子句中使用子查询"><a href="#3-2、where子句中使用子查询" class="headerlink" title="3.2、where子句中使用子查询"></a>3.2、where子句中使用子查询</h3><p>案例:找出高于平均薪资的员工信息。<br><code>select * from emp where sal &gt; avg(sal); //错误的写法，where后面不能直接使用分组函数。</code></p><p>第一步:找出平均薪资  <code>select avg(sal) from emp;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-------------+</span><br><span class="line">| avg(sal)    |</span><br><span class="line">+-------------+</span><br><span class="line">| 2073.214286 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><p> 第二步:where过滤  <code>select * from emp where sal &gt; 2073.214286;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-------+-------+-----------+------+------------+---------+------+--------+</span><br><span class="line">| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |</span><br><span class="line">+-------+-------+-----------+------+------------+---------+------+--------+</span><br><span class="line">|  7566 | JONES | MANAGER   | 7839 | 1981-04-02 | 2975.00 | NULL |     20 |</span><br><span class="line">|  7698 | BLAKE | MANAGER   | 7839 | 1981-05-01 | 2850.00 | NULL |     30 |</span><br><span class="line">|  7782 | CLARK | MANAGER   | 7839 | 1981-06-09 | 2450.00 | NULL |     10 |</span><br><span class="line">|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 | NULL |     20 |</span><br><span class="line">|  7839 | KING  | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL |     10 |</span><br><span class="line">|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 | NULL |     20 |</span><br><span class="line">+-------+-------+-----------+------+------------+---------+------+--------+</span><br></pre></td></tr></table></figure><p>第一步和第二步合并  <code>select * from emp where sal &gt; (select avg(sal) from emp);</code></p><h3 id="3-3、from后面嵌套子查询"><a href="#3-3、from后面嵌套子查询" class="headerlink" title="3.3、from后面嵌套子查询"></a>3.3、from后面嵌套子查询</h3><p>案例:找出每个部⻔平均薪水的等级。 </p><p>第一步:找出每个部⻔平均薪水(按照部⻔编号分组，求sal的平均值)</p><p><code>select deptno,avg(sal) as avgsal from emp group by deptno;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+--------+-------------+</span><br><span class="line">| deptno | avgsal      |</span><br><span class="line">+--------+-------------+</span><br><span class="line">|     10 | 2916.666667 |</span><br><span class="line">|     20 | 2175.000000 |</span><br><span class="line">|     30 | 1566.666667 |</span><br><span class="line">+--------+-------------+</span><br></pre></td></tr></table></figure><p>第二步：将以上的查询结果当做临时表t，让t表和salgrade s表连接，条件是：</p><p><code>t.avgsal between s.losal and s.hisal</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">t.<span class="operator">*</span>,s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avgsal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">t.avgsal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+--------+-------------+-------+</span><br><span class="line">| deptno | avgsal      | grade |</span><br><span class="line">+--------+-------------+-------+</span><br><span class="line">|     30 | 1566.666667 |     3 |</span><br><span class="line">|     10 | 2916.666667 |     4 |</span><br><span class="line">|     20 | 2175.000000 |     4 |</span><br><span class="line">+--------+-------------+-------+</span><br></pre></td></tr></table></figure><p>案例：找出每个部门平均的薪水等级。<br>第一步：找出每个员工的薪水等级。</p><p><code>select e.ename,e.sal,e.deptno,s.grade from emp e join salgrade s on e.sal between s.losal and s.hisal;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+---------+--------+-------+</span><br><span class="line">| ename  | sal     | deptno | grade |</span><br><span class="line">+--------+---------+--------+-------+</span><br><span class="line">| SMITH  |  800.00 |     20 |     1 |</span><br><span class="line">| ALLEN  | 1600.00 |     30 |     3 |</span><br><span class="line">| WARD   | 1250.00 |     30 |     2 |</span><br><span class="line">| JONES  | 2975.00 |     20 |     4 |</span><br><span class="line">| MARTIN | 1250.00 |     30 |     2 |</span><br><span class="line">| BLAKE  | 2850.00 |     30 |     4 |</span><br><span class="line">| CLARK  | 2450.00 |     10 |     4 |</span><br><span class="line">| SCOTT  | 3000.00 |     20 |     4 |</span><br><span class="line">| KING   | 5000.00 |     10 |     5 |</span><br><span class="line">| TURNER | 1500.00 |     30 |     3 |</span><br><span class="line">| ADAMS  | 1100.00 |     20 |     1 |</span><br><span class="line">| JAMES  |  950.00 |     30 |     1 |</span><br><span class="line">| FORD   | 3000.00 |     20 |     4 |</span><br><span class="line">| MILLER | 1300.00 |     10 |     2 |</span><br><span class="line">+--------+---------+--------+-------+</span><br></pre></td></tr></table></figure><p>第二步：基于以上结果，继续按照deptno分组，求grade平均值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.deptno,<span class="built_in">avg</span>(s.grade)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e </span><br><span class="line"><span class="keyword">join</span> </span><br><span class="line">salgrade s </span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">e.deptno;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+--------+--------------+</span><br><span class="line">| deptno | avg(s.grade) |</span><br><span class="line">+--------+--------------+</span><br><span class="line">|     10 |       3.6667 |</span><br><span class="line">|     20 |       2.8000 |</span><br><span class="line">|     30 |       2.5000 |</span><br><span class="line">+--------+--------------+</span><br></pre></td></tr></table></figure><h3 id="3-4、在select后面嵌套子查询。"><a href="#3-4、在select后面嵌套子查询。" class="headerlink" title="3.4、在select后面嵌套子查询。"></a>3.4、在select后面嵌套子查询。</h3><p> 案例:找出每个员工所在的部⻔名称，要求显示员工名和部⻔名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,(<span class="keyword">select</span> d.dname <span class="keyword">from</span> dept d <span class="keyword">where</span> e.deptno <span class="operator">=</span> d.deptno) <span class="keyword">as</span> dname </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+</span><br><span class="line">| ename  | dname      |</span><br><span class="line">+--------+------------+</span><br><span class="line">| SMITH  | RESEARCH   |</span><br><span class="line">| ALLEN  | SALES      |</span><br><span class="line">| WARD   | SALES      |</span><br><span class="line">| JONES  | RESEARCH   |</span><br><span class="line">| MARTIN | SALES      |</span><br><span class="line">| BLAKE  | SALES      |</span><br><span class="line">| CLARK  | ACCOUNTING |</span><br><span class="line">| SCOTT  | RESEARCH   |</span><br><span class="line">| KING   | ACCOUNTING |</span><br><span class="line">| TURNER | SALES      |</span><br><span class="line">| ADAMS  | RESEARCH   |</span><br><span class="line">| JAMES  | SALES      |</span><br><span class="line">| FORD   | RESEARCH   |</span><br><span class="line">| MILLER | ACCOUNTING |</span><br><span class="line">+--------+------------+</span><br></pre></td></tr></table></figure><h2 id="4、union-可以将查询结果集相加"><a href="#4、union-可以将查询结果集相加" class="headerlink" title="4、union (可以将查询结果集相加)"></a>4、union (可以将查询结果集相加)</h2><p>案例:找出工作岗位是SALESMAN和MANAGER的员工?<br> 第一种:<code>select ename,job from emp where job = &#39;MANAGER&#39; or job = &#39;SALESMAN&#39;;</code><br> 第二种:<code>select ename,job from emp where job in(&#39;MANAGER&#39;,&#39;SALESMAN&#39;); </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+--------+----------+</span><br><span class="line">| ename  | job      |</span><br><span class="line">+--------+----------+</span><br><span class="line">| ALLEN  | SALESMAN |</span><br><span class="line">| WARD   | SALESMAN |</span><br><span class="line">| JONES  | MANAGER  |</span><br><span class="line">| MARTIN | SALESMAN |</span><br><span class="line">| BLAKE  | MANAGER  |</span><br><span class="line">| CLARK  | MANAGER  |</span><br><span class="line">| TURNER | SALESMAN |</span><br><span class="line">+--------+----------+</span><br></pre></td></tr></table></figure><p> 第三种:union</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+--------+----------+</span><br><span class="line">| ename  | job      |</span><br><span class="line">+--------+----------+</span><br><span class="line">| JONES  | MANAGER  |</span><br><span class="line">| BLAKE  | MANAGER  |</span><br><span class="line">| CLARK  | MANAGER  |</span><br><span class="line">| ALLEN  | SALESMAN |</span><br><span class="line">| WARD   | SALESMAN |</span><br><span class="line">| MARTIN | SALESMAN |</span><br><span class="line">| TURNER | SALESMAN |</span><br><span class="line">+--------+----------+</span><br></pre></td></tr></table></figure><p>两张不相干的表中的数据拼接在一起显示?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> dname <span class="keyword">from</span> dept;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+------------+</span><br><span class="line">| ename      |</span><br><span class="line">+------------+</span><br><span class="line">| SMITH      |</span><br><span class="line">| ALLEN      |</span><br><span class="line">| WARD       |</span><br><span class="line">| JONES      |</span><br><span class="line">| MARTIN     |</span><br><span class="line">| BLAKE      |</span><br><span class="line">| CLARK      |</span><br><span class="line">| SCOTT      |</span><br><span class="line">| KING       |</span><br><span class="line">| TURNER     |</span><br><span class="line">| ADAMS      |</span><br><span class="line">| JAMES      |</span><br><span class="line">| FORD       |</span><br><span class="line">| MILLER     |</span><br><span class="line">| ACCOUNTING |</span><br><span class="line">| RESEARCH   |</span><br><span class="line">| SALES      |</span><br><span class="line">| OPERATIONS |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">union</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">select</span> dname <span class="keyword">from</span> dept;</span><br><span class="line">ERROR <span class="number">1222</span> (<span class="number">21000</span>): The used <span class="keyword">SELECT</span> statements have a different</span><br><span class="line">number <span class="keyword">of</span> columns</span><br></pre></td></tr></table></figure><h2 id="5、limit"><a href="#5、limit" class="headerlink" title="5、limit"></a>5、limit</h2><blockquote><p>(重点中的重点，以后分⻚查询全靠它了)</p></blockquote><ul><li>limit是mysql特有的，其他数据库中没有，不通用。(Oracle中有一个相同的机制，叫做rownum)</li><li>limit取结果集中的部分数据，这是它的作用。</li></ul><p>语法机制:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">limit startIndex, length</span><br><span class="line">//startIndex表示起始位置，从0开始，0表示第一条数据。 length表示取几个</span><br></pre></td></tr></table></figure><p>案例:取出工资前5名的员工(思路:降序取前5个)<br> <code>select ename,sal from emp order by sal desc;</code> </p><p>取前5个:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span> limit <span class="number">0</span>, <span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span> limit <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>limit是sql语句最后执行的一个环节:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span><span class="number">5</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">from</span><span class="number">1</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">where</span><span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span><span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">having</span><span class="number">4</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span><span class="number">6</span></span><br><span class="line">...</span><br><span class="line">limit<span class="number">7</span></span><br><span class="line">...;</span><br></pre></td></tr></table></figure><p>案例:找出工资排名在第4到第9名的员工?<br><code>select ename,sal from emp order by sal desc limit 3,6;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+--------+---------+</span><br><span class="line">| ename  | sal     |</span><br><span class="line">+--------+---------+</span><br><span class="line">| JONES  | 2975.00 |</span><br><span class="line">| BLAKE  | 2850.00 |</span><br><span class="line">| CLARK  | 2450.00 |</span><br><span class="line">| ALLEN  | 1600.00 |</span><br><span class="line">| TURNER | 1500.00 |</span><br><span class="line">| MILLER | 1300.00 |</span><br><span class="line">+--------+---------+</span><br></pre></td></tr></table></figure><p>通用的标准分⻚sql?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">每页显示3条记录：</span><br><span class="line">第1页：0, 3</span><br><span class="line">第2页：3, 3</span><br><span class="line">第3页：6, 3</span><br><span class="line">第4页：9, 3</span><br><span class="line">第5页：12, 3</span><br><span class="line"></span><br><span class="line">每页显示pageSize条记录：</span><br><span class="line">第pageNo页：(pageNo - 1) * pageSize, pageSize</span><br></pre></td></tr></table></figure><p>pageSize是什么？是每页显示多少条记录<br>pageNo是什么？显示第几页</p><p>java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> pageNo = <span class="number">2</span>; <span class="comment">// 页码是2</span></span><br><span class="line"><span class="keyword">int</span> pageSize = <span class="number">10</span>; <span class="comment">// 每页显示10条</span></span><br><span class="line"></span><br><span class="line">limit (pageNo - <span class="number">1</span>) * pageSize, pageSize</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、创建表"><a href="#6、创建表" class="headerlink" title="6、创建表:"></a>6、创建表:</h2><h3 id="建表语句的语法格式"><a href="#建表语句的语法格式" class="headerlink" title="建表语句的语法格式:"></a>建表语句的语法格式:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段名<span class="number">1</span> 数据类型,</span><br><span class="line">字段名<span class="number">2</span> 数据类型,</span><br><span class="line">字段名<span class="number">3</span> 数据类型,</span><br><span class="line">....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="关于MySQL当中字段的数据类型？-常见的"><a href="#关于MySQL当中字段的数据类型？-常见的" class="headerlink" title="关于MySQL当中字段的数据类型？(常见的)"></a>关于MySQL当中字段的数据类型？(常见的)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int整数型(java中的int)</span><br><span class="line">bigint长整型(java中的long)</span><br><span class="line">float浮点型(java中的float double)</span><br><span class="line">char定长字符串(String)</span><br><span class="line">varchar可变长字符串(StringBuffer/StringBuilder)</span><br><span class="line">date日期类型 （对应Java中的java.sql.Date类型）</span><br><span class="line">BLOB二进制大对象（存储图片、视频等流媒体信息） Binary Large OBject （对应java中的Object）</span><br><span class="line">CLOB字符大对象（存储较大文本，比如，可以存储4G的字符串。） Character Large OBject（对应java中的Object）</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="char和varchar怎么选择？"><a href="#char和varchar怎么选择？" class="headerlink" title="char和varchar怎么选择？"></a>char和varchar怎么选择？</h3><p>​        在实际的开发中，当某个字段中的数据长度不发生改变的时候，是定长的，例如：性别、生日等都是采用char。<br>​        当一个字段的数据长度不确定，例如：简介、姓名等都是采用varchar。</p><p>BLOB和CLOB类型的使用？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">电影表: t_movie</span><br><span class="line">id(int)name(varchar)playtime(date/char)haibao(BLOB)history(CLOB)</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">1蜘蛛侠</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>表名在数据库当中一般建议以：<code>t_</code>或者<code>tbl_</code>开始。</p><p>创建学生表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">学生信息包括：</span><br><span class="line">学号、姓名、性别、班级编号、生日</span><br><span class="line">学号：bigint</span><br><span class="line">姓名：varchar</span><br><span class="line">性别：char</span><br><span class="line">班级编号：int</span><br><span class="line">生日：char</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line"><span class="keyword">no</span> <span class="type">bigint</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">sex <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">classno <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">birth <span class="type">char</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="7、insert语句插入数据"><a href="#7、insert语句插入数据" class="headerlink" title="7、insert语句插入数据"></a>7、insert语句插入数据</h2><p>语法格式:</p><p><code>insert into 表名(字段名1,字段名2,字段名3,....) values(值1,值2,值3,....)</code></p><p><code>要求:字段的数量和值的数量相同，并且数据类型要对应相同。</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(<span class="keyword">no</span>,name,sex,classno,birth) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;gaosan1ban&#x27;</span>);</span><br><span class="line">ERROR <span class="number">1136</span> (<span class="number">21</span>S01): <span class="keyword">Column</span> count doesn<span class="string">&#x27;t match value count at row 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">insert into t_student(no,name,sex,classno,birth) values(1,&#x27;</span>zhangsan<span class="string">&#x27;,&#x27;</span><span class="number">1</span><span class="string">&#x27;,&#x27;</span>gaosan1ban<span class="string">&#x27;, &#x27;</span><span class="number">1950</span><span class="number">-10</span><span class="number">-12</span><span class="string">&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; select * from t_student;</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| no   | name     | sex  | classno    | birth      |</span><br><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |</span><br><span class="line">+------+----------+------+------------+------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name,sex,classno,birth,<span class="keyword">no</span>) <span class="keyword">values</span>(<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;gaosan1ban&#x27;</span>, <span class="string">&#x27;1950-10-12&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_student;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| no   | name     | sex  | classno    | birth      |</span><br><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |</span><br><span class="line">|    2 | lisi     | 1    | gaosan1ban | 1950-10-12 |</span><br><span class="line">+------+----------+------+------------+------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name) <span class="keyword">values</span>(<span class="string">&#x27;wangwu&#x27;</span>); <span class="operator">/</span><span class="operator">/</span> 除name字段之外，剩下的所有字段自动插入<span class="keyword">NULL</span>。</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_student;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| no   | name     | sex  | classno    | birth      |</span><br><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |</span><br><span class="line">|    2 | lisi     | 1    | gaosan1ban | 1950-10-12 |</span><br><span class="line">| NULL | wangwu   | NULL | NULL       | NULL       |</span><br><span class="line">+------+----------+------+------------+------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(<span class="keyword">no</span>) <span class="keyword">values</span>(<span class="number">3</span>); </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_student;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| no   | name     | sex  | classno    | birth      |</span><br><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |</span><br><span class="line">|    2 | lisi     | 1    | gaosan1ban | 1950-10-12 |</span><br><span class="line">| NULL | wangwu   | NULL | NULL       | NULL       |</span><br><span class="line">|    3 | NULL     | NULL | NULL       | NULL       |</span><br><span class="line">+------+----------+------+------------+------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_student; <span class="operator">/</span><span class="operator">/</span> 当这个表存在的话删除。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line"><span class="keyword">no</span> <span class="type">bigint</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">sex <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="number">1</span>,</span><br><span class="line">classno <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">birth <span class="type">char</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_student;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+------+---------+-------+</span><br><span class="line">| no   | name     | sex  | classno | birth |</span><br><span class="line">+------+----------+------+---------+-------+</span><br><span class="line">| NULL | zhangsan | 1    | NULL    | NULL  |</span><br><span class="line">+------+----------+------+---------+-------+</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的地方：<br>        当一条insert语句执行成功之后，表格当中必然会多一行记录。<br>        即使多的这一行记录当中某些字段是NULL，后期也没有办法在执行<br>        insert语句插入数据了，只能使用update进行更新。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 字段可以省略不写，但是后面的<span class="keyword">value</span>对数量和顺序都有要求。</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;gaosan2ban&#x27;</span>,<span class="string">&#x27;1986-10-23&#x27;</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_student;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| no   | name     | sex  | classno    | birth      |</span><br><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| NULL | zhangsan | 1    | NULL       | NULL       |</span><br><span class="line">|    1 | jack     | 0    | gaosan2ban | 1986-10-23 |</span><br><span class="line">+------+----------+------+------------+------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;gaosan2ban&#x27;</span>);</span><br><span class="line">ERROR <span class="number">1136</span> (<span class="number">21</span>S01): <span class="keyword">Column</span> count doesn<span class="string">&#x27;t match value count at row 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 一次插入多行数据</span></span><br><span class="line"><span class="string">insert into t_student</span></span><br><span class="line"><span class="string">(no,name,sex,classno,birth) </span></span><br><span class="line"><span class="string">values</span></span><br><span class="line"><span class="string">(3,&#x27;</span>rose<span class="string">&#x27;,&#x27;</span><span class="number">1</span><span class="string">&#x27;,&#x27;</span>gaosi2ban<span class="string">&#x27;,&#x27;</span><span class="number">1952</span><span class="number">-12</span><span class="number">-14</span><span class="string">&#x27;),(4,&#x27;</span>laotie<span class="string">&#x27;,&#x27;</span><span class="number">1</span><span class="string">&#x27;,&#x27;</span>gaosi2ban<span class="string">&#x27;,&#x27;</span><span class="number">1955</span><span class="number">-12</span><span class="number">-14</span><span class="string">&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; select * from t_student;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| no   | name     | sex  | classno    | birth      |</span><br><span class="line">+------+----------+------+------------+------------+</span><br><span class="line">| NULL | zhangsan | 1    | NULL       | NULL       |</span><br><span class="line">|    1 | jack     | 0    | gaosan2ban | 1986-10-23 |</span><br><span class="line">|    3 | rose     | 1    | gaosi2ban  | 1952-12-14 |</span><br><span class="line">|    4 | laotie   | 1    | gaosi2ban  | 1955-12-14 |</span><br><span class="line">+------+----------+------+------------+------------+</span><br></pre></td></tr></table></figure><h2 id="8、表的复制"><a href="#8、表的复制" class="headerlink" title="8、表的复制"></a>8、表的复制</h2><p>语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 <span class="keyword">as</span> <span class="keyword">select</span>语句;</span><br><span class="line">将查询结果当做表创建出来。</span><br></pre></td></tr></table></figure><h2 id="9、将查询结果插入到一张表中"><a href="#9、将查询结果插入到一张表中" class="headerlink" title="9、将查询结果插入到一张表中?"></a>9、将查询结果插入到一张表中?</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> dept1 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept1;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+----------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br></pre></td></tr></table></figure><h2 id="10、修改数据-update"><a href="#10、修改数据-update" class="headerlink" title="10、修改数据:update"></a>10、修改数据:update</h2><p>语法格式:</p><p><code>update 表名 set 字段名1=值1,字段名2=值2... where 条件;</code></p><blockquote><p>注意：没有条件整张表数据全部更新。</p></blockquote><p>案例：将部门10的LOC修改为SHANGHAI，将部门名称修改为RENSHIBU</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update dept1 <span class="keyword">set</span> loc <span class="operator">=</span> <span class="string">&#x27;SHANGHAI&#x27;</span>, dname <span class="operator">=</span> <span class="string">&#x27;RENSHIBU&#x27;</span> <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept1;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------+----------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | RENSHIBU   | SHANGHAI |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">|     10 | RENSHIBU   | SHANGHAI |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br></pre></td></tr></table></figure><p>更新所有记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update dept1 <span class="keyword">set</span> loc <span class="operator">=</span> <span class="string">&#x27;x&#x27;</span>, dname <span class="operator">=</span> <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept1;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+--------+-------+------+</span><br><span class="line">| DEPTNO | DNAME | LOC  |</span><br><span class="line">+--------+-------+------+</span><br><span class="line">|     10 | y     | x    |</span><br><span class="line">|     20 | y     | x    |</span><br><span class="line">|     30 | y     | x    |</span><br><span class="line">|     40 | y     | x    |</span><br><span class="line">|     10 | y     | x    |</span><br><span class="line">|     20 | y     | x    |</span><br><span class="line">|     30 | y     | x    |</span><br><span class="line">|     40 | y     | x    |</span><br><span class="line">+--------+-------+------+</span><br></pre></td></tr></table></figure><h2 id="11、删除数据"><a href="#11、删除数据" class="headerlink" title="11、删除数据?"></a>11、删除数据?</h2><p> 语法格式:</p><p><code>delete from 表名 where 条件;</code></p><blockquote><p>注意：没有条件全部删除。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>删除<span class="number">10</span>部门数据？</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept1 <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除所有记录？</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept1;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>怎么删除大表中的数据？（重点）</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名; <span class="operator">/</span><span class="operator">/</span> 表被截断，不可回滚。永久丢失。</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除表？</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名; <span class="operator">/</span><span class="operator">/</span> 这个通用。</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> 表名; <span class="operator">/</span><span class="operator">/</span> oracle不支持这种写法。</span><br></pre></td></tr></table></figure><h2 id="12、表结构的修改"><a href="#12、表结构的修改" class="headerlink" title="12、表结构的修改"></a>12、表结构的修改</h2><p>关于表的修改，大家使用工具完成即可，因为在实际开发中表一旦 设计好之后，对表结构的修改是很少的，修改表结构就是对之前的设计进行了否定，即使 需要修改表结构，我们也可以直接使用工具操作。修改表结构的语句不会出现在Java代码当 中。出现在java代码当中的sql包括:insert delete update select(这些都是表中的数据操作)。</p><p>增删改查有一个术语:<code>CRUD</code>操作<br><code> Create(增) Retrieve(检索) Update(修改) Delete(删除)</code></p><h2 id="13、约束-Constraint"><a href="#13、约束-Constraint" class="headerlink" title="13、约束(Constraint)"></a>13、约束(Constraint)</h2><h3 id="13-1、什么是约束-常⻅的约束有哪些呢"><a href="#13-1、什么是约束-常⻅的约束有哪些呢" class="headerlink" title="13.1、什么是约束?常⻅的约束有哪些呢?"></a>13.1、什么是约束?常⻅的约束有哪些呢?</h3><p>在创建表的时候，可以给表的字段添加相应的约束，添加约束的目的是为了保证表中数据的合法性、有效性、完整性。</p><p>常⻅的约束有哪些呢?</p><ul><li>非空约束(not null):约束的字段不能为NULL</li><li>唯一约束(unique):约束的字段不能重复</li><li>主键约束(primary key):约束的字段既不能为NULL，也不能重复(简称PK) </li><li>外键约束(foreign key):…(简称FK)</li><li>检查约束(check):注意Oracle数据库有check约束，但是mysql没有，目前mysql不支持该约束。</li></ul><h3 id="13-2、非空约束-not-null"><a href="#13-2、非空约束-not-null" class="headerlink" title="13.2、非空约束 not null"></a>13.2、非空约束 not null</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_user;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id,password) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">ERROR <span class="number">1364</span> (HY000): Field <span class="string">&#x27;username&#x27;</span> doesn<span class="string">&#x27;t have a default value</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">insert into t_user(id,username,password) values(1,&#x27;</span>lisi<span class="string">&#x27;,&#x27;</span><span class="number">123</span><span class="string">&#x27;);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;根据老杜MySQL教学视频整理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、关于查询结果集的去重&quot;&gt;&lt;a href=&quot;#1、关于查询结果集的去重&quot; class=&quot;headerlink&quot; title=&quot;1、关于查询结果集的去重?&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="MySQL" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/MySQL/"/>
    
    
    <category term="数据库" scheme="https://www.lzp.zone/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://www.lzp.zone/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://www.lzp.zone/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Win-Mac快捷键对照表</title>
    <link href="https://www.lzp.zone/2021/11/03/Win-Mac%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
    <id>https://www.lzp.zone/2021/11/03/Win-Mac%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%AF%B9%E7%85%A7%E8%A1%A8/</id>
    <published>2021-11-03T04:21:34.000Z</published>
    <updated>2022-03-20T12:25:33.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac-键盘符号说明"><a href="#Mac-键盘符号说明" class="headerlink" title="Mac 键盘符号说明"></a>Mac 键盘符号说明</h2><ul><li><code>⌘</code> == <code>Command</code></li><li><code>⇧</code> == <code>Shift</code></li><li><code>⇪</code> == <code>Caps Lock</code></li><li><code>⌥</code> == <code>Option</code></li><li><code>⌃</code> == <code>Control</code></li><li><code>↩</code> == <code>Return/Enter</code></li><li><code>⌫</code> == <code>Delete</code></li><li><code>⌦</code> == <code>向前删除键（Fn+Delete）</code></li><li><code>↑</code> == <code>上箭头</code></li><li><code>↓</code> == <code>下箭头</code></li><li><code>←</code> == <code>左箭头</code></li><li><code>→</code> == <code>右箭头</code></li><li><code>⇞</code> == <code>Page Up（Fn+↑）</code></li><li><code>⇟</code> == <code>Page Down（Fn+↓）</code></li><li><code>Home</code> == <code>Fn + ←</code></li><li><code>End</code> == <code>Fn + →</code></li><li><code>⇥</code> == <code>右制表符（Tab键）</code></li><li><code>⇤</code> == <code>左制表符（Shift+Tab）</code></li><li><code>⎋</code> == <code>Escape (Esc)</code></li><li><code>⏏</code> == <code>电源开关键</code></li></ul><h2 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>F</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>F</kbd></td><td align="left">在当前文件进行文本查找</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>R</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>R</kbd></td><td align="left">在当前文件进行文本替换</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Z</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Z</kbd></td><td align="left">撤销</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Y</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Delete</kbd></td><td align="left">删除光标所在行 或 删除选中的行</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>D</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>D</kbd></td><td align="left">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>W</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>方向键上</kbd></td><td align="left">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>E</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>E</kbd></td><td align="left">显示最近打开的文件记录列表</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>N</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>O</kbd></td><td align="left">根据输入的 <strong>类名</strong> 查找类文件</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>J</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>J</kbd></td><td align="left">插入自定义动态代码模板</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>P</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>P</kbd></td><td align="left">方法参数提示显示</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>U</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>U</kbd></td><td align="left">前往当前光标所在的方法的父类的方法 / 接口定义</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>B</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>B</kbd></td><td align="left">进入光标所在的方法/变量的接口或是定义处，等效于 <code>Ctrl + 左键单击</code></td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>/</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>/</kbd></td><td align="left">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>F1</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>F1</kbd></td><td align="left">在光标所在的错误代码处显示错误信息</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>F11</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>F3</kbd></td><td align="left">选中文件 / 文件夹，使用助记符设定 / 取消书签</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>F12</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>F12</kbd></td><td align="left">弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Space</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>Space</kbd></td><td align="left">基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 <code>Ctrl + 逗号</code></td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Delete</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Fn</kbd>+ Delete</td><td align="left">删除光标后面的单词或是中文句</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>BackSpace</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Delete</kbd></td><td align="left">删除光标前面的单词或是中文句</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>1,2,3...9</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>1,2,3...9</kbd></td><td align="left">定位到对应数值的书签位置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>加号</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>加号</kbd></td><td align="left">展开代码</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>减号</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>减号</kbd></td><td align="left">折叠代码</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>左键单击</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>左键单击</kbd></td><td align="left">在打开的文件标题上，弹出该文件路径</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>左方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>左方向键</kbd></td><td align="left">光标跳转到当前单词 / 中文句的左侧开头位置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>右方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>右方向键</kbd></td><td align="left">光标跳转到当前单词 / 中文句的右侧开头位置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>前方向键</kbd></td><td align="left">预设中没有该快捷键</td><td align="left">等效于鼠标滚轮向前效果</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>后方向键</kbd></td><td align="left">预设中没有该快捷键</td><td align="left">等效于鼠标滚轮向后效果</td></tr></tbody></table><h2 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Alt</kbd> + <kbd>`</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>V</kbd></td><td align="left">显示版本控制常用操作菜单弹出层</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>F1</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>F1</kbd></td><td align="left">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>F7</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>F7</kbd></td><td align="left">查询所选对象/变量被引用</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>Enter</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Enter</kbd></td><td align="left">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>Insert</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>N</kbd></td><td align="left">代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>左方向键</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>左方向键</kbd></td><td align="left">切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>右方向键</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>右方向键</kbd></td><td align="left">切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>前方向键</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>前方向键</kbd></td><td align="left">当前光标跳转到当前文件的前一个方法名位置</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>后方向键</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>后方向键</kbd></td><td align="left">当前光标跳转到当前文件的后一个方法名位置</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>1,2,3...9</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>1,2,3...9</kbd></td><td align="left">显示对应数值的选项卡，其中 1 是 Project 用得最多</td></tr></tbody></table><h2 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Shift</kbd> + <kbd>F11</kbd></td><td align="left"><kbd>Command + F3</kbd></td><td align="left">弹出书签显示层</td></tr><tr><td align="left"><kbd>Shift</kbd> + <kbd>Tab</kbd></td><td align="left"><kbd>Shift + Tab</kbd></td><td align="left">取消缩进</td></tr><tr><td align="left"><kbd>Shift</kbd> + <kbd>Enter</kbd></td><td align="left"><kbd>Shift + Enter</kbd></td><td align="left">开始新一行。光标所在行下空出一行，光标定位到新行位置</td></tr><tr><td align="left"><kbd>Shift</kbd> + <kbd>左键单击</kbd></td><td align="left"><kbd>Shift + 左键单击</kbd></td><td align="left">在打开的文件名上按此快捷键，可以关闭当前打开文件</td></tr></tbody></table><h2 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>L</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>L</kbd></td><td align="left">格式化代码，可以对当前文件和整个包目录使用</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>O</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>Option</kbd> + <kbd>O</kbd></td><td align="left">优化导入的类，可以对当前文件和整个包目录使用</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>T</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>T</kbd></td><td align="left">对选中的代码弹出环绕选项弹出层</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>S</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>逗号</kbd></td><td align="left">打开 IntelliJ IDEA 系统设置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>Enter</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>Enter</kbd></td><td align="left">光标所在行上空出一行，光标定位到新行</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>左方向键</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>左方向键</kbd></td><td align="left">退回到上一个操作的地方</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>右方向键</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>右方向键</kbd></td><td align="left">前进到上一个操作的地方</td></tr></tbody></table><h2 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>F</kbd></td><td align="left">根据输入内容查找整个项目 或 指定目录内文件</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>R</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>R</kbd></td><td align="left">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>J</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>J</kbd></td><td align="left">自动将下一行合并到当前行末尾</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Z</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>Z</kbd></td><td align="left">取消撤销</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>W</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>方向键下</kbd></td><td align="left">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>N</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd></td><td align="left">通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd></td><td align="left">对选中的代码进行大 / 小写轮流转换</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>T</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>T</kbd></td><td align="left">对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd></td><td align="left">复制当前文件磁盘路径到剪贴板</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></td><td align="left">跳转到类型声明处</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>/</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>/</kbd></td><td align="left">代码块注释</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>[</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>[</kbd></td><td align="left">选中从光标所在位置到它的顶部中括号位置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>]</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>]</kbd></td><td align="left">选中从光标所在位置到它的底部中括号位置</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>加号</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>加号</kbd></td><td align="left">展开所有代码</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>减号</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>减号</kbd></td><td align="left">折叠所有代码</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F7</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>F7</kbd></td><td align="left">高亮显示所有该选中文本，按Esc高亮消失</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F12</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>F12</kbd></td><td align="left">编辑器最大化</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd></td><td align="left">自动结束代码，行末自动添加分号</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Backspace</kbd></td><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Backspace</kbd></td><td align="left">退回到上次修改的地方</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>1,2,3...9</kbd></td><td align="left"><kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>1,2,3...9</kbd></td><td align="left">快速添加指定数值的书签</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>左键单击</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>左键单击</kbd></td><td align="left">把光标放在某个类变量上，按此快捷键可以直接定位到该类中</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>左方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>左方向键</kbd></td><td align="left">在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>右方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>右方向键</kbd></td><td align="left">在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td align="left">光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td align="left">光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td></tr></tbody></table><h2 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>N</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></td><td align="left">选择 / 添加 task</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>左键双击</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>左键双击</kbd></td><td align="left">选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td align="left">移动光标所在行向上移动</td></tr><tr><td align="left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td align="left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td align="left">移动光标所在行向下移动</td></tr></tbody></table><h2 id="Ctrl-Shift-Alt"><a href="#Ctrl-Shift-Alt" class="headerlink" title="Ctrl + Shift + Alt"></a>Ctrl + Shift + Alt</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>V</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>Option</kbd> + <kbd>V</kbd></td><td align="left">无格式黏贴</td></tr><tr><td align="left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>S</kbd></td><td align="left"><kbd>Command</kbd> + <kbd>;</kbd></td><td align="left">打开当前项目设置</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th align="left">Win 快捷键</th><th align="left">Mac 快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><kbd>F2</kbd></td><td align="left"><kbd>F2</kbd></td><td align="left">跳转到下一个高亮错误 或 警告位置</td></tr><tr><td align="left"><kbd>F4</kbd></td><td align="left"><kbd>F4</kbd></td><td align="left">编辑源</td></tr><tr><td align="left"><kbd>F11</kbd></td><td align="left"><kbd>F3</kbd></td><td align="left">添加书签</td></tr><tr><td align="left"><kbd>F12</kbd></td><td align="left"><kbd>F12</kbd></td><td align="left">回到前一个工具窗口</td></tr><tr><td align="left"><kbd>Tab</kbd></td><td align="left"><kbd>Tab</kbd></td><td align="left">缩进</td></tr><tr><td align="left"><kbd>ESC</kbd></td><td align="left"><kbd>ESC</kbd></td><td align="left">从工具窗口进入代码文件窗口</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Mac-键盘符号说明&quot;&gt;&lt;a href=&quot;#Mac-键盘符号说明&quot; class=&quot;headerlink&quot; title=&quot;Mac 键盘符号说明&quot;&gt;&lt;/a&gt;Mac 键盘符号说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;⌘&lt;/code&gt; == &lt;code&gt;Command&lt;</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="小妙招" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/%E5%B0%8F%E5%A6%99%E6%8B%9B/"/>
    
    
    <category term="快捷键" scheme="https://www.lzp.zone/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    <category term="全局操作" scheme="https://www.lzp.zone/tags/%E5%85%A8%E5%B1%80%E6%93%8D%E4%BD%9C/"/>
    
    <category term="效率" scheme="https://www.lzp.zone/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>《MySQL必知必会》拆书稿</title>
    <link href="https://www.lzp.zone/2021/11/03/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E6%8B%86%E4%B9%A6%E7%A8%BF/"/>
    <id>https://www.lzp.zone/2021/11/03/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E6%8B%86%E4%B9%A6%E7%A8%BF/</id>
    <published>2021-11-03T04:10:02.000Z</published>
    <updated>2022-03-20T12:32:32.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>共三十章，211面<br>内容有待精简<br>持续更新、</p></blockquote><h2 id="第1章-了解SQL"><a href="#第1章-了解SQL" class="headerlink" title="第1章 了解SQL"></a>第1章 了解SQL</h2><h3 id="1-1-数据库基础"><a href="#1-1-数据库基础" class="headerlink" title="1.1  数据库基础"></a>1.1  数据库基础</h3><h4 id="1-1-1-什么是数据库"><a href="#1-1-1-什么是数据库" class="headerlink" title="1.1.1  什么是数据库"></a>1.1.1  什么是数据库</h4><ul><li>数据库是一个以某种 有组织的方式存储的数据集合。</li><li>数据库不同于日常使用的数据库软件（DBMS 数据库管理系统），数据库是通过DBMS创建和操纵的容器。数据库可以是保存在硬设备上的文件，但也可以不是。</li></ul><h4 id="1-1-2-表"><a href="#1-1-2-表" class="headerlink" title="1.1.2  表"></a>1.1.2  表</h4><ul><li>表是一种结构化的文件，可用 来存储某种特定类型的数据。表可以保存顾客清单、产品目录，或者其 他信息清单。</li><li>存储在表中的数据是一种类型的数据或一个清单，决不能将归属于不同类型的数据储存在一起。</li><li>数据库中的每个表都有一个名字，用来标识自己。此名字是唯一的， 这表示数据库中没有其他表具有相同的名字。</li><li>虽然在相同数据库中不能两次使用相同的表名， 但在不同的数据库中却可以使用相同的表名。</li><li>模式(schema) ：关于数据库和表的布局及特性的信息。模式可以用来描述数据库中特定的表以及 整个数据库(和其中表的关系)。</li></ul><h4 id="1-1-3-列和数据类型"><a href="#1-1-3-列和数据类型" class="headerlink" title="1.1.3  列和数据类型"></a>1.1.3  列和数据类型</h4><ul><li><p>表由列组成。列中存储着表中某部分的信息。列(column)： 表中的一个字段。所有表都是由一个或多个列组成的。</p></li><li><p>理解列的最好办法是将数据库表想象为一个网格。网格中每一列存 储着一条特定的信息。</p></li><li><p>数据库中每个列都有相应的数据类型。数据类型定义列可以存储的数据种类。</p></li><li><p>数据类型限制可存储在列中的数据种类(例如，防止在数值字段中 录入字符值)。数据类型还帮助正确地排序数据，并在优化磁盘使用方面起重要的作用。因此，在创建表时必须对数据类型给予特别的关注。</p><h4 id="1-1-4-行"><a href="#1-1-4-行" class="headerlink" title="1.1.4  行"></a>1.1.4  行</h4></li><li><p>表中的数据是按行存储的，所保存的每个记录存储在自己的行内。如果将表想象为网格，网格中垂直的列为表列，水平行为表行。</p></li><li><p>用户在提到行(row)时称其为 数据库记录(record)。在很大程度上，这两个术语是可以互相 替代的，但从技术上说，行才是正确的术语。</p><h4 id="1-1-5-主键"><a href="#1-1-5-主键" class="headerlink" title="1.1.5  主键"></a>1.1.5  主键</h4></li><li><p>主键(primary key)1一一列(或一组列)，其值能够唯一区分表 中每个行。表中每一行都应该有可以唯一标识自己的一列(或一组列)。</p></li><li><p>唯一标识表中每行的这个列(或这组列)称为主键。主键用来表示 一个特定的行。没有主键，更新或删除表中特定行很困难，因为没有安 全的方法保证只涉及相关的行。</p></li><li><p>表中的任何列都可以作为主键，只要它满足以下条件:</p><ul><li>任意两行都不具有相同的主键值;</li><li>每个行都必须具有一个主键值(主键列不允许NULL值)。</li></ul></li><li><p>主键值规则（本身强制的要求）</p><ul><li>主键通常定义在表的一列上，但这并不是必需的，也可以一起使用多个列作为主键。</li><li>在使用多列作为主键时，上述条件必须应用到构成主 键的所有列，所有列值的组合必须是唯一的(但单个列的值可以不唯一)。</li></ul></li><li><p>使用主键的好习惯：</p><ul><li>不更新主键列中的值;</li><li>不重用主键列的值;</li><li>不在主键列中使用可能会更改的值。</li></ul></li></ul><h3 id="1-2-什么是SQL"><a href="#1-2-什么是SQL" class="headerlink" title="1.2  什么是SQL"></a>1.2  什么是SQL</h3><ul><li>SQL(发音为字母S-Q-L或sequel)是结构化查询语言(Structured Query Language)的缩写。SQL是一种专门用来与数据库通信的语言。</li><li>SQL有如下的优点：<ul><li>SQL不是某个特定数据库供应商专有的语言。几乎所有重要的DBMS都支持SQL，所以，学习此语言使你几乎能与所有数据库打交道。</li><li>SQL简单易学。它的语句全都是由描述性很强的英语单词组成， 而且这些单词的数目不多。</li><li>SQL尽管看上去很简单，但它实际上是一种强有力的语言，灵活 使用其语言元素，可以进行非常复杂和高级的数据库操作。</li></ul></li></ul><h3 id="1-3-动手实践"><a href="#1-3-动手实践" class="headerlink" title="1.3  动手实践"></a>1.3  动手实践</h3><h3 id="1-4-小结"><a href="#1-4-小结" class="headerlink" title="1.4  小结"></a>1.4  小结</h3><h2 id="第2章-MySQL简介"><a href="#第2章-MySQL简介" class="headerlink" title="第2章 MySQL简介"></a>第2章 MySQL简介</h2><h3 id="2-1-什么是MySQL"><a href="#2-1-什么是MySQL" class="headerlink" title="2.1  什么是MySQL"></a>2.1  什么是MySQL</h3><ul><li>数据的所有存储、 检索、管理和处理实际上是由数据库软件——DBMS(数据库管理系统) 完成的。MySQL是一种DBMS，即它是一种数据库软件。</li><li>MySQL广泛应用的原因：<ul><li>成本低</li><li>性能好</li><li>可信赖</li><li>简单</li></ul></li></ul><h4 id="2-1-1-客户机—服务器软件"><a href="#2-1-1-客户机—服务器软件" class="headerlink" title="2.1.1  客户机—服务器软件"></a>2.1.1  客户机—服务器软件</h4><ul><li><p>DBMS的两种类型</p><ul><li><p>一类为基于共享文件系统的DBMS</p></li><li><p>另一类为基于客户机——服务器的DBMS</p><p>MySQL，Oracle，Microsoft SQL Server都属于后者。</p></li></ul></li><li><p>客户机—服务器应用分为两个不同的部分：</p><ul><li>服务器部分是负责所有数据访问和处理的一个软件。这个软件运行在称为数据库服务器的计算机上。与数据文件打交道的只有服务器软件。关于数据、数据添加、删除和数据更新的所有请求都由服务器软件完成。</li><li>客户机是与用户打交道的软件。</li></ul></li><li><p>事实上，多数网络的建立使用户不具有对数据的访问权，甚至不 具有对存储数据的驱动器的访问权。</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw1u8enn8lj30q906ndh5.jpg"                      alt="image-20210923150430496"                ></p><h4 id="2-1-2-MySQL版本"><a href="#2-1-2-MySQL版本" class="headerlink" title="2.1.2  MySQL版本"></a>2.1.2  MySQL版本</h4><ul><li>MySQL 4.1对MySQL函数库引入了重要更改，本书是为使用此版本或更高版本而撰写的。</li></ul><h3 id="2-2-MySQL工具"><a href="#2-2-MySQL工具" class="headerlink" title="2.2  MySQL工具"></a>2.2  MySQL工具</h3><ul><li>每个MySQL安装都有一个名为mysql的简单命令行实用程序。这个实用程序没有下拉菜单、流行的用户界面、鼠标支持或任何类似的东西。</li></ul><h4 id="2-2-1-mysql命令行实用程序"><a href="#2-2-1-mysql命令行实用程序" class="headerlink" title="2.2.1 mysql命令行实用程序"></a>2.2.1 mysql命令行实用程序</h4><ul><li><p>如果仅输入mysql，可能会出现一个错误 消息。因为可能需要安全证书，或者是因为MySQL没有运行 在本地或默认端口上。</p></li><li><p>mysql接受你可以(和可能需要)使用 的一组命令行参数。</p></li><li><p>具体的版本和连接信息可能不同，但都可以使用这个实用程序。请注意:</p><ul><li><p>命令输入在mysql&gt;之后;</p></li><li><p>命令用;或\g结束，换句话说，仅按Enter不执行命令;</p></li><li><p>输入help或\h获得帮助，也可以输入更多的文本获得特定命令的帮助(如，输入help select获得使用SELECT语句的帮助);</p></li><li><p>输入quit或exit退出命令行实用程序。</p><p>==mysql命令行实用程序是使用最多的实用程序之一，它对于快速测试和执行脚本非常有价值。==</p></li></ul></li></ul><h4 id="2-2-2-MySQL-Adminis-trator"><a href="#2-2-2-MySQL-Adminis-trator" class="headerlink" title="2.2.2  MySQL Adminis-trator"></a>2.2.2  MySQL Adminis-trator</h4><ul><li><p>MySQL Administrator(MySQL管理器)是一个图形交互客户机，用来简化MySQL服务器的管理。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw1u8fniw9j30o405g3z9.jpg"                      alt="image-20210923152606488" style="zoom: 67%;"                 ></li><li><p>MySQL Administrator提示输入服务器和登录信息(并且允许你保存 服务器定义供以后选择)，然后显示允许选择不同视图的图标。其中:</p><ul><li> Server Information(服务器信息)显示客户机和被连接的服务器的状态和版本信息;</li><li> Service Control(服务控制)允许停止和启动MySQL以及指定服务器特性;</li><li> User Administration(用户管理)用来定义MySQL用户、登录和权限;</li><li> Catalogs(目录)列出可用的数据库并允许创建数据库和表。</li></ul></li></ul><h4 id="2-2-3-MySQL-Query-Browser"><a href="#2-2-3-MySQL-Query-Browser" class="headerlink" title="2.2.3  MySQL Query Browser"></a>2.2.3  MySQL Query Browser</h4><ul><li><p>MySQL Query Browser为一个图形交互客户机，用来编写和执行 MySQL命令。</p></li><li><p>MySQL Query Browser要求输入服务器和登录信息(在MySQL Query Browser和MySQL Administrator之间共享保存的定义)，然后显示应用界面。注意下面几点：</p><ul><li><p>输入MySQL命令到屏幕顶上的窗口中。在输入语句后，单击 Execute按钮把它提交给MySQL处理。</p></li><li><p>结果(如果有)显示在屏幕左边的大区域网格中。</p></li><li><p>多条语句和结果显示在它们自己的标签中，并且允许快速切换。屏幕右边是一个标签，它列出所有可能的数据源(这里称为大纲)，展开任一数据源查看它的表，展开任一个表查看它的列。 你还可以选择表和列让MySQL Query Browser为你编写MySQL语句。</p></li><li><p>Schemata(大纲)标签的右边是一个History(历史)标签，它保持MySQL语句的执行历史。在需要测试不同版本的MySQL语句时，它非常有用。</p></li><li><p>关于MySQL语法、函数等的帮助可在屏幕右下角得到。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gw1u8f587qj30rf06sdgk.jpg"                      alt="image-20210923153349510"                ></p></li></ul></li></ul><h3 id="2-3-小结"><a href="#2-3-小结" class="headerlink" title="2.3  小结"></a>2.3  小结</h3><h2 id="第3章-使用MySQL"><a href="#第3章-使用MySQL" class="headerlink" title="第3章 使用MySQL"></a>第3章 使用MySQL</h2><h3 id="3-1-连接"><a href="#3-1-连接" class="headerlink" title="3.1  连接"></a>3.1  连接</h3><ul><li>MySQL与所有的客户机-服务器一样,要求在能执行命令之前登录到DBMS</li><li>登录名可以与网络登录名不同,MySQL 在内部保存自己的用户列表,并且把每个用户与用户权限关联起来</li><li>连接到MySQL,需要一下信息:<ul><li>主机名(计算机名)</li><li>端口</li><li>一个合法的用户名</li><li>用户口令</li></ul></li></ul><h3 id="3-2-选择数据库"><a href="#3-2-选择数据库" class="headerlink" title="3.2  选择数据库"></a>3.2  选择数据库</h3><h3 id="3-3-了解数据库和表"><a href="#3-3-了解数据库和表" class="headerlink" title="3.3  了解数据库和表"></a>3.3  了解数据库和表</h3><h3 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4  小结"></a>3.4  小结</h3><h2 id="第4章-检索数据"><a href="#第4章-检索数据" class="headerlink" title="第4章 检索数据"></a>第4章 检索数据</h2><h3 id="4-1-SELECT语句"><a href="#4-1-SELECT语句" class="headerlink" title="4.1 SELECT语句"></a>4.1 SELECT语句</h3><h3 id="4-2-检索单个列"><a href="#4-2-检索单个列" class="headerlink" title="4.2 检索单个列"></a>4.2 检索单个列</h3><h3 id="4-3-检索多个列"><a href="#4-3-检索多个列" class="headerlink" title="4.3 检索多个列"></a>4.3 检索多个列</h3><h3 id="4-4-检索所有列"><a href="#4-4-检索所有列" class="headerlink" title="4.4 检索所有列"></a>4.4 检索所有列</h3><h3 id="4-5-检索不同的行"><a href="#4-5-检索不同的行" class="headerlink" title="4.5 检索不同的行"></a>4.5 检索不同的行</h3><h3 id="4-6-限制结果"><a href="#4-6-限制结果" class="headerlink" title="4.6 限制结果"></a>4.6 限制结果</h3><h3 id="4-7-使用完全限定的表名"><a href="#4-7-使用完全限定的表名" class="headerlink" title="4.7 使用完全限定的表名"></a>4.7 使用完全限定的表名</h3><h3 id="4-8-小结"><a href="#4-8-小结" class="headerlink" title="4.8 小结"></a>4.8 小结</h3><h2 id="第5章-排序检索数据"><a href="#第5章-排序检索数据" class="headerlink" title="第5章 排序检索数据"></a>第5章 排序检索数据</h2><h3 id="5-1-排序数据"><a href="#5-1-排序数据" class="headerlink" title="5.1 排序数据"></a>5.1 排序数据</h3><h3 id="5-2-按多个列排序"><a href="#5-2-按多个列排序" class="headerlink" title="5.2 按多个列排序"></a>5.2 按多个列排序</h3><h3 id="5-3-指定排序方向"><a href="#5-3-指定排序方向" class="headerlink" title="5.3 指定排序方向"></a>5.3 指定排序方向</h3><h3 id="5-4-小结"><a href="#5-4-小结" class="headerlink" title="5.4 小结"></a>5.4 小结</h3><h2 id="第6章-过滤数据"><a href="#第6章-过滤数据" class="headerlink" title="第6章 过滤数据"></a>第6章 过滤数据</h2><h3 id="6-1-使用WHERE子句"><a href="#6-1-使用WHERE子句" class="headerlink" title="6.1 使用WHERE子句"></a>6.1 使用WHERE子句</h3><h3 id="6-2-WHERE子句操作符"><a href="#6-2-WHERE子句操作符" class="headerlink" title="6.2 WHERE子句操作符"></a>6.2 WHERE子句操作符</h3><h3 id="6-2-1-检查单个值"><a href="#6-2-1-检查单个值" class="headerlink" title="6.2.1 检查单个值"></a>6.2.1 检查单个值</h3><h3 id="6-2-2-不匹配检查"><a href="#6-2-2-不匹配检查" class="headerlink" title="6.2.2 不匹配检查"></a>6.2.2 不匹配检查</h3><h3 id="6-2-3-范围值检查"><a href="#6-2-3-范围值检查" class="headerlink" title="6.2.3 范围值检查"></a>6.2.3 范围值检查</h3><h3 id="6-2-4-空值检查"><a href="#6-2-4-空值检查" class="headerlink" title="6.2.4 空值检查"></a>6.2.4 空值检查</h3><h3 id="6-3-小结"><a href="#6-3-小结" class="headerlink" title="6.3 小结"></a>6.3 小结</h3><h2 id="第7章-数据过滤……………………-40"><a href="#第7章-数据过滤……………………-40" class="headerlink" title="第7章 数据过滤…………………….. 40"></a>第7章 数据过滤…………………….. 40</h2><h3 id="7-1-组合WHERE子句-………………-40"><a href="#7-1-组合WHERE子句-………………-40" class="headerlink" title="7.1 组合WHERE子句 ……………….. 40"></a>7.1 组合WHERE子句 ……………….. 40</h3><h3 id="7-1-1-AND操作符-……………-40"><a href="#7-1-1-AND操作符-……………-40" class="headerlink" title="7.1.1  AND操作符 ……………. 40"></a>7.1.1  AND操作符 ……………. 40</h3><h3 id="7-1-2-OR操作符-………………-41"><a href="#7-1-2-OR操作符-………………-41" class="headerlink" title="7.1.2  OR操作符 ……………… 41"></a>7.1.2  OR操作符 ……………… 41</h3><h3 id="7-1-3-计算次序-………………-42"><a href="#7-1-3-计算次序-………………-42" class="headerlink" title="7.1.3  计算次序 ……………… 42"></a>7.1.3  计算次序 ……………… 42</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;共三十章，211面&lt;br&gt;内容有待精简&lt;br&gt;持续更新、&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;第1章-了解SQL&quot;&gt;&lt;a href=&quot;#第1章-了解SQL&quot; class=&quot;headerlink&quot; title=&quot;第1章 了解SQL&quot;&gt;</summary>
      
    
    
    
    <category term="技术" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="MySQL" scheme="https://www.lzp.zone/categories/%E6%8A%80%E6%9C%AF/MySQL/"/>
    
    <category term="悦读" scheme="https://www.lzp.zone/categories/%E6%82%A6%E8%AF%BB/"/>
    
    <category term="拆书稿" scheme="https://www.lzp.zone/categories/%E6%82%A6%E8%AF%BB/%E6%8B%86%E4%B9%A6%E7%A8%BF/"/>
    
    
    <category term="数据库" scheme="https://www.lzp.zone/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://www.lzp.zone/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://www.lzp.zone/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>设计网站集锦</title>
    <link href="https://www.lzp.zone/2021/11/02/%E6%BC%82%E4%BA%AE%E8%AE%BE%E8%AE%A1/"/>
    <id>https://www.lzp.zone/2021/11/02/%E6%BC%82%E4%BA%AE%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-11-02T14:05:37.000Z</published>
    <updated>2022-03-21T12:05:40.285Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一大波资源正在来袭</p></blockquote><ol><li><p><a class="link"   href="http://bm.straightline.jp/" >直线<i class="fas fa-external-link-alt"></i></a><br>一个日本的网站设计赏析平台</p></li><li><p><a class="link"   href="https://dribbble.com/" >Dribble<i class="fas fa-external-link-alt"></i></a><br>UI分享网站</p></li><li><p><a class="link"   href="https://www.behance.net/" >Behance<i class="fas fa-external-link-alt"></i></a><br>比Drbble更全面，支持英文关键字搜索</p></li><li><p><a class="link"   href="https://logopond.com/" >logopond<i class="fas fa-external-link-alt"></i></a><br>国外优秀logo分享平台</p></li><li><p><a class="link"   href="http://instantlogosearch.com/" >instant logo<i class="fas fa-external-link-alt"></i></a><br>提供各大公司logo的矢量图下载</p></li><li><p><a class="link"   href="https://www.lapa.ninja/" >lapa<i class="fas fa-external-link-alt"></i></a><br>精美的landing page收集网站</p></li><li><p><a class="link"   href="https://www.awwwards.com/" >awwwards<i class="fas fa-external-link-alt"></i></a><br>展示卓越前沿的web设计，打分评价</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一大波资源正在来袭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;http://bm.straightline.jp/&quot; &gt;直线&lt;i class=&quot;fas fa-external-lin</summary>
      
    
    
    
    <category term="设计美学" scheme="https://www.lzp.zone/categories/%E8%AE%BE%E8%AE%A1%E7%BE%8E%E5%AD%A6/"/>
    
    <category term="资源素材" scheme="https://www.lzp.zone/categories/%E8%AE%BE%E8%AE%A1%E7%BE%8E%E5%AD%A6/%E8%B5%84%E6%BA%90%E7%B4%A0%E6%9D%90/"/>
    
    
    <category term="设计资源网站" scheme="https://www.lzp.zone/tags/%E8%AE%BE%E8%AE%A1%E8%B5%84%E6%BA%90%E7%BD%91%E7%AB%99/"/>
    
    <category term="UI设计" scheme="https://www.lzp.zone/tags/UI%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
</feed>
